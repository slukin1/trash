package com.caverock.androidsvg;

import android.graphics.Matrix;
import android.support.v4.media.session.PlaybackStateCompat;
import android.util.Log;
import com.caverock.androidsvg.CSSParser;
import com.caverock.androidsvg.PreserveAspectRatio;
import com.caverock.androidsvg.SVG;
import com.facebook.share.internal.MessengerShareContentUtility;
import com.facebook.share.internal.ShareConstants;
import com.huobi.view.roundimg.RoundedDrawable;
import com.jumio.sdk.reject.JumioRejectReason;
import com.tencent.liteav.TXLiteAVCode;
import com.tencent.rtmp.TXLivePushConfig;
import com.youth.banner.config.BannerConfig;
import io.flutter.plugins.firebase.crashlytics.Constants;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.zip.GZIPInputStream;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xmlpull.v1.XmlPullParser;

public class SVGParser {

    /* renamed from: a  reason: collision with root package name */
    public SVG f64576a = null;

    /* renamed from: b  reason: collision with root package name */
    public SVG.h0 f64577b = null;

    /* renamed from: c  reason: collision with root package name */
    public boolean f64578c = false;

    /* renamed from: d  reason: collision with root package name */
    public int f64579d;

    /* renamed from: e  reason: collision with root package name */
    public boolean f64580e = false;

    /* renamed from: f  reason: collision with root package name */
    public SVGElem f64581f = null;

    /* renamed from: g  reason: collision with root package name */
    public StringBuilder f64582g = null;

    /* renamed from: h  reason: collision with root package name */
    public boolean f64583h = false;

    /* renamed from: i  reason: collision with root package name */
    public StringBuilder f64584i = null;

    public enum SVGAttr {
        CLASS,
        clip,
        clip_path,
        clipPathUnits,
        clip_rule,
        color,
        cx,
        cy,
        direction,
        dx,
        dy,
        fx,
        fy,
        d,
        display,
        fill,
        fill_rule,
        fill_opacity,
        font,
        font_family,
        font_size,
        font_weight,
        font_style,
        gradientTransform,
        gradientUnits,
        height,
        href,
        image_rendering,
        marker,
        marker_start,
        marker_mid,
        marker_end,
        markerHeight,
        markerUnits,
        markerWidth,
        mask,
        maskContentUnits,
        maskUnits,
        media,
        offset,
        opacity,
        orient,
        overflow,
        pathLength,
        patternContentUnits,
        patternTransform,
        patternUnits,
        points,
        preserveAspectRatio,
        r,
        refX,
        refY,
        requiredFeatures,
        requiredExtensions,
        requiredFormats,
        requiredFonts,
        rx,
        ry,
        solid_color,
        solid_opacity,
        spreadMethod,
        startOffset,
        stop_color,
        stop_opacity,
        stroke,
        stroke_dasharray,
        stroke_dashoffset,
        stroke_linecap,
        stroke_linejoin,
        stroke_miterlimit,
        stroke_opacity,
        stroke_width,
        style,
        systemLanguage,
        text_anchor,
        text_decoration,
        transform,
        type,
        vector_effect,
        version,
        viewBox,
        width,
        x,
        y,
        x1,
        y1,
        x2,
        y2,
        viewport_fill,
        viewport_fill_opacity,
        visibility,
        UNSUPPORTED;
        
        private static final Map<String, SVGAttr> cache = null;

        /* access modifiers changed from: public */
        static {
            cache = new HashMap();
            for (SVGAttr sVGAttr : values()) {
                if (sVGAttr == CLASS) {
                    cache.put(Constants.CLASS, sVGAttr);
                } else if (sVGAttr != UNSUPPORTED) {
                    cache.put(sVGAttr.name().replace('_', '-'), sVGAttr);
                }
            }
        }

        public static SVGAttr fromString(String str) {
            SVGAttr sVGAttr = cache.get(str);
            if (sVGAttr != null) {
                return sVGAttr;
            }
            return UNSUPPORTED;
        }
    }

    public enum SVGElem {
        svg,
        a,
        circle,
        clipPath,
        defs,
        desc,
        ellipse,
        f64602g,
        image,
        line,
        linearGradient,
        marker,
        mask,
        path,
        pattern,
        polygon,
        polyline,
        radialGradient,
        rect,
        solidColor,
        stop,
        style,
        SWITCH,
        symbol,
        text,
        textPath,
        title,
        tref,
        tspan,
        use,
        view,
        UNSUPPORTED;
        
        private static final Map<String, SVGElem> cache = null;

        /* access modifiers changed from: public */
        static {
            cache = new HashMap();
            for (SVGElem sVGElem : values()) {
                if (sVGElem == SWITCH) {
                    cache.put("switch", sVGElem);
                } else if (sVGElem != UNSUPPORTED) {
                    cache.put(sVGElem.name(), sVGElem);
                }
            }
        }

        public static SVGElem fromString(String str) {
            SVGElem sVGElem = cache.get(str);
            if (sVGElem != null) {
                return sVGElem;
            }
            return UNSUPPORTED;
        }
    }

    public static /* synthetic */ class a {

        /* renamed from: a  reason: collision with root package name */
        public static final /* synthetic */ int[] f64603a;

        /* renamed from: b  reason: collision with root package name */
        public static final /* synthetic */ int[] f64604b;

        /* JADX WARNING: Can't wrap try/catch for region: R(240:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|(2:77|78)|79|(2:81|82)|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(241:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|(2:77|78)|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(242:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(243:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(244:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(245:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(246:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(247:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(248:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(249:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(250:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(251:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(253:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(254:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(255:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(256:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(257:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(258:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(259:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(260:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(261:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(262:0|(2:1|2)|3|(2:5|6)|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(263:0|(2:1|2)|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(264:0|1|2|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:101:0x015c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:103:0x0168 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:105:0x0174 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:107:0x0180 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:109:0x018c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:111:0x0198 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:113:0x01a4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:115:0x01b0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:117:0x01bc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:119:0x01c8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:121:0x01d4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:123:0x01e0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:125:0x01ec */
        /* JADX WARNING: Missing exception handler attribute for start block: B:127:0x01f8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:129:0x0204 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:131:0x0210 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:133:0x021c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:135:0x0228 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:137:0x0234 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:139:0x0240 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:141:0x024c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:143:0x0258 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:145:0x0264 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:147:0x0270 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:149:0x027c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:151:0x0288 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:153:0x0294 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:155:0x02a0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:157:0x02ac */
        /* JADX WARNING: Missing exception handler attribute for start block: B:159:0x02b8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:161:0x02c4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:163:0x02d0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:165:0x02dc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:167:0x02e8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:169:0x02f4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:171:0x0300 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:173:0x030c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:175:0x0318 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:177:0x0324 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:179:0x0330 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:181:0x033c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:183:0x0348 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:185:0x0354 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:187:0x0360 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:189:0x036c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:191:0x0378 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:193:0x0384 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:195:0x0390 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:197:0x039c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:199:0x03a8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:201:0x03b4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:203:0x03c0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:205:0x03cc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:207:0x03d8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:209:0x03e4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:211:0x03f0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:213:0x03fc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:215:0x0408 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:217:0x0414 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:219:0x0420 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:225:0x043d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:227:0x0447 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:229:0x0451 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:231:0x045b */
        /* JADX WARNING: Missing exception handler attribute for start block: B:233:0x0465 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:235:0x046f */
        /* JADX WARNING: Missing exception handler attribute for start block: B:237:0x0479 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:239:0x0483 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:241:0x048d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:243:0x0497 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:245:0x04a1 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:247:0x04ab */
        /* JADX WARNING: Missing exception handler attribute for start block: B:249:0x04b5 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:251:0x04bf */
        /* JADX WARNING: Missing exception handler attribute for start block: B:253:0x04c9 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:255:0x04d5 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:257:0x04df */
        /* JADX WARNING: Missing exception handler attribute for start block: B:259:0x04e9 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:261:0x04f3 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:263:0x04fd */
        /* JADX WARNING: Missing exception handler attribute for start block: B:265:0x0507 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:267:0x0511 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:269:0x051d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:271:0x0529 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:273:0x0535 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:275:0x0541 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:277:0x054d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:279:0x0559 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:281:0x0565 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:283:0x0571 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:87:0x0108 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:89:0x0114 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:91:0x0120 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:93:0x012c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:95:0x0138 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:97:0x0144 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:99:0x0150 */
        static {
            /*
                com.caverock.androidsvg.SVGParser$SVGAttr[] r0 = com.caverock.androidsvg.SVGParser.SVGAttr.values()
                int r0 = r0.length
                int[] r0 = new int[r0]
                f64604b = r0
                r1 = 1
                com.caverock.androidsvg.SVGParser$SVGAttr r2 = com.caverock.androidsvg.SVGParser.SVGAttr.x     // Catch:{ NoSuchFieldError -> 0x0012 }
                int r2 = r2.ordinal()     // Catch:{ NoSuchFieldError -> 0x0012 }
                r0[r2] = r1     // Catch:{ NoSuchFieldError -> 0x0012 }
            L_0x0012:
                r0 = 2
                int[] r2 = f64604b     // Catch:{ NoSuchFieldError -> 0x001d }
                com.caverock.androidsvg.SVGParser$SVGAttr r3 = com.caverock.androidsvg.SVGParser.SVGAttr.y     // Catch:{ NoSuchFieldError -> 0x001d }
                int r3 = r3.ordinal()     // Catch:{ NoSuchFieldError -> 0x001d }
                r2[r3] = r0     // Catch:{ NoSuchFieldError -> 0x001d }
            L_0x001d:
                r2 = 3
                int[] r3 = f64604b     // Catch:{ NoSuchFieldError -> 0x0028 }
                com.caverock.androidsvg.SVGParser$SVGAttr r4 = com.caverock.androidsvg.SVGParser.SVGAttr.width     // Catch:{ NoSuchFieldError -> 0x0028 }
                int r4 = r4.ordinal()     // Catch:{ NoSuchFieldError -> 0x0028 }
                r3[r4] = r2     // Catch:{ NoSuchFieldError -> 0x0028 }
            L_0x0028:
                r3 = 4
                int[] r4 = f64604b     // Catch:{ NoSuchFieldError -> 0x0033 }
                com.caverock.androidsvg.SVGParser$SVGAttr r5 = com.caverock.androidsvg.SVGParser.SVGAttr.height     // Catch:{ NoSuchFieldError -> 0x0033 }
                int r5 = r5.ordinal()     // Catch:{ NoSuchFieldError -> 0x0033 }
                r4[r5] = r3     // Catch:{ NoSuchFieldError -> 0x0033 }
            L_0x0033:
                r4 = 5
                int[] r5 = f64604b     // Catch:{ NoSuchFieldError -> 0x003e }
                com.caverock.androidsvg.SVGParser$SVGAttr r6 = com.caverock.androidsvg.SVGParser.SVGAttr.version     // Catch:{ NoSuchFieldError -> 0x003e }
                int r6 = r6.ordinal()     // Catch:{ NoSuchFieldError -> 0x003e }
                r5[r6] = r4     // Catch:{ NoSuchFieldError -> 0x003e }
            L_0x003e:
                r5 = 6
                int[] r6 = f64604b     // Catch:{ NoSuchFieldError -> 0x0049 }
                com.caverock.androidsvg.SVGParser$SVGAttr r7 = com.caverock.androidsvg.SVGParser.SVGAttr.href     // Catch:{ NoSuchFieldError -> 0x0049 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0049 }
                r6[r7] = r5     // Catch:{ NoSuchFieldError -> 0x0049 }
            L_0x0049:
                r6 = 7
                int[] r7 = f64604b     // Catch:{ NoSuchFieldError -> 0x0054 }
                com.caverock.androidsvg.SVGParser$SVGAttr r8 = com.caverock.androidsvg.SVGParser.SVGAttr.preserveAspectRatio     // Catch:{ NoSuchFieldError -> 0x0054 }
                int r8 = r8.ordinal()     // Catch:{ NoSuchFieldError -> 0x0054 }
                r7[r8] = r6     // Catch:{ NoSuchFieldError -> 0x0054 }
            L_0x0054:
                r7 = 8
                int[] r8 = f64604b     // Catch:{ NoSuchFieldError -> 0x0060 }
                com.caverock.androidsvg.SVGParser$SVGAttr r9 = com.caverock.androidsvg.SVGParser.SVGAttr.d     // Catch:{ NoSuchFieldError -> 0x0060 }
                int r9 = r9.ordinal()     // Catch:{ NoSuchFieldError -> 0x0060 }
                r8[r9] = r7     // Catch:{ NoSuchFieldError -> 0x0060 }
            L_0x0060:
                r8 = 9
                int[] r9 = f64604b     // Catch:{ NoSuchFieldError -> 0x006c }
                com.caverock.androidsvg.SVGParser$SVGAttr r10 = com.caverock.androidsvg.SVGParser.SVGAttr.pathLength     // Catch:{ NoSuchFieldError -> 0x006c }
                int r10 = r10.ordinal()     // Catch:{ NoSuchFieldError -> 0x006c }
                r9[r10] = r8     // Catch:{ NoSuchFieldError -> 0x006c }
            L_0x006c:
                r9 = 10
                int[] r10 = f64604b     // Catch:{ NoSuchFieldError -> 0x0078 }
                com.caverock.androidsvg.SVGParser$SVGAttr r11 = com.caverock.androidsvg.SVGParser.SVGAttr.rx     // Catch:{ NoSuchFieldError -> 0x0078 }
                int r11 = r11.ordinal()     // Catch:{ NoSuchFieldError -> 0x0078 }
                r10[r11] = r9     // Catch:{ NoSuchFieldError -> 0x0078 }
            L_0x0078:
                r10 = 11
                int[] r11 = f64604b     // Catch:{ NoSuchFieldError -> 0x0084 }
                com.caverock.androidsvg.SVGParser$SVGAttr r12 = com.caverock.androidsvg.SVGParser.SVGAttr.ry     // Catch:{ NoSuchFieldError -> 0x0084 }
                int r12 = r12.ordinal()     // Catch:{ NoSuchFieldError -> 0x0084 }
                r11[r12] = r10     // Catch:{ NoSuchFieldError -> 0x0084 }
            L_0x0084:
                r11 = 12
                int[] r12 = f64604b     // Catch:{ NoSuchFieldError -> 0x0090 }
                com.caverock.androidsvg.SVGParser$SVGAttr r13 = com.caverock.androidsvg.SVGParser.SVGAttr.cx     // Catch:{ NoSuchFieldError -> 0x0090 }
                int r13 = r13.ordinal()     // Catch:{ NoSuchFieldError -> 0x0090 }
                r12[r13] = r11     // Catch:{ NoSuchFieldError -> 0x0090 }
            L_0x0090:
                r12 = 13
                int[] r13 = f64604b     // Catch:{ NoSuchFieldError -> 0x009c }
                com.caverock.androidsvg.SVGParser$SVGAttr r14 = com.caverock.androidsvg.SVGParser.SVGAttr.cy     // Catch:{ NoSuchFieldError -> 0x009c }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x009c }
                r13[r14] = r12     // Catch:{ NoSuchFieldError -> 0x009c }
            L_0x009c:
                r13 = 14
                int[] r14 = f64604b     // Catch:{ NoSuchFieldError -> 0x00a8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r15 = com.caverock.androidsvg.SVGParser.SVGAttr.r     // Catch:{ NoSuchFieldError -> 0x00a8 }
                int r15 = r15.ordinal()     // Catch:{ NoSuchFieldError -> 0x00a8 }
                r14[r15] = r13     // Catch:{ NoSuchFieldError -> 0x00a8 }
            L_0x00a8:
                r14 = 15
                int[] r15 = f64604b     // Catch:{ NoSuchFieldError -> 0x00b4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r16 = com.caverock.androidsvg.SVGParser.SVGAttr.x1     // Catch:{ NoSuchFieldError -> 0x00b4 }
                int r16 = r16.ordinal()     // Catch:{ NoSuchFieldError -> 0x00b4 }
                r15[r16] = r14     // Catch:{ NoSuchFieldError -> 0x00b4 }
            L_0x00b4:
                r15 = 16
                int[] r16 = f64604b     // Catch:{ NoSuchFieldError -> 0x00c0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r17 = com.caverock.androidsvg.SVGParser.SVGAttr.y1     // Catch:{ NoSuchFieldError -> 0x00c0 }
                int r17 = r17.ordinal()     // Catch:{ NoSuchFieldError -> 0x00c0 }
                r16[r17] = r15     // Catch:{ NoSuchFieldError -> 0x00c0 }
            L_0x00c0:
                r16 = 17
                int[] r17 = f64604b     // Catch:{ NoSuchFieldError -> 0x00cc }
                com.caverock.androidsvg.SVGParser$SVGAttr r18 = com.caverock.androidsvg.SVGParser.SVGAttr.x2     // Catch:{ NoSuchFieldError -> 0x00cc }
                int r18 = r18.ordinal()     // Catch:{ NoSuchFieldError -> 0x00cc }
                r17[r18] = r16     // Catch:{ NoSuchFieldError -> 0x00cc }
            L_0x00cc:
                r17 = 18
                int[] r18 = f64604b     // Catch:{ NoSuchFieldError -> 0x00d8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r19 = com.caverock.androidsvg.SVGParser.SVGAttr.y2     // Catch:{ NoSuchFieldError -> 0x00d8 }
                int r19 = r19.ordinal()     // Catch:{ NoSuchFieldError -> 0x00d8 }
                r18[r19] = r17     // Catch:{ NoSuchFieldError -> 0x00d8 }
            L_0x00d8:
                r18 = 19
                int[] r19 = f64604b     // Catch:{ NoSuchFieldError -> 0x00e4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r20 = com.caverock.androidsvg.SVGParser.SVGAttr.dx     // Catch:{ NoSuchFieldError -> 0x00e4 }
                int r20 = r20.ordinal()     // Catch:{ NoSuchFieldError -> 0x00e4 }
                r19[r20] = r18     // Catch:{ NoSuchFieldError -> 0x00e4 }
            L_0x00e4:
                r19 = 20
                int[] r20 = f64604b     // Catch:{ NoSuchFieldError -> 0x00f0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r21 = com.caverock.androidsvg.SVGParser.SVGAttr.dy     // Catch:{ NoSuchFieldError -> 0x00f0 }
                int r21 = r21.ordinal()     // Catch:{ NoSuchFieldError -> 0x00f0 }
                r20[r21] = r19     // Catch:{ NoSuchFieldError -> 0x00f0 }
            L_0x00f0:
                r20 = 21
                int[] r21 = f64604b     // Catch:{ NoSuchFieldError -> 0x00fc }
                com.caverock.androidsvg.SVGParser$SVGAttr r22 = com.caverock.androidsvg.SVGParser.SVGAttr.requiredFeatures     // Catch:{ NoSuchFieldError -> 0x00fc }
                int r22 = r22.ordinal()     // Catch:{ NoSuchFieldError -> 0x00fc }
                r21[r22] = r20     // Catch:{ NoSuchFieldError -> 0x00fc }
            L_0x00fc:
                r21 = 22
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0108 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.requiredExtensions     // Catch:{ NoSuchFieldError -> 0x0108 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0108 }
                r22[r23] = r21     // Catch:{ NoSuchFieldError -> 0x0108 }
            L_0x0108:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0114 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.systemLanguage     // Catch:{ NoSuchFieldError -> 0x0114 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0114 }
                r24 = 23
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0114 }
            L_0x0114:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0120 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.requiredFormats     // Catch:{ NoSuchFieldError -> 0x0120 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0120 }
                r24 = 24
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0120 }
            L_0x0120:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x012c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.requiredFonts     // Catch:{ NoSuchFieldError -> 0x012c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x012c }
                r24 = 25
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x012c }
            L_0x012c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0138 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.refX     // Catch:{ NoSuchFieldError -> 0x0138 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0138 }
                r24 = 26
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0138 }
            L_0x0138:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0144 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.refY     // Catch:{ NoSuchFieldError -> 0x0144 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0144 }
                r24 = 27
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0144 }
            L_0x0144:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0150 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.markerWidth     // Catch:{ NoSuchFieldError -> 0x0150 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0150 }
                r24 = 28
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0150 }
            L_0x0150:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x015c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.markerHeight     // Catch:{ NoSuchFieldError -> 0x015c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x015c }
                r24 = 29
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x015c }
            L_0x015c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0168 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.markerUnits     // Catch:{ NoSuchFieldError -> 0x0168 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0168 }
                r24 = 30
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0168 }
            L_0x0168:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0174 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.orient     // Catch:{ NoSuchFieldError -> 0x0174 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0174 }
                r24 = 31
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0174 }
            L_0x0174:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0180 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.gradientUnits     // Catch:{ NoSuchFieldError -> 0x0180 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0180 }
                r24 = 32
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0180 }
            L_0x0180:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x018c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.gradientTransform     // Catch:{ NoSuchFieldError -> 0x018c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x018c }
                r24 = 33
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x018c }
            L_0x018c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0198 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.spreadMethod     // Catch:{ NoSuchFieldError -> 0x0198 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0198 }
                r24 = 34
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0198 }
            L_0x0198:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x01a4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fx     // Catch:{ NoSuchFieldError -> 0x01a4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01a4 }
                r24 = 35
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01a4 }
            L_0x01a4:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x01b0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fy     // Catch:{ NoSuchFieldError -> 0x01b0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01b0 }
                r24 = 36
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01b0 }
            L_0x01b0:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x01bc }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.offset     // Catch:{ NoSuchFieldError -> 0x01bc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01bc }
                r24 = 37
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01bc }
            L_0x01bc:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x01c8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.clipPathUnits     // Catch:{ NoSuchFieldError -> 0x01c8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01c8 }
                r24 = 38
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01c8 }
            L_0x01c8:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x01d4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.startOffset     // Catch:{ NoSuchFieldError -> 0x01d4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01d4 }
                r24 = 39
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01d4 }
            L_0x01d4:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x01e0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.patternUnits     // Catch:{ NoSuchFieldError -> 0x01e0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01e0 }
                r24 = 40
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01e0 }
            L_0x01e0:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x01ec }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.patternContentUnits     // Catch:{ NoSuchFieldError -> 0x01ec }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01ec }
                r24 = 41
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01ec }
            L_0x01ec:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x01f8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.patternTransform     // Catch:{ NoSuchFieldError -> 0x01f8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01f8 }
                r24 = 42
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01f8 }
            L_0x01f8:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0204 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.maskUnits     // Catch:{ NoSuchFieldError -> 0x0204 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0204 }
                r24 = 43
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0204 }
            L_0x0204:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0210 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.maskContentUnits     // Catch:{ NoSuchFieldError -> 0x0210 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0210 }
                r24 = 44
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0210 }
            L_0x0210:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x021c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.style     // Catch:{ NoSuchFieldError -> 0x021c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x021c }
                r24 = 45
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x021c }
            L_0x021c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0228 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.CLASS     // Catch:{ NoSuchFieldError -> 0x0228 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0228 }
                r24 = 46
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0228 }
            L_0x0228:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0234 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fill     // Catch:{ NoSuchFieldError -> 0x0234 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0234 }
                r24 = 47
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0234 }
            L_0x0234:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0240 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fill_rule     // Catch:{ NoSuchFieldError -> 0x0240 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0240 }
                r24 = 48
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0240 }
            L_0x0240:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x024c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fill_opacity     // Catch:{ NoSuchFieldError -> 0x024c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x024c }
                r24 = 49
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x024c }
            L_0x024c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0258 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke     // Catch:{ NoSuchFieldError -> 0x0258 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0258 }
                r24 = 50
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0258 }
            L_0x0258:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0264 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_opacity     // Catch:{ NoSuchFieldError -> 0x0264 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0264 }
                r24 = 51
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0264 }
            L_0x0264:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0270 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_width     // Catch:{ NoSuchFieldError -> 0x0270 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0270 }
                r24 = 52
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0270 }
            L_0x0270:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x027c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_linecap     // Catch:{ NoSuchFieldError -> 0x027c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x027c }
                r24 = 53
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x027c }
            L_0x027c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0288 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_linejoin     // Catch:{ NoSuchFieldError -> 0x0288 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0288 }
                r24 = 54
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0288 }
            L_0x0288:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0294 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_miterlimit     // Catch:{ NoSuchFieldError -> 0x0294 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0294 }
                r24 = 55
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0294 }
            L_0x0294:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x02a0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_dasharray     // Catch:{ NoSuchFieldError -> 0x02a0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02a0 }
                r24 = 56
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02a0 }
            L_0x02a0:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x02ac }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_dashoffset     // Catch:{ NoSuchFieldError -> 0x02ac }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02ac }
                r24 = 57
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02ac }
            L_0x02ac:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x02b8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.opacity     // Catch:{ NoSuchFieldError -> 0x02b8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02b8 }
                r24 = 58
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02b8 }
            L_0x02b8:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x02c4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.color     // Catch:{ NoSuchFieldError -> 0x02c4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02c4 }
                r24 = 59
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02c4 }
            L_0x02c4:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x02d0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font     // Catch:{ NoSuchFieldError -> 0x02d0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02d0 }
                r24 = 60
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02d0 }
            L_0x02d0:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x02dc }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font_family     // Catch:{ NoSuchFieldError -> 0x02dc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02dc }
                r24 = 61
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02dc }
            L_0x02dc:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x02e8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font_size     // Catch:{ NoSuchFieldError -> 0x02e8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02e8 }
                r24 = 62
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02e8 }
            L_0x02e8:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x02f4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font_weight     // Catch:{ NoSuchFieldError -> 0x02f4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02f4 }
                r24 = 63
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02f4 }
            L_0x02f4:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0300 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font_style     // Catch:{ NoSuchFieldError -> 0x0300 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0300 }
                r24 = 64
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0300 }
            L_0x0300:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x030c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.text_decoration     // Catch:{ NoSuchFieldError -> 0x030c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x030c }
                r24 = 65
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x030c }
            L_0x030c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0318 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.direction     // Catch:{ NoSuchFieldError -> 0x0318 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0318 }
                r24 = 66
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0318 }
            L_0x0318:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0324 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.text_anchor     // Catch:{ NoSuchFieldError -> 0x0324 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0324 }
                r24 = 67
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0324 }
            L_0x0324:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0330 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.overflow     // Catch:{ NoSuchFieldError -> 0x0330 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0330 }
                r24 = 68
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0330 }
            L_0x0330:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x033c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.marker     // Catch:{ NoSuchFieldError -> 0x033c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x033c }
                r24 = 69
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x033c }
            L_0x033c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0348 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.marker_start     // Catch:{ NoSuchFieldError -> 0x0348 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0348 }
                r24 = 70
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0348 }
            L_0x0348:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0354 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.marker_mid     // Catch:{ NoSuchFieldError -> 0x0354 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0354 }
                r24 = 71
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0354 }
            L_0x0354:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0360 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.marker_end     // Catch:{ NoSuchFieldError -> 0x0360 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0360 }
                r24 = 72
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0360 }
            L_0x0360:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x036c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.display     // Catch:{ NoSuchFieldError -> 0x036c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x036c }
                r24 = 73
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x036c }
            L_0x036c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0378 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.visibility     // Catch:{ NoSuchFieldError -> 0x0378 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0378 }
                r24 = 74
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0378 }
            L_0x0378:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0384 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stop_color     // Catch:{ NoSuchFieldError -> 0x0384 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0384 }
                r24 = 75
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0384 }
            L_0x0384:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0390 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stop_opacity     // Catch:{ NoSuchFieldError -> 0x0390 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0390 }
                r24 = 76
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0390 }
            L_0x0390:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x039c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.clip     // Catch:{ NoSuchFieldError -> 0x039c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x039c }
                r24 = 77
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x039c }
            L_0x039c:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x03a8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.clip_path     // Catch:{ NoSuchFieldError -> 0x03a8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03a8 }
                r24 = 78
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03a8 }
            L_0x03a8:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x03b4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.clip_rule     // Catch:{ NoSuchFieldError -> 0x03b4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03b4 }
                r24 = 79
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03b4 }
            L_0x03b4:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x03c0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.mask     // Catch:{ NoSuchFieldError -> 0x03c0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03c0 }
                r24 = 80
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03c0 }
            L_0x03c0:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x03cc }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.solid_color     // Catch:{ NoSuchFieldError -> 0x03cc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03cc }
                r24 = 81
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03cc }
            L_0x03cc:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x03d8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.solid_opacity     // Catch:{ NoSuchFieldError -> 0x03d8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03d8 }
                r24 = 82
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03d8 }
            L_0x03d8:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x03e4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.viewport_fill     // Catch:{ NoSuchFieldError -> 0x03e4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03e4 }
                r24 = 83
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03e4 }
            L_0x03e4:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x03f0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.viewport_fill_opacity     // Catch:{ NoSuchFieldError -> 0x03f0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03f0 }
                r24 = 84
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03f0 }
            L_0x03f0:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x03fc }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.vector_effect     // Catch:{ NoSuchFieldError -> 0x03fc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03fc }
                r24 = 85
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03fc }
            L_0x03fc:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0408 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.image_rendering     // Catch:{ NoSuchFieldError -> 0x0408 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0408 }
                r24 = 86
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0408 }
            L_0x0408:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0414 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.viewBox     // Catch:{ NoSuchFieldError -> 0x0414 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0414 }
                r24 = 87
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0414 }
            L_0x0414:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x0420 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.type     // Catch:{ NoSuchFieldError -> 0x0420 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0420 }
                r24 = 88
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0420 }
            L_0x0420:
                int[] r22 = f64604b     // Catch:{ NoSuchFieldError -> 0x042c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.media     // Catch:{ NoSuchFieldError -> 0x042c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x042c }
                r24 = 89
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x042c }
            L_0x042c:
                com.caverock.androidsvg.SVGParser$SVGElem[] r15 = com.caverock.androidsvg.SVGParser.SVGElem.values()
                int r15 = r15.length
                int[] r15 = new int[r15]
                f64603a = r15
                com.caverock.androidsvg.SVGParser$SVGElem r23 = com.caverock.androidsvg.SVGParser.SVGElem.svg     // Catch:{ NoSuchFieldError -> 0x043d }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x043d }
                r15[r23] = r1     // Catch:{ NoSuchFieldError -> 0x043d }
            L_0x043d:
                int[] r1 = f64603a     // Catch:{ NoSuchFieldError -> 0x0447 }
                com.caverock.androidsvg.SVGParser$SVGElem r15 = com.caverock.androidsvg.SVGParser.SVGElem.f64602g     // Catch:{ NoSuchFieldError -> 0x0447 }
                int r15 = r15.ordinal()     // Catch:{ NoSuchFieldError -> 0x0447 }
                r1[r15] = r0     // Catch:{ NoSuchFieldError -> 0x0447 }
            L_0x0447:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0451 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.a     // Catch:{ NoSuchFieldError -> 0x0451 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0451 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0451 }
            L_0x0451:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x045b }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.defs     // Catch:{ NoSuchFieldError -> 0x045b }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x045b }
                r0[r1] = r3     // Catch:{ NoSuchFieldError -> 0x045b }
            L_0x045b:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0465 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.use     // Catch:{ NoSuchFieldError -> 0x0465 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0465 }
                r0[r1] = r4     // Catch:{ NoSuchFieldError -> 0x0465 }
            L_0x0465:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x046f }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.path     // Catch:{ NoSuchFieldError -> 0x046f }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x046f }
                r0[r1] = r5     // Catch:{ NoSuchFieldError -> 0x046f }
            L_0x046f:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0479 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.rect     // Catch:{ NoSuchFieldError -> 0x0479 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0479 }
                r0[r1] = r6     // Catch:{ NoSuchFieldError -> 0x0479 }
            L_0x0479:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0483 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.circle     // Catch:{ NoSuchFieldError -> 0x0483 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0483 }
                r0[r1] = r7     // Catch:{ NoSuchFieldError -> 0x0483 }
            L_0x0483:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x048d }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.ellipse     // Catch:{ NoSuchFieldError -> 0x048d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x048d }
                r0[r1] = r8     // Catch:{ NoSuchFieldError -> 0x048d }
            L_0x048d:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0497 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.line     // Catch:{ NoSuchFieldError -> 0x0497 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0497 }
                r0[r1] = r9     // Catch:{ NoSuchFieldError -> 0x0497 }
            L_0x0497:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04a1 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.polyline     // Catch:{ NoSuchFieldError -> 0x04a1 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04a1 }
                r0[r1] = r10     // Catch:{ NoSuchFieldError -> 0x04a1 }
            L_0x04a1:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04ab }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.polygon     // Catch:{ NoSuchFieldError -> 0x04ab }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04ab }
                r0[r1] = r11     // Catch:{ NoSuchFieldError -> 0x04ab }
            L_0x04ab:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04b5 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.text     // Catch:{ NoSuchFieldError -> 0x04b5 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04b5 }
                r0[r1] = r12     // Catch:{ NoSuchFieldError -> 0x04b5 }
            L_0x04b5:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04bf }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.tspan     // Catch:{ NoSuchFieldError -> 0x04bf }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04bf }
                r0[r1] = r13     // Catch:{ NoSuchFieldError -> 0x04bf }
            L_0x04bf:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04c9 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.tref     // Catch:{ NoSuchFieldError -> 0x04c9 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04c9 }
                r0[r1] = r14     // Catch:{ NoSuchFieldError -> 0x04c9 }
            L_0x04c9:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04d5 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.SWITCH     // Catch:{ NoSuchFieldError -> 0x04d5 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04d5 }
                r2 = 16
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04d5 }
            L_0x04d5:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04df }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.symbol     // Catch:{ NoSuchFieldError -> 0x04df }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04df }
                r0[r1] = r16     // Catch:{ NoSuchFieldError -> 0x04df }
            L_0x04df:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04e9 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.marker     // Catch:{ NoSuchFieldError -> 0x04e9 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04e9 }
                r0[r1] = r17     // Catch:{ NoSuchFieldError -> 0x04e9 }
            L_0x04e9:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04f3 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.linearGradient     // Catch:{ NoSuchFieldError -> 0x04f3 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04f3 }
                r0[r1] = r18     // Catch:{ NoSuchFieldError -> 0x04f3 }
            L_0x04f3:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x04fd }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.radialGradient     // Catch:{ NoSuchFieldError -> 0x04fd }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04fd }
                r0[r1] = r19     // Catch:{ NoSuchFieldError -> 0x04fd }
            L_0x04fd:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0507 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.stop     // Catch:{ NoSuchFieldError -> 0x0507 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0507 }
                r0[r1] = r20     // Catch:{ NoSuchFieldError -> 0x0507 }
            L_0x0507:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0511 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.title     // Catch:{ NoSuchFieldError -> 0x0511 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0511 }
                r0[r1] = r21     // Catch:{ NoSuchFieldError -> 0x0511 }
            L_0x0511:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x051d }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.desc     // Catch:{ NoSuchFieldError -> 0x051d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x051d }
                r2 = 23
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x051d }
            L_0x051d:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0529 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.clipPath     // Catch:{ NoSuchFieldError -> 0x0529 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0529 }
                r2 = 24
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0529 }
            L_0x0529:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0535 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.textPath     // Catch:{ NoSuchFieldError -> 0x0535 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0535 }
                r2 = 25
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0535 }
            L_0x0535:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0541 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.pattern     // Catch:{ NoSuchFieldError -> 0x0541 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0541 }
                r2 = 26
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0541 }
            L_0x0541:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x054d }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.image     // Catch:{ NoSuchFieldError -> 0x054d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x054d }
                r2 = 27
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x054d }
            L_0x054d:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0559 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.view     // Catch:{ NoSuchFieldError -> 0x0559 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0559 }
                r2 = 28
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0559 }
            L_0x0559:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0565 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.mask     // Catch:{ NoSuchFieldError -> 0x0565 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0565 }
                r2 = 29
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0565 }
            L_0x0565:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x0571 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.style     // Catch:{ NoSuchFieldError -> 0x0571 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0571 }
                r2 = 30
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0571 }
            L_0x0571:
                int[] r0 = f64603a     // Catch:{ NoSuchFieldError -> 0x057d }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.solidColor     // Catch:{ NoSuchFieldError -> 0x057d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x057d }
                r2 = 31
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x057d }
            L_0x057d:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.a.<clinit>():void");
        }
    }

    public static class b {

        /* renamed from: a  reason: collision with root package name */
        public static final Map<String, PreserveAspectRatio.Alignment> f64605a;

        static {
            HashMap hashMap = new HashMap(10);
            f64605a = hashMap;
            hashMap.put("none", PreserveAspectRatio.Alignment.none);
            hashMap.put("xMinYMin", PreserveAspectRatio.Alignment.xMinYMin);
            hashMap.put("xMidYMin", PreserveAspectRatio.Alignment.xMidYMin);
            hashMap.put("xMaxYMin", PreserveAspectRatio.Alignment.xMaxYMin);
            hashMap.put("xMinYMid", PreserveAspectRatio.Alignment.xMinYMid);
            hashMap.put("xMidYMid", PreserveAspectRatio.Alignment.xMidYMid);
            hashMap.put("xMaxYMid", PreserveAspectRatio.Alignment.xMaxYMid);
            hashMap.put("xMinYMax", PreserveAspectRatio.Alignment.xMinYMax);
            hashMap.put("xMidYMax", PreserveAspectRatio.Alignment.xMidYMax);
            hashMap.put("xMaxYMax", PreserveAspectRatio.Alignment.xMaxYMax);
        }

        public static PreserveAspectRatio.Alignment a(String str) {
            return f64605a.get(str);
        }
    }

    public static class c {

        /* renamed from: a  reason: collision with root package name */
        public static final Map<String, Integer> f64606a;

        static {
            HashMap hashMap = new HashMap(47);
            f64606a = hashMap;
            hashMap.put("aliceblue", -984833);
            hashMap.put("antiquewhite", -332841);
            hashMap.put("aqua", -16711681);
            hashMap.put("aquamarine", -8388652);
            hashMap.put("azure", -983041);
            hashMap.put("beige", -657956);
            hashMap.put("bisque", -6972);
            hashMap.put("black", Integer.valueOf(RoundedDrawable.DEFAULT_BORDER_COLOR));
            hashMap.put("blanchedalmond", -5171);
            hashMap.put("blue", -16776961);
            hashMap.put("blueviolet", -7722014);
            hashMap.put("brown", -5952982);
            hashMap.put("burlywood", -2180985);
            hashMap.put("cadetblue", -10510688);
            hashMap.put("chartreuse", -8388864);
            hashMap.put("chocolate", -2987746);
            hashMap.put("coral", -32944);
            hashMap.put("cornflowerblue", -10185235);
            hashMap.put("cornsilk", -1828);
            hashMap.put("crimson", -2354116);
            hashMap.put("cyan", -16711681);
            hashMap.put("darkblue", -16777077);
            hashMap.put("darkcyan", -16741493);
            hashMap.put("darkgoldenrod", -4684277);
            hashMap.put("darkgray", -5658199);
            hashMap.put("darkgreen", -16751616);
            hashMap.put("darkgrey", -5658199);
            hashMap.put("darkkhaki", -4343957);
            hashMap.put("darkmagenta", -7667573);
            hashMap.put("darkolivegreen", -11179217);
            hashMap.put("darkorange", -29696);
            hashMap.put("darkorchid", -6737204);
            hashMap.put("darkred", -7667712);
            hashMap.put("darksalmon", -1468806);
            hashMap.put("darkseagreen", -7357297);
            hashMap.put("darkslateblue", -12042869);
            hashMap.put("darkslategray", -13676721);
            hashMap.put("darkslategrey", -13676721);
            hashMap.put("darkturquoise", -16724271);
            hashMap.put("darkviolet", -7077677);
            hashMap.put("deeppink", -60269);
            hashMap.put("deepskyblue", -16728065);
            hashMap.put("dimgray", -9868951);
            hashMap.put("dimgrey", -9868951);
            hashMap.put("dodgerblue", -14774017);
            hashMap.put("firebrick", -5103070);
            hashMap.put("floralwhite", -1296);
            hashMap.put("forestgreen", -14513374);
            hashMap.put("fuchsia", -65281);
            hashMap.put("gainsboro", -2302756);
            hashMap.put("ghostwhite", -460545);
            hashMap.put("gold", -10496);
            hashMap.put("goldenrod", -2448096);
            hashMap.put("gray", -8355712);
            hashMap.put("green", -16744448);
            hashMap.put("greenyellow", -5374161);
            hashMap.put("grey", -8355712);
            hashMap.put("honeydew", -983056);
            hashMap.put("hotpink", -38476);
            hashMap.put("indianred", -3318692);
            hashMap.put("indigo", -11861886);
            hashMap.put("ivory", -16);
            hashMap.put("khaki", -989556);
            hashMap.put("lavender", -1644806);
            hashMap.put("lavenderblush", -3851);
            hashMap.put("lawngreen", -8586240);
            hashMap.put("lemonchiffon", Integer.valueOf(TXLiteAVCode.ERR_AUDIO_PLUGIN_INSTALL_NOT_AUTHORIZED));
            hashMap.put("lightblue", -5383962);
            hashMap.put("lightcoral", -1015680);
            hashMap.put("lightcyan", -2031617);
            hashMap.put("lightgoldenrodyellow", -329006);
            hashMap.put("lightgray", -2894893);
            hashMap.put("lightgreen", -7278960);
            hashMap.put("lightgrey", -2894893);
            hashMap.put("lightpink", -18751);
            hashMap.put("lightsalmon", -24454);
            hashMap.put("lightseagreen", -14634326);
            hashMap.put("lightskyblue", -7876870);
            hashMap.put("lightslategray", -8943463);
            hashMap.put("lightslategrey", -8943463);
            hashMap.put("lightsteelblue", -5192482);
            hashMap.put("lightyellow", -32);
            hashMap.put("lime", -16711936);
            hashMap.put("limegreen", -13447886);
            hashMap.put("linen", -331546);
            hashMap.put("magenta", -65281);
            hashMap.put("maroon", -8388608);
            hashMap.put("mediumaquamarine", -10039894);
            hashMap.put("mediumblue", -16777011);
            hashMap.put("mediumorchid", -4565549);
            hashMap.put("mediumpurple", -7114533);
            hashMap.put("mediumseagreen", -12799119);
            hashMap.put("mediumslateblue", -8689426);
            hashMap.put("mediumspringgreen", -16713062);
            hashMap.put("mediumturquoise", -12004916);
            hashMap.put("mediumvioletred", -3730043);
            hashMap.put("midnightblue", -15132304);
            hashMap.put("mintcream", -655366);
            hashMap.put("mistyrose", -6943);
            hashMap.put("moccasin", -6987);
            hashMap.put("navajowhite", -8531);
            hashMap.put("navy", -16777088);
            hashMap.put("oldlace", -133658);
            hashMap.put("olive", -8355840);
            hashMap.put("olivedrab", -9728477);
            hashMap.put("orange", -23296);
            hashMap.put("orangered", -47872);
            hashMap.put("orchid", -2461482);
            hashMap.put("palegoldenrod", -1120086);
            hashMap.put("palegreen", -6751336);
            hashMap.put("paleturquoise", -5247250);
            hashMap.put("palevioletred", -2396013);
            hashMap.put("papayawhip", -4139);
            hashMap.put("peachpuff", -9543);
            hashMap.put("peru", -3308225);
            hashMap.put("pink", -16181);
            hashMap.put("plum", -2252579);
            hashMap.put("powderblue", -5185306);
            hashMap.put("purple", -8388480);
            hashMap.put("rebeccapurple", -10079335);
            hashMap.put("red", -65536);
            hashMap.put("rosybrown", -4419697);
            hashMap.put("royalblue", -12490271);
            hashMap.put("saddlebrown", -7650029);
            hashMap.put("salmon", -360334);
            hashMap.put("sandybrown", -744352);
            hashMap.put("seagreen", -13726889);
            hashMap.put("seashell", -2578);
            hashMap.put("sienna", -6270419);
            hashMap.put("silver", -4144960);
            hashMap.put("skyblue", -7876885);
            hashMap.put("slateblue", -9807155);
            hashMap.put("slategray", -9404272);
            hashMap.put("slategrey", -9404272);
            hashMap.put("snow", -1286);
            hashMap.put("springgreen", -16711809);
            hashMap.put("steelblue", -12156236);
            hashMap.put("tan", -2968436);
            hashMap.put("teal", -16744320);
            hashMap.put("thistle", -2572328);
            hashMap.put("tomato", -40121);
            hashMap.put("turquoise", -12525360);
            hashMap.put("violet", -1146130);
            hashMap.put("wheat", -663885);
            hashMap.put("white", -1);
            hashMap.put("whitesmoke", -657931);
            hashMap.put("yellow", -256);
            hashMap.put("yellowgreen", -6632142);
            hashMap.put("transparent", 0);
        }

        public static Integer a(String str) {
            return f64606a.get(str);
        }
    }

    public static class d {

        /* renamed from: a  reason: collision with root package name */
        public static final Map<String, SVG.o> f64607a;

        static {
            HashMap hashMap = new HashMap(9);
            f64607a = hashMap;
            SVG.Unit unit = SVG.Unit.pt;
            hashMap.put("xx-small", new SVG.o(0.694f, unit));
            hashMap.put("x-small", new SVG.o(0.833f, unit));
            hashMap.put(com.adjust.sdk.Constants.SMALL, new SVG.o(10.0f, unit));
            hashMap.put("medium", new SVG.o(12.0f, unit));
            hashMap.put(com.adjust.sdk.Constants.LARGE, new SVG.o(14.4f, unit));
            hashMap.put("x-large", new SVG.o(17.3f, unit));
            hashMap.put("xx-large", new SVG.o(20.7f, unit));
            SVG.Unit unit2 = SVG.Unit.percent;
            hashMap.put("smaller", new SVG.o(83.33f, unit2));
            hashMap.put("larger", new SVG.o(120.0f, unit2));
        }

        public static SVG.o a(String str) {
            return f64607a.get(str);
        }
    }

    public static class e {

        /* renamed from: a  reason: collision with root package name */
        public static final Map<String, Integer> f64608a;

        static {
            HashMap hashMap = new HashMap(13);
            f64608a = hashMap;
            hashMap.put("normal", 400);
            hashMap.put(TtmlNode.BOLD, 700);
            hashMap.put("bolder", 1);
            hashMap.put("lighter", -1);
            hashMap.put("100", 100);
            hashMap.put(JumioRejectReason.NOT_READABLE, 200);
            hashMap.put("300", 300);
            hashMap.put("400", 400);
            hashMap.put("500", 500);
            hashMap.put("600", Integer.valueOf(BannerConfig.SCROLL_TIME));
            hashMap.put("700", 700);
            hashMap.put("800", Integer.valueOf(TXLivePushConfig.DEFAULT_MIN_VIDEO_BITRATE));
            hashMap.put("900", 900);
        }

        public static Integer a(String str) {
            return f64608a.get(str);
        }
    }

    public class f extends DefaultHandler2 {
        public f() {
        }

        public void characters(char[] cArr, int i11, int i12) throws SAXException {
            SVGParser.this.c1(new String(cArr, i11, i12));
        }

        public void endDocument() throws SAXException {
            SVGParser.this.o();
        }

        public void endElement(String str, String str2, String str3) throws SAXException {
            SVGParser.this.p(str, str2, str3);
        }

        public void processingInstruction(String str, String str2) throws SAXException {
            SVGParser.this.r(str, SVGParser.this.x0(new g(str2)));
        }

        public void startDocument() throws SAXException {
            SVGParser.this.W0();
        }

        public void startElement(String str, String str2, String str3, Attributes attributes) throws SAXException {
            SVGParser.this.X0(str, str2, str3, attributes);
        }

        public /* synthetic */ f(SVGParser sVGParser, a aVar) {
            this();
        }
    }

    public static class g {

        /* renamed from: a  reason: collision with root package name */
        public String f64610a;

        /* renamed from: b  reason: collision with root package name */
        public int f64611b = 0;

        /* renamed from: c  reason: collision with root package name */
        public int f64612c = 0;

        /* renamed from: d  reason: collision with root package name */
        public b f64613d = new b();

        public g(String str) {
            String trim = str.trim();
            this.f64610a = trim;
            this.f64612c = trim.length();
        }

        public void A() {
            while (true) {
                int i11 = this.f64611b;
                if (i11 < this.f64612c && k(this.f64610a.charAt(i11))) {
                    this.f64611b++;
                } else {
                    return;
                }
            }
        }

        public int a() {
            int i11 = this.f64611b;
            int i12 = this.f64612c;
            if (i11 == i12) {
                return -1;
            }
            int i13 = i11 + 1;
            this.f64611b = i13;
            if (i13 < i12) {
                return this.f64610a.charAt(i13);
            }
            return -1;
        }

        public String b() {
            int i11 = this.f64611b;
            while (!h() && !k(this.f64610a.charAt(this.f64611b))) {
                this.f64611b++;
            }
            String substring = this.f64610a.substring(i11, this.f64611b);
            this.f64611b = i11;
            return substring;
        }

        public Boolean c(Object obj) {
            if (obj == null) {
                return null;
            }
            z();
            return m();
        }

        public float d(float f11) {
            if (Float.isNaN(f11)) {
                return Float.NaN;
            }
            z();
            return n();
        }

        public float e(Boolean bool) {
            if (bool == null) {
                return Float.NaN;
            }
            z();
            return n();
        }

        public boolean f(char c11) {
            int i11 = this.f64611b;
            boolean z11 = i11 < this.f64612c && this.f64610a.charAt(i11) == c11;
            if (z11) {
                this.f64611b++;
            }
            return z11;
        }

        public boolean g(String str) {
            int length = str.length();
            int i11 = this.f64611b;
            boolean z11 = i11 <= this.f64612c - length && this.f64610a.substring(i11, i11 + length).equals(str);
            if (z11) {
                this.f64611b += length;
            }
            return z11;
        }

        public boolean h() {
            return this.f64611b == this.f64612c;
        }

        public boolean i() {
            int i11 = this.f64611b;
            if (i11 == this.f64612c) {
                return false;
            }
            char charAt = this.f64610a.charAt(i11);
            if ((charAt < 'a' || charAt > 'z') && (charAt < 'A' || charAt > 'Z')) {
                return false;
            }
            return true;
        }

        public boolean j(int i11) {
            return i11 == 10 || i11 == 13;
        }

        public boolean k(int i11) {
            return i11 == 32 || i11 == 10 || i11 == 13 || i11 == 9;
        }

        public Integer l() {
            int i11 = this.f64611b;
            if (i11 == this.f64612c) {
                return null;
            }
            String str = this.f64610a;
            this.f64611b = i11 + 1;
            return Integer.valueOf(str.charAt(i11));
        }

        public Boolean m() {
            int i11 = this.f64611b;
            if (i11 == this.f64612c) {
                return null;
            }
            char charAt = this.f64610a.charAt(i11);
            if (charAt != '0' && charAt != '1') {
                return null;
            }
            boolean z11 = true;
            this.f64611b++;
            if (charAt != '1') {
                z11 = false;
            }
            return Boolean.valueOf(z11);
        }

        public float n() {
            float b11 = this.f64613d.b(this.f64610a, this.f64611b, this.f64612c);
            if (!Float.isNaN(b11)) {
                this.f64611b = this.f64613d.a();
            }
            return b11;
        }

        public String o() {
            if (h()) {
                return null;
            }
            int i11 = this.f64611b;
            int charAt = this.f64610a.charAt(i11);
            while (true) {
                if ((charAt < 97 || charAt > 122) && (charAt < 65 || charAt > 90)) {
                    int i12 = this.f64611b;
                } else {
                    charAt = a();
                }
            }
            int i122 = this.f64611b;
            while (k(charAt)) {
                charAt = a();
            }
            if (charAt == 40) {
                this.f64611b++;
                return this.f64610a.substring(i11, i122);
            }
            this.f64611b = i11;
            return null;
        }

        public SVG.o p() {
            float n11 = n();
            if (Float.isNaN(n11)) {
                return null;
            }
            SVG.Unit v11 = v();
            if (v11 == null) {
                return new SVG.o(n11, SVG.Unit.px);
            }
            return new SVG.o(n11, v11);
        }

        public String q() {
            if (h()) {
                return null;
            }
            int i11 = this.f64611b;
            char charAt = this.f64610a.charAt(i11);
            if (charAt != '\'' && charAt != '\"') {
                return null;
            }
            int a11 = a();
            while (a11 != -1 && a11 != charAt) {
                a11 = a();
            }
            if (a11 == -1) {
                this.f64611b = i11;
                return null;
            }
            int i12 = this.f64611b + 1;
            this.f64611b = i12;
            return this.f64610a.substring(i11 + 1, i12 - 1);
        }

        public String r() {
            return t(' ', false);
        }

        public String s(char c11) {
            return t(c11, false);
        }

        public String t(char c11, boolean z11) {
            if (h()) {
                return null;
            }
            char charAt = this.f64610a.charAt(this.f64611b);
            if ((!z11 && k(charAt)) || charAt == c11) {
                return null;
            }
            int i11 = this.f64611b;
            int a11 = a();
            while (a11 != -1 && a11 != c11 && (z11 || !k(a11))) {
                a11 = a();
            }
            return this.f64610a.substring(i11, this.f64611b);
        }

        public String u(char c11) {
            return t(c11, true);
        }

        public SVG.Unit v() {
            if (h()) {
                return null;
            }
            if (this.f64610a.charAt(this.f64611b) == '%') {
                this.f64611b++;
                return SVG.Unit.percent;
            }
            int i11 = this.f64611b;
            if (i11 > this.f64612c - 2) {
                return null;
            }
            try {
                SVG.Unit valueOf = SVG.Unit.valueOf(this.f64610a.substring(i11, i11 + 2).toLowerCase(Locale.US));
                this.f64611b += 2;
                return valueOf;
            } catch (IllegalArgumentException unused) {
                return null;
            }
        }

        public String w() {
            if (h()) {
                return null;
            }
            int i11 = this.f64611b;
            char charAt = this.f64610a.charAt(i11);
            if ((charAt < 'A' || charAt > 'Z') && (charAt < 'a' || charAt > 'z')) {
                this.f64611b = i11;
                return null;
            }
            int a11 = a();
            while (true) {
                if ((a11 >= 65 && a11 <= 90) || (a11 >= 97 && a11 <= 122)) {
                    a11 = a();
                }
            }
            return this.f64610a.substring(i11, this.f64611b);
        }

        public float x() {
            z();
            float b11 = this.f64613d.b(this.f64610a, this.f64611b, this.f64612c);
            if (!Float.isNaN(b11)) {
                this.f64611b = this.f64613d.a();
            }
            return b11;
        }

        public String y() {
            if (h()) {
                return null;
            }
            int i11 = this.f64611b;
            this.f64611b = this.f64612c;
            return this.f64610a.substring(i11);
        }

        public boolean z() {
            A();
            int i11 = this.f64611b;
            if (i11 == this.f64612c || this.f64610a.charAt(i11) != ',') {
                return false;
            }
            this.f64611b++;
            A();
            return true;
        }
    }

    public class h implements Attributes {

        /* renamed from: a  reason: collision with root package name */
        public XmlPullParser f64614a;

        public h(XmlPullParser xmlPullParser) {
            this.f64614a = xmlPullParser;
        }

        public int getIndex(String str) {
            return -1;
        }

        public int getIndex(String str, String str2) {
            return -1;
        }

        public int getLength() {
            return this.f64614a.getAttributeCount();
        }

        public String getLocalName(int i11) {
            return this.f64614a.getAttributeName(i11);
        }

        public String getQName(int i11) {
            String attributeName = this.f64614a.getAttributeName(i11);
            if (this.f64614a.getAttributePrefix(i11) == null) {
                return attributeName;
            }
            return this.f64614a.getAttributePrefix(i11) + ':' + attributeName;
        }

        public String getType(int i11) {
            return null;
        }

        public String getType(String str) {
            return null;
        }

        public String getType(String str, String str2) {
            return null;
        }

        public String getURI(int i11) {
            return this.f64614a.getAttributeNamespace(i11);
        }

        public String getValue(int i11) {
            return this.f64614a.getAttributeValue(i11);
        }

        public String getValue(String str) {
            return null;
        }

        public String getValue(String str, String str2) {
            return null;
        }
    }

    public static Set<String> A0(String str) {
        g gVar = new g(str);
        HashSet hashSet = new HashSet();
        while (!gVar.h()) {
            hashSet.add(gVar.r());
            gVar.A();
        }
        return hashSet;
    }

    public static SVG.o[] B0(String str) {
        SVG.o p11;
        g gVar = new g(str);
        gVar.A();
        if (gVar.h() || (p11 = gVar.p()) == null || p11.h()) {
            return null;
        }
        float b11 = p11.b();
        ArrayList arrayList = new ArrayList();
        arrayList.add(p11);
        while (!gVar.h()) {
            gVar.z();
            SVG.o p12 = gVar.p();
            if (p12 == null || p12.h()) {
                return null;
            }
            arrayList.add(p12);
            b11 += p12.b();
        }
        if (b11 == 0.0f) {
            return null;
        }
        return (SVG.o[]) arrayList.toArray(new SVG.o[arrayList.size()]);
    }

    public static SVG.Style.LineCap C0(String str) {
        if ("butt".equals(str)) {
            return SVG.Style.LineCap.Butt;
        }
        if ("round".equals(str)) {
            return SVG.Style.LineCap.Round;
        }
        if (MessengerShareContentUtility.IMAGE_RATIO_SQUARE.equals(str)) {
            return SVG.Style.LineCap.Square;
        }
        return null;
    }

    public static SVG.Style.LineJoin D0(String str) {
        if ("miter".equals(str)) {
            return SVG.Style.LineJoin.Miter;
        }
        if ("round".equals(str)) {
            return SVG.Style.LineJoin.Round;
        }
        if ("bevel".equals(str)) {
            return SVG.Style.LineJoin.Bevel;
        }
        return null;
    }

    public static void E0(SVG.j0 j0Var, String str) {
        g gVar = new g(str.replaceAll("/\\*.*?\\*/", ""));
        while (true) {
            String s11 = gVar.s(':');
            gVar.A();
            if (gVar.f(':')) {
                gVar.A();
                String u11 = gVar.u(';');
                if (u11 != null) {
                    gVar.A();
                    if (gVar.h() || gVar.f(';')) {
                        if (j0Var.f64500f == null) {
                            j0Var.f64500f = new SVG.Style();
                        }
                        S0(j0Var.f64500f, s11, u11);
                        gVar.A();
                    }
                } else {
                    return;
                }
            } else {
                return;
            }
        }
    }

    public static Set<String> F0(String str) {
        g gVar = new g(str);
        HashSet hashSet = new HashSet();
        while (!gVar.h()) {
            String r11 = gVar.r();
            int indexOf = r11.indexOf(45);
            if (indexOf != -1) {
                r11 = r11.substring(0, indexOf);
            }
            hashSet.add(new Locale(r11, "", "").getLanguage());
            gVar.A();
        }
        return hashSet;
    }

    public static SVG.Style.TextAnchor G0(String str) {
        str.hashCode();
        char c11 = 65535;
        switch (str.hashCode()) {
            case -1074341483:
                if (str.equals("middle")) {
                    c11 = 0;
                    break;
                }
                break;
            case 100571:
                if (str.equals("end")) {
                    c11 = 1;
                    break;
                }
                break;
            case 109757538:
                if (str.equals("start")) {
                    c11 = 2;
                    break;
                }
                break;
        }
        switch (c11) {
            case 0:
                return SVG.Style.TextAnchor.Middle;
            case 1:
                return SVG.Style.TextAnchor.End;
            case 2:
                return SVG.Style.TextAnchor.Start;
            default:
                return null;
        }
    }

    public static SVG.Style.TextDecoration H0(String str) {
        str.hashCode();
        char c11 = 65535;
        switch (str.hashCode()) {
            case -1171789332:
                if (str.equals("line-through")) {
                    c11 = 0;
                    break;
                }
                break;
            case -1026963764:
                if (str.equals(TtmlNode.UNDERLINE)) {
                    c11 = 1;
                    break;
                }
                break;
            case 3387192:
                if (str.equals("none")) {
                    c11 = 2;
                    break;
                }
                break;
            case 93826908:
                if (str.equals("blink")) {
                    c11 = 3;
                    break;
                }
                break;
            case 529818312:
                if (str.equals("overline")) {
                    c11 = 4;
                    break;
                }
                break;
        }
        switch (c11) {
            case 0:
                return SVG.Style.TextDecoration.LineThrough;
            case 1:
                return SVG.Style.TextDecoration.Underline;
            case 2:
                return SVG.Style.TextDecoration.None;
            case 3:
                return SVG.Style.TextDecoration.Blink;
            case 4:
                return SVG.Style.TextDecoration.Overline;
            default:
                return null;
        }
    }

    public static SVG.Style.TextDirection I0(String str) {
        str.hashCode();
        if (str.equals("ltr")) {
            return SVG.Style.TextDirection.LTR;
        }
        if (!str.equals("rtl")) {
            return null;
        }
        return SVG.Style.TextDirection.RTL;
    }

    public static SVG.Style.VectorEffect M0(String str) {
        str.hashCode();
        if (str.equals("none")) {
            return SVG.Style.VectorEffect.None;
        }
        if (!str.equals("non-scaling-stroke")) {
            return null;
        }
        return SVG.Style.VectorEffect.NonScalingStroke;
    }

    public static SVG.b N0(String str) throws SVGParseException {
        g gVar = new g(str);
        gVar.A();
        float n11 = gVar.n();
        gVar.z();
        float n12 = gVar.n();
        gVar.z();
        float n13 = gVar.n();
        gVar.z();
        float n14 = gVar.n();
        if (Float.isNaN(n11) || Float.isNaN(n12) || Float.isNaN(n13) || Float.isNaN(n14)) {
            throw new SVGParseException("Invalid viewBox definition - should have four numbers");
        } else if (n13 < 0.0f) {
            throw new SVGParseException("Invalid viewBox. width cannot be negative");
        } else if (n14 >= 0.0f) {
            return new SVG.b(n11, n12, n13, n14);
        } else {
            throw new SVGParseException("Invalid viewBox. height cannot be negative");
        }
    }

    public static void S0(SVG.Style style, String str, String str2) {
        if (str2.length() != 0 && !str2.equals("inherit")) {
            switch (a.f64604b[SVGAttr.fromString(str).ordinal()]) {
                case 47:
                    SVG.m0 t02 = t0(str2);
                    style.f64408c = t02;
                    if (t02 != null) {
                        style.f64407b |= 1;
                        return;
                    }
                    return;
                case 48:
                    SVG.Style.FillRule e02 = e0(str2);
                    style.f64409d = e02;
                    if (e02 != null) {
                        style.f64407b |= 2;
                        return;
                    }
                    return;
                case 49:
                    Float r02 = r0(str2);
                    style.f64410e = r02;
                    if (r02 != null) {
                        style.f64407b |= 4;
                        return;
                    }
                    return;
                case 50:
                    SVG.m0 t03 = t0(str2);
                    style.f64411f = t03;
                    if (t03 != null) {
                        style.f64407b |= 8;
                        return;
                    }
                    return;
                case 51:
                    Float r03 = r0(str2);
                    style.f64412g = r03;
                    if (r03 != null) {
                        style.f64407b |= 16;
                        return;
                    }
                    return;
                case 52:
                    style.f64413h = o0(str2);
                    style.f64407b |= 32;
                    return;
                case 53:
                    SVG.Style.LineCap C0 = C0(str2);
                    style.f64414i = C0;
                    if (C0 != null) {
                        style.f64407b |= 64;
                        return;
                    }
                    return;
                case 54:
                    SVG.Style.LineJoin D0 = D0(str2);
                    style.f64415j = D0;
                    if (D0 != null) {
                        style.f64407b |= 128;
                        return;
                    }
                    return;
                case 55:
                    style.f64416k = Float.valueOf(f0(str2));
                    style.f64407b |= 256;
                    return;
                case 56:
                    if ("none".equals(str2)) {
                        style.f64417l = null;
                        style.f64407b |= 512;
                        return;
                    }
                    SVG.o[] B0 = B0(str2);
                    style.f64417l = B0;
                    if (B0 != null) {
                        style.f64407b |= 512;
                        return;
                    }
                    return;
                case 57:
                    style.f64418m = o0(str2);
                    style.f64407b |= 1024;
                    return;
                case 58:
                    style.f64419n = r0(str2);
                    style.f64407b |= 2048;
                    return;
                case 59:
                    try {
                        style.f64420o = b0(str2);
                        style.f64407b |= 4096;
                        return;
                    } catch (SVGParseException unused) {
                    }
                case 60:
                    h0(style, str2);
                    return;
                case 61:
                    List<String> i02 = i0(str2);
                    style.f64421p = i02;
                    if (i02 != null) {
                        style.f64407b |= 8192;
                        return;
                    }
                    return;
                case 62:
                    SVG.o j02 = j0(str2);
                    style.f64422q = j02;
                    if (j02 != null) {
                        style.f64407b |= 16384;
                        return;
                    }
                    return;
                case 63:
                    Integer l02 = l0(str2);
                    style.f64423r = l02;
                    if (l02 != null) {
                        style.f64407b |= 32768;
                        return;
                    }
                    return;
                case 64:
                    SVG.Style.FontStyle k02 = k0(str2);
                    style.f64424s = k02;
                    if (k02 != null) {
                        style.f64407b |= 65536;
                        return;
                    }
                    return;
                case 65:
                    SVG.Style.TextDecoration H0 = H0(str2);
                    style.f64425t = H0;
                    if (H0 != null) {
                        style.f64407b |= 131072;
                        return;
                    }
                    return;
                case 66:
                    SVG.Style.TextDirection I0 = I0(str2);
                    style.f64426u = I0;
                    if (I0 != null) {
                        style.f64407b |= 68719476736L;
                        return;
                    }
                    return;
                case 67:
                    SVG.Style.TextAnchor G0 = G0(str2);
                    style.f64427v = G0;
                    if (G0 != null) {
                        style.f64407b |= PlaybackStateCompat.ACTION_SET_REPEAT_MODE;
                        return;
                    }
                    return;
                case 68:
                    Boolean s02 = s0(str2);
                    style.f64428w = s02;
                    if (s02 != null) {
                        style.f64407b |= PlaybackStateCompat.ACTION_SET_SHUFFLE_MODE_ENABLED;
                        return;
                    }
                    return;
                case 69:
                    String m02 = m0(str2, str);
                    style.f64430y = m02;
                    style.f64431z = m02;
                    style.A = m02;
                    style.f64407b |= 14680064;
                    return;
                case 70:
                    style.f64430y = m0(str2, str);
                    style.f64407b |= PlaybackStateCompat.ACTION_SET_SHUFFLE_MODE;
                    return;
                case 71:
                    style.f64431z = m0(str2, str);
                    style.f64407b |= 4194304;
                    return;
                case 72:
                    style.A = m0(str2, str);
                    style.f64407b |= 8388608;
                    return;
                case 73:
                    if (str2.indexOf(124) < 0) {
                        if ("|inline|block|list-item|run-in|compact|marker|table|inline-table|table-row-group|table-header-group|table-footer-group|table-row|table-column-group|table-column|table-cell|table-caption|none|".contains('|' + str2 + '|')) {
                            style.B = Boolean.valueOf(!str2.equals("none"));
                            style.f64407b |= 16777216;
                            return;
                        }
                        return;
                    }
                    return;
                case 74:
                    if (str2.indexOf(124) < 0) {
                        if ("|visible|hidden|collapse|".contains('|' + str2 + '|')) {
                            style.C = Boolean.valueOf(str2.equals("visible"));
                            style.f64407b |= 33554432;
                            return;
                        }
                        return;
                    }
                    return;
                case 75:
                    if (str2.equals("currentColor")) {
                        style.D = SVG.g.b();
                    } else {
                        try {
                            style.D = b0(str2);
                        } catch (SVGParseException e11) {
                            Log.w("SVGParser", e11.getMessage());
                            return;
                        }
                    }
                    style.f64407b |= 67108864;
                    return;
                case 76:
                    style.E = r0(str2);
                    style.f64407b |= 134217728;
                    return;
                case 77:
                    SVG.c a02 = a0(str2);
                    style.f64429x = a02;
                    if (a02 != null) {
                        style.f64407b |= 1048576;
                        return;
                    }
                    return;
                case 78:
                    style.F = m0(str2, str);
                    style.f64407b |= 268435456;
                    return;
                case 79:
                    style.G = e0(str2);
                    style.f64407b |= 536870912;
                    return;
                case 80:
                    style.H = m0(str2, str);
                    style.f64407b |= 1073741824;
                    return;
                case 81:
                    if (str2.equals("currentColor")) {
                        style.I = SVG.g.b();
                    } else {
                        try {
                            style.I = b0(str2);
                        } catch (SVGParseException e12) {
                            Log.w("SVGParser", e12.getMessage());
                            return;
                        }
                    }
                    style.f64407b |= 2147483648L;
                    return;
                case 82:
                    style.J = r0(str2);
                    style.f64407b |= 4294967296L;
                    return;
                case 83:
                    if (str2.equals("currentColor")) {
                        style.K = SVG.g.b();
                    } else {
                        try {
                            style.K = b0(str2);
                        } catch (SVGParseException e13) {
                            Log.w("SVGParser", e13.getMessage());
                            return;
                        }
                    }
                    style.f64407b |= 8589934592L;
                    return;
                case 84:
                    style.L = r0(str2);
                    style.f64407b |= 17179869184L;
                    return;
                case 85:
                    SVG.Style.VectorEffect M0 = M0(str2);
                    style.M = M0;
                    if (M0 != null) {
                        style.f64407b |= 34359738368L;
                        return;
                    }
                    return;
                case 86:
                    SVG.Style.RenderQuality y02 = y0(str2);
                    style.N = y02;
                    if (y02 != null) {
                        style.f64407b |= 137438953472L;
                        return;
                    }
                    return;
                default:
                    return;
            }
        }
    }

    public static SVG.c a0(String str) {
        if (TtmlNode.TEXT_EMPHASIS_AUTO.equals(str) || !str.startsWith("rect(")) {
            return null;
        }
        g gVar = new g(str.substring(5));
        gVar.A();
        SVG.o q02 = q0(gVar);
        gVar.z();
        SVG.o q03 = q0(gVar);
        gVar.z();
        SVG.o q04 = q0(gVar);
        gVar.z();
        SVG.o q05 = q0(gVar);
        gVar.A();
        if (gVar.f(')') || gVar.h()) {
            return new SVG.c(q02, q03, q04, q05);
        }
        return null;
    }

    public static SVG.f b0(String str) throws SVGParseException {
        int i11 = 5;
        if (str.charAt(0) == '#') {
            a b11 = a.b(str, 1, str.length());
            if (b11 != null) {
                int a11 = b11.a();
                if (a11 == 4) {
                    int d11 = b11.d();
                    int i12 = d11 & 3840;
                    int i13 = d11 & 240;
                    int i14 = d11 & 15;
                    return new SVG.f(i14 | (i12 << 8) | -16777216 | (i12 << 12) | (i13 << 8) | (i13 << 4) | (i14 << 4));
                } else if (a11 == 5) {
                    int d12 = b11.d();
                    int i15 = 61440 & d12;
                    int i16 = d12 & 3840;
                    int i17 = d12 & 240;
                    int i18 = d12 & 15;
                    return new SVG.f((i18 << 24) | (i18 << 28) | (i15 << 8) | (i15 << 4) | (i16 << 4) | i16 | i17 | (i17 >> 4));
                } else if (a11 == 7) {
                    return new SVG.f(b11.d() | RoundedDrawable.DEFAULT_BORDER_COLOR);
                } else {
                    if (a11 == 9) {
                        return new SVG.f((b11.d() >>> 8) | (b11.d() << 24));
                    }
                    throw new SVGParseException("Bad hex colour value: " + str);
                }
            } else {
                throw new SVGParseException("Bad hex colour value: " + str);
            }
        } else {
            String lowerCase = str.toLowerCase(Locale.US);
            boolean startsWith = lowerCase.startsWith("rgba(");
            if (startsWith || lowerCase.startsWith("rgb(")) {
                if (!startsWith) {
                    i11 = 4;
                }
                g gVar = new g(str.substring(i11));
                gVar.A();
                float n11 = gVar.n();
                if (!Float.isNaN(n11) && gVar.f('%')) {
                    n11 = (n11 * 256.0f) / 100.0f;
                }
                float d13 = gVar.d(n11);
                if (!Float.isNaN(d13) && gVar.f('%')) {
                    d13 = (d13 * 256.0f) / 100.0f;
                }
                float d14 = gVar.d(d13);
                if (!Float.isNaN(d14) && gVar.f('%')) {
                    d14 = (d14 * 256.0f) / 100.0f;
                }
                if (startsWith) {
                    float d15 = gVar.d(d14);
                    gVar.A();
                    if (!Float.isNaN(d15) && gVar.f(')')) {
                        return new SVG.f((j(d15 * 256.0f) << 24) | (j(n11) << 16) | (j(d13) << 8) | j(d14));
                    }
                    throw new SVGParseException("Bad rgba() colour value: " + str);
                }
                gVar.A();
                if (!Float.isNaN(d14) && gVar.f(')')) {
                    return new SVG.f((j(n11) << 16) | RoundedDrawable.DEFAULT_BORDER_COLOR | (j(d13) << 8) | j(d14));
                }
                throw new SVGParseException("Bad rgb() colour value: " + str);
            }
            boolean startsWith2 = lowerCase.startsWith("hsla(");
            if (!startsWith2 && !lowerCase.startsWith("hsl(")) {
                return c0(lowerCase);
            }
            if (!startsWith2) {
                i11 = 4;
            }
            g gVar2 = new g(str.substring(i11));
            gVar2.A();
            float n12 = gVar2.n();
            float d16 = gVar2.d(n12);
            if (!Float.isNaN(d16)) {
                gVar2.f('%');
            }
            float d17 = gVar2.d(d16);
            if (!Float.isNaN(d17)) {
                gVar2.f('%');
            }
            if (startsWith2) {
                float d18 = gVar2.d(d17);
                gVar2.A();
                if (!Float.isNaN(d18) && gVar2.f(')')) {
                    return new SVG.f((j(d18 * 256.0f) << 24) | s(n12, d16, d17));
                }
                throw new SVGParseException("Bad hsla() colour value: " + str);
            }
            gVar2.A();
            if (!Float.isNaN(d17) && gVar2.f(')')) {
                return new SVG.f(s(n12, d16, d17) | RoundedDrawable.DEFAULT_BORDER_COLOR);
            }
            throw new SVGParseException("Bad hsl() colour value: " + str);
        }
    }

    public static SVG.f c0(String str) throws SVGParseException {
        Integer a11 = c.a(str);
        if (a11 != null) {
            return new SVG.f(a11.intValue());
        }
        throw new SVGParseException("Invalid colour keyword: " + str);
    }

    public static SVG.m0 d0(String str) {
        str.hashCode();
        if (str.equals("none")) {
            return SVG.f.f64473d;
        }
        if (str.equals("currentColor")) {
            return SVG.g.b();
        }
        try {
            return b0(str);
        } catch (SVGParseException unused) {
            return null;
        }
    }

    public static SVG.Style.FillRule e0(String str) {
        if ("nonzero".equals(str)) {
            return SVG.Style.FillRule.NonZero;
        }
        if ("evenodd".equals(str)) {
            return SVG.Style.FillRule.EvenOdd;
        }
        return null;
    }

    public static float f0(String str) throws SVGParseException {
        int length = str.length();
        if (length != 0) {
            return g0(str, 0, length);
        }
        throw new SVGParseException("Invalid float value (empty string)");
    }

    public static float g0(String str, int i11, int i12) throws SVGParseException {
        float b11 = new b().b(str, i11, i12);
        if (!Float.isNaN(b11)) {
            return b11;
        }
        throw new SVGParseException("Invalid float value: " + str);
    }

    public static void h0(SVG.Style style, String str) {
        String s11;
        int i11;
        if ("|caption|icon|menu|message-box|small-caption|status-bar|".contains('|' + str + '|')) {
            g gVar = new g(str);
            Integer num = null;
            SVG.Style.FontStyle fontStyle = null;
            String str2 = null;
            while (true) {
                s11 = gVar.s('/');
                gVar.A();
                if (s11 != null) {
                    if (num == null || fontStyle == null) {
                        if (!s11.equals("normal") && ((num != null || (num = e.a(s11)) == null) && (fontStyle != null || (fontStyle = k0(s11)) == null))) {
                            if (str2 != null || !s11.equals("small-caps")) {
                                break;
                            }
                            str2 = s11;
                        }
                    } else {
                        break;
                    }
                } else {
                    return;
                }
            }
            SVG.o j02 = j0(s11);
            if (gVar.f('/')) {
                gVar.A();
                String r11 = gVar.r();
                if (r11 != null) {
                    try {
                        o0(r11);
                    } catch (SVGParseException unused) {
                        return;
                    }
                }
                gVar.A();
            }
            style.f64421p = i0(gVar.y());
            style.f64422q = j02;
            if (num == null) {
                i11 = 400;
            } else {
                i11 = num.intValue();
            }
            style.f64423r = Integer.valueOf(i11);
            if (fontStyle == null) {
                fontStyle = SVG.Style.FontStyle.Normal;
            }
            style.f64424s = fontStyle;
            style.f64407b |= 122880;
        }
    }

    public static List<String> i0(String str) {
        g gVar = new g(str);
        ArrayList arrayList = null;
        do {
            String q11 = gVar.q();
            if (q11 == null) {
                q11 = gVar.u(',');
            }
            if (q11 == null) {
                break;
            }
            if (arrayList == null) {
                arrayList = new ArrayList();
            }
            arrayList.add(q11);
            gVar.z();
        } while (!gVar.h());
        return arrayList;
    }

    public static int j(float f11) {
        if (f11 < 0.0f) {
            return 0;
        }
        if (f11 > 255.0f) {
            return 255;
        }
        return Math.round(f11);
    }

    public static SVG.o j0(String str) {
        try {
            SVG.o a11 = d.a(str);
            return a11 == null ? o0(str) : a11;
        } catch (SVGParseException unused) {
            return null;
        }
    }

    public static SVG.Style.FontStyle k0(String str) {
        str.hashCode();
        char c11 = 65535;
        switch (str.hashCode()) {
            case -1657669071:
                if (str.equals("oblique")) {
                    c11 = 0;
                    break;
                }
                break;
            case -1178781136:
                if (str.equals(TtmlNode.ITALIC)) {
                    c11 = 1;
                    break;
                }
                break;
            case -1039745817:
                if (str.equals("normal")) {
                    c11 = 2;
                    break;
                }
                break;
        }
        switch (c11) {
            case 0:
                return SVG.Style.FontStyle.Oblique;
            case 1:
                return SVG.Style.FontStyle.Italic;
            case 2:
                return SVG.Style.FontStyle.Normal;
            default:
                return null;
        }
    }

    public static Integer l0(String str) {
        return e.a(str);
    }

    public static String m0(String str, String str2) {
        if (str.equals("none") || !str.startsWith("url(")) {
            return null;
        }
        if (str.endsWith(")")) {
            return str.substring(4, str.length() - 1).trim();
        }
        return str.substring(4).trim();
    }

    public static SVG.o o0(String str) throws SVGParseException {
        if (str.length() != 0) {
            int length = str.length();
            SVG.Unit unit = SVG.Unit.px;
            char charAt = str.charAt(length - 1);
            if (charAt == '%') {
                length--;
                unit = SVG.Unit.percent;
            } else if (length > 2 && Character.isLetter(charAt) && Character.isLetter(str.charAt(length - 2))) {
                length -= 2;
                try {
                    unit = SVG.Unit.valueOf(str.substring(length).toLowerCase(Locale.US));
                } catch (IllegalArgumentException unused) {
                    throw new SVGParseException("Invalid length unit specifier: " + str);
                }
            }
            try {
                return new SVG.o(g0(str, 0, length), unit);
            } catch (NumberFormatException e11) {
                throw new SVGParseException("Invalid length value: " + str, e11);
            }
        } else {
            throw new SVGParseException("Invalid length value (empty string)");
        }
    }

    public static List<SVG.o> p0(String str) throws SVGParseException {
        if (str.length() != 0) {
            ArrayList arrayList = new ArrayList(1);
            g gVar = new g(str);
            gVar.A();
            while (!gVar.h()) {
                float n11 = gVar.n();
                if (!Float.isNaN(n11)) {
                    SVG.Unit v11 = gVar.v();
                    if (v11 == null) {
                        v11 = SVG.Unit.px;
                    }
                    arrayList.add(new SVG.o(n11, v11));
                    gVar.z();
                } else {
                    throw new SVGParseException("Invalid length list value: " + gVar.b());
                }
            }
            return arrayList;
        }
        throw new SVGParseException("Invalid length list (empty string)");
    }

    public static SVG.o q0(g gVar) {
        if (gVar.g(TtmlNode.TEXT_EMPHASIS_AUTO)) {
            return new SVG.o(0.0f);
        }
        return gVar.p();
    }

    public static Float r0(String str) {
        try {
            float f02 = f0(str);
            if (f02 < 0.0f) {
                f02 = 0.0f;
            } else if (f02 > 1.0f) {
                f02 = 1.0f;
            }
            return Float.valueOf(f02);
        } catch (SVGParseException unused) {
            return null;
        }
    }

    public static int s(float f11, float f12, float f13) {
        float f14 = 0.0f;
        int i11 = (f11 > 0.0f ? 1 : (f11 == 0.0f ? 0 : -1));
        float f15 = f11 % 360.0f;
        if (i11 < 0) {
            f15 += 360.0f;
        }
        float f16 = f15 / 60.0f;
        float f17 = f12 / 100.0f;
        float f18 = f13 / 100.0f;
        if (f17 < 0.0f) {
            f17 = 0.0f;
        } else if (f17 > 1.0f) {
            f17 = 1.0f;
        }
        if (f18 >= 0.0f) {
            f14 = f18 > 1.0f ? 1.0f : f18;
        }
        float f19 = f14 <= 0.5f ? (f17 + 1.0f) * f14 : (f14 + f17) - (f17 * f14);
        float f21 = (f14 * 2.0f) - f19;
        return j(t(f21, f19, f16 - 2.0f) * 256.0f) | (j(t(f21, f19, f16 + 2.0f) * 256.0f) << 16) | (j(t(f21, f19, f16) * 256.0f) << 8);
    }

    public static Boolean s0(String str) {
        str.hashCode();
        char c11 = 65535;
        switch (str.hashCode()) {
            case -1217487446:
                if (str.equals("hidden")) {
                    c11 = 0;
                    break;
                }
                break;
            case -907680051:
                if (str.equals("scroll")) {
                    c11 = 1;
                    break;
                }
                break;
            case 3005871:
                if (str.equals(TtmlNode.TEXT_EMPHASIS_AUTO)) {
                    c11 = 2;
                    break;
                }
                break;
            case 466743410:
                if (str.equals("visible")) {
                    c11 = 3;
                    break;
                }
                break;
        }
        switch (c11) {
            case 0:
            case 1:
                return Boolean.FALSE;
            case 2:
            case 3:
                return Boolean.TRUE;
            default:
                return null;
        }
    }

    public static float t(float f11, float f12, float f13) {
        float f14;
        if (f13 < 0.0f) {
            f13 += 6.0f;
        }
        if (f13 >= 6.0f) {
            f13 -= 6.0f;
        }
        if (f13 < 1.0f) {
            f14 = (f12 - f11) * f13;
        } else if (f13 < 3.0f) {
            return f12;
        } else {
            if (f13 >= 4.0f) {
                return f11;
            }
            f14 = (f12 - f11) * (4.0f - f13);
        }
        return f14 + f11;
    }

    public static SVG.m0 t0(String str) {
        if (!str.startsWith("url(")) {
            return d0(str);
        }
        int indexOf = str.indexOf(")");
        SVG.m0 m0Var = null;
        if (indexOf == -1) {
            return new SVG.t(str.substring(4).trim(), (SVG.m0) null);
        }
        String trim = str.substring(4, indexOf).trim();
        String trim2 = str.substring(indexOf + 1).trim();
        if (trim2.length() > 0) {
            m0Var = d0(trim2);
        }
        return new SVG.t(trim, m0Var);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0042, code lost:
        r4 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x021b, code lost:
        r2 = r8;
        r1 = r11;
        r4 = r15;
        r3 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x0272, code lost:
        r0.z();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x0279, code lost:
        if (r0.h() == false) goto L_0x027c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x027b, code lost:
        return r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x0280, code lost:
        if (r0.i() == false) goto L_0x028a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x0282, code lost:
        r12 = r0.l().intValue();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static com.caverock.androidsvg.SVG.v u0(java.lang.String r20) {
        /*
            com.caverock.androidsvg.SVGParser$g r0 = new com.caverock.androidsvg.SVGParser$g
            r1 = r20
            r0.<init>(r1)
            com.caverock.androidsvg.SVG$v r9 = new com.caverock.androidsvg.SVG$v
            r9.<init>()
            boolean r1 = r0.h()
            if (r1 == 0) goto L_0x0013
            return r9
        L_0x0013:
            java.lang.Integer r1 = r0.l()
            int r1 = r1.intValue()
            r2 = 77
            r10 = 109(0x6d, float:1.53E-43)
            if (r1 == r2) goto L_0x0024
            if (r1 == r10) goto L_0x0024
            return r9
        L_0x0024:
            r12 = r1
            r1 = 0
            r2 = 0
            r3 = 0
            r4 = 0
            r13 = 0
            r14 = 0
        L_0x002b:
            r0.A()
            r5 = 108(0x6c, float:1.51E-43)
            r6 = 1073741824(0x40000000, float:2.0)
            java.lang.String r7 = " path segment"
            java.lang.String r8 = "Bad path coords for "
            java.lang.String r15 = "SVGParser"
            switch(r12) {
                case 65: goto L_0x0222;
                case 67: goto L_0x01cf;
                case 72: goto L_0x01a2;
                case 76: goto L_0x0171;
                case 77: goto L_0x0131;
                case 81: goto L_0x00f5;
                case 83: goto L_0x00aa;
                case 84: goto L_0x0072;
                case 86: goto L_0x0047;
                case 90: goto L_0x003c;
                case 97: goto L_0x0222;
                case 99: goto L_0x01cf;
                case 104: goto L_0x01a2;
                case 108: goto L_0x0171;
                case 109: goto L_0x0131;
                case 113: goto L_0x00f5;
                case 115: goto L_0x00aa;
                case 116: goto L_0x0072;
                case 118: goto L_0x0047;
                case 122: goto L_0x003c;
                default: goto L_0x003b;
            }
        L_0x003b:
            return r9
        L_0x003c:
            r9.close()
            r1 = r13
            r2 = r1
            r3 = r14
        L_0x0042:
            r4 = r3
        L_0x0043:
            r18 = 0
            goto L_0x0272
        L_0x0047:
            float r4 = r0.n()
            boolean r5 = java.lang.Float.isNaN(r4)
            if (r5 == 0) goto L_0x0068
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x0068:
            r5 = 118(0x76, float:1.65E-43)
            if (r12 != r5) goto L_0x006d
            float r4 = r4 + r3
        L_0x006d:
            r3 = r4
            r9.b(r1, r3)
            goto L_0x0042
        L_0x0072:
            float r5 = r1 * r6
            float r2 = r5 - r2
            float r6 = r6 * r3
            float r4 = r6 - r4
            float r5 = r0.n()
            float r6 = r0.d(r5)
            boolean r16 = java.lang.Float.isNaN(r6)
            if (r16 == 0) goto L_0x009e
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x009e:
            r7 = 116(0x74, float:1.63E-43)
            if (r12 != r7) goto L_0x00a4
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x00a4:
            r1 = r5
            r3 = r6
            r9.c(r2, r4, r1, r3)
            goto L_0x0043
        L_0x00aa:
            float r5 = r1 * r6
            float r2 = r5 - r2
            float r6 = r6 * r3
            float r4 = r6 - r4
            float r5 = r0.n()
            float r6 = r0.d(r5)
            float r11 = r0.d(r6)
            float r16 = r0.d(r11)
            boolean r17 = java.lang.Float.isNaN(r16)
            if (r17 == 0) goto L_0x00de
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x00de:
            r7 = 115(0x73, float:1.61E-43)
            if (r12 != r7) goto L_0x00e7
            float r11 = r11 + r1
            float r16 = r16 + r3
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x00e7:
            r8 = r5
            r15 = r6
            r1 = r9
            r3 = r4
            r4 = r8
            r5 = r15
            r6 = r11
            r7 = r16
            r1.d(r2, r3, r4, r5, r6, r7)
            goto L_0x021b
        L_0x00f5:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            float r5 = r0.d(r4)
            float r6 = r0.d(r5)
            boolean r11 = java.lang.Float.isNaN(r6)
            if (r11 == 0) goto L_0x0122
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x0122:
            r7 = 113(0x71, float:1.58E-43)
            if (r12 != r7) goto L_0x012a
            float r5 = r5 + r1
            float r6 = r6 + r3
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x012a:
            r1 = r5
            r3 = r6
            r9.c(r2, r4, r1, r3)
            goto L_0x0043
        L_0x0131:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            boolean r6 = java.lang.Float.isNaN(r4)
            if (r6 == 0) goto L_0x0156
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x0156:
            if (r12 != r10) goto L_0x0160
            boolean r6 = r9.i()
            if (r6 != 0) goto L_0x0160
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x0160:
            r1 = r2
            r3 = r4
            r9.a(r1, r3)
            if (r12 != r10) goto L_0x0168
            goto L_0x016a
        L_0x0168:
            r5 = 76
        L_0x016a:
            r2 = r1
            r13 = r2
            r4 = r3
            r14 = r4
            r12 = r5
            goto L_0x0043
        L_0x0171:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            boolean r6 = java.lang.Float.isNaN(r4)
            if (r6 == 0) goto L_0x0196
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x0196:
            if (r12 != r5) goto L_0x019a
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x019a:
            r1 = r2
            r3 = r4
            r9.b(r1, r3)
            r2 = r1
            goto L_0x0042
        L_0x01a2:
            float r2 = r0.n()
            boolean r5 = java.lang.Float.isNaN(r2)
            if (r5 == 0) goto L_0x01c3
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x01c3:
            r5 = 104(0x68, float:1.46E-43)
            if (r12 != r5) goto L_0x01c8
            float r2 = r2 + r1
        L_0x01c8:
            r1 = r2
            r9.b(r1, r3)
            r2 = r1
            goto L_0x0043
        L_0x01cf:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            float r5 = r0.d(r4)
            float r6 = r0.d(r5)
            float r11 = r0.d(r6)
            float r16 = r0.d(r11)
            boolean r17 = java.lang.Float.isNaN(r16)
            if (r17 == 0) goto L_0x0204
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x0204:
            r7 = 99
            if (r12 != r7) goto L_0x020f
            float r11 = r11 + r1
            float r16 = r16 + r3
            float r2 = r2 + r1
            float r4 = r4 + r3
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x020f:
            r3 = r4
            r8 = r5
            r15 = r6
            r1 = r9
            r4 = r8
            r5 = r15
            r6 = r11
            r7 = r16
            r1.d(r2, r3, r4, r5, r6, r7)
        L_0x021b:
            r2 = r8
            r1 = r11
            r4 = r15
            r3 = r16
            goto L_0x0043
        L_0x0222:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            float r5 = r0.d(r4)
            java.lang.Float r6 = java.lang.Float.valueOf(r5)
            java.lang.Boolean r6 = r0.c(r6)
            java.lang.Boolean r11 = r0.c(r6)
            float r10 = r0.e(r11)
            float r17 = r0.d(r10)
            boolean r18 = java.lang.Float.isNaN(r17)
            if (r18 != 0) goto L_0x028e
            r18 = 0
            int r19 = (r2 > r18 ? 1 : (r2 == r18 ? 0 : -1))
            if (r19 < 0) goto L_0x028e
            int r19 = (r4 > r18 ? 1 : (r4 == r18 ? 0 : -1))
            if (r19 >= 0) goto L_0x0253
            goto L_0x028e
        L_0x0253:
            r7 = 97
            if (r12 != r7) goto L_0x025a
            float r10 = r10 + r1
            float r17 = r17 + r3
        L_0x025a:
            boolean r6 = r6.booleanValue()
            boolean r7 = r11.booleanValue()
            r1 = r9
            r3 = r4
            r4 = r5
            r5 = r6
            r6 = r7
            r7 = r10
            r8 = r17
            r1.e(r2, r3, r4, r5, r6, r7, r8)
            r1 = r10
            r2 = r1
            r3 = r17
            r4 = r3
        L_0x0272:
            r0.z()
            boolean r5 = r0.h()
            if (r5 == 0) goto L_0x027c
            return r9
        L_0x027c:
            boolean r5 = r0.i()
            if (r5 == 0) goto L_0x028a
            java.lang.Integer r5 = r0.l()
            int r12 = r5.intValue()
        L_0x028a:
            r10 = 109(0x6d, float:1.53E-43)
            goto L_0x002b
        L_0x028e:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.u0(java.lang.String):com.caverock.androidsvg.SVG$v");
    }

    public static PreserveAspectRatio v0(String str) throws SVGParseException {
        g gVar = new g(str);
        gVar.A();
        String r11 = gVar.r();
        if ("defer".equals(r11)) {
            gVar.A();
            r11 = gVar.r();
        }
        PreserveAspectRatio.Alignment a11 = b.a(r11);
        PreserveAspectRatio.Scale scale = null;
        gVar.A();
        if (!gVar.h()) {
            String r12 = gVar.r();
            r12.hashCode();
            if (r12.equals("meet")) {
                scale = PreserveAspectRatio.Scale.meet;
            } else if (r12.equals("slice")) {
                scale = PreserveAspectRatio.Scale.slice;
            } else {
                throw new SVGParseException("Invalid preserveAspectRatio definition: " + str);
            }
        }
        return new PreserveAspectRatio(a11, scale);
    }

    public static void w0(SVG.n0 n0Var, String str) throws SVGParseException {
        n0Var.f64516o = v0(str);
    }

    public static SVG.Style.RenderQuality y0(String str) {
        str.hashCode();
        char c11 = 65535;
        switch (str.hashCode()) {
            case -933002398:
                if (str.equals("optimizeQuality")) {
                    c11 = 0;
                    break;
                }
                break;
            case 3005871:
                if (str.equals(TtmlNode.TEXT_EMPHASIS_AUTO)) {
                    c11 = 1;
                    break;
                }
                break;
            case 362741610:
                if (str.equals("optimizeSpeed")) {
                    c11 = 2;
                    break;
                }
                break;
        }
        switch (c11) {
            case 0:
                return SVG.Style.RenderQuality.optimizeQuality;
            case 1:
                return SVG.Style.RenderQuality.auto;
            case 2:
                return SVG.Style.RenderQuality.optimizeSpeed;
            default:
                return null;
        }
    }

    public static Set<String> z0(String str) {
        g gVar = new g(str);
        HashSet hashSet = new HashSet();
        while (!gVar.h()) {
            String r11 = gVar.r();
            if (r11.startsWith("http://www.w3.org/TR/SVG11/feature#")) {
                hashSet.add(r11.substring(35));
            } else {
                hashSet.add("UNSUPPORTED");
            }
            gVar.A();
        }
        return hashSet;
    }

    public final void A(SVG.d dVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            switch (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()]) {
                case 12:
                    dVar.f64463o = o0(trim);
                    break;
                case 13:
                    dVar.f64464p = o0(trim);
                    break;
                case 14:
                    SVG.o o02 = o0(trim);
                    dVar.f64465q = o02;
                    if (!o02.h()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <circle> element. r cannot be negative");
                    }
            }
        }
    }

    public final void B(SVG.e eVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            if (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()] == 38) {
                if ("objectBoundingBox".equals(trim)) {
                    eVar.f64471p = Boolean.FALSE;
                } else if ("userSpaceOnUse".equals(trim)) {
                    eVar.f64471p = Boolean.TRUE;
                } else {
                    throw new SVGParseException("Invalid value for attribute clipPathUnits");
                }
            }
        }
    }

    public final void C(SVG.e0 e0Var, Attributes attributes) throws SVGParseException {
        HashSet hashSet;
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            switch (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()]) {
                case 21:
                    e0Var.g(z0(trim));
                    break;
                case 22:
                    e0Var.j(trim);
                    break;
                case 23:
                    e0Var.d(F0(trim));
                    break;
                case 24:
                    e0Var.i(A0(trim));
                    break;
                case 25:
                    List<String> i02 = i0(trim);
                    if (i02 == null) {
                        hashSet = new HashSet(0);
                    }
                    e0Var.b(hashSet);
                    break;
            }
        }
    }

    public final void D(SVG.j0 j0Var, Attributes attributes) throws SVGParseException {
        int i11 = 0;
        while (i11 < attributes.getLength()) {
            String qName = attributes.getQName(i11);
            if (qName.equals("id") || qName.equals("xml:id")) {
                j0Var.f64497c = attributes.getValue(i11).trim();
                return;
            } else if (qName.equals("xml:space")) {
                String trim = attributes.getValue(i11).trim();
                if ("default".equals(trim)) {
                    j0Var.f64498d = Boolean.FALSE;
                    return;
                } else if ("preserve".equals(trim)) {
                    j0Var.f64498d = Boolean.TRUE;
                    return;
                } else {
                    throw new SVGParseException("Invalid value for \"xml:space\" attribute: " + trim);
                }
            } else {
                i11++;
            }
        }
    }

    public final void E(SVG.i iVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            switch (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()]) {
                case 10:
                    SVG.o o02 = o0(trim);
                    iVar.f64489q = o02;
                    if (!o02.h()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <ellipse> element. rx cannot be negative");
                    }
                case 11:
                    SVG.o o03 = o0(trim);
                    iVar.f64490r = o03;
                    if (!o03.h()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <ellipse> element. ry cannot be negative");
                    }
                case 12:
                    iVar.f64487o = o0(trim);
                    break;
                case 13:
                    iVar.f64488p = o0(trim);
                    break;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:34:0x008d, code lost:
        continue;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void F(com.caverock.androidsvg.SVG.j r5, org.xml.sax.Attributes r6) throws com.caverock.androidsvg.SVGParseException {
        /*
            r4 = this;
            r0 = 0
        L_0x0001:
            int r1 = r6.getLength()
            if (r0 >= r1) goto L_0x0091
            java.lang.String r1 = r6.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = com.caverock.androidsvg.SVGParser.a.f64604b
            java.lang.String r3 = r6.getLocalName(r0)
            com.caverock.androidsvg.SVGParser$SVGAttr r3 = com.caverock.androidsvg.SVGParser.SVGAttr.fromString(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 6
            if (r2 == r3) goto L_0x0073
            switch(r2) {
                case 32: goto L_0x0050;
                case 33: goto L_0x0049;
                case 34: goto L_0x0026;
                default: goto L_0x0025;
            }
        L_0x0025:
            goto L_0x008d
        L_0x0026:
            com.caverock.androidsvg.SVG$GradientSpread r2 = com.caverock.androidsvg.SVG.GradientSpread.valueOf(r1)     // Catch:{ IllegalArgumentException -> 0x002d }
            r5.f64495k = r2     // Catch:{ IllegalArgumentException -> 0x002d }
            goto L_0x008d
        L_0x002d:
            com.caverock.androidsvg.SVGParseException r5 = new com.caverock.androidsvg.SVGParseException
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r0 = "Invalid spreadMethod attribute. \""
            r6.append(r0)
            r6.append(r1)
            java.lang.String r0 = "\" is not a valid value."
            r6.append(r0)
            java.lang.String r6 = r6.toString()
            r5.<init>(r6)
            throw r5
        L_0x0049:
            android.graphics.Matrix r1 = r4.J0(r1)
            r5.f64494j = r1
            goto L_0x008d
        L_0x0050:
            java.lang.String r2 = "objectBoundingBox"
            boolean r2 = r2.equals(r1)
            if (r2 == 0) goto L_0x005d
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r5.f64493i = r1
            goto L_0x008d
        L_0x005d:
            java.lang.String r2 = "userSpaceOnUse"
            boolean r1 = r2.equals(r1)
            if (r1 == 0) goto L_0x006b
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r5.f64493i = r1
            goto L_0x008d
        L_0x006b:
            com.caverock.androidsvg.SVGParseException r5 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r6 = "Invalid value for attribute gradientUnits"
            r5.<init>(r6)
            throw r5
        L_0x0073:
            java.lang.String r2 = r6.getURI(r0)
            java.lang.String r3 = ""
            boolean r2 = r3.equals(r2)
            if (r2 != 0) goto L_0x008b
            java.lang.String r2 = r6.getURI(r0)
            java.lang.String r3 = "http://www.w3.org/1999/xlink"
            boolean r2 = r3.equals(r2)
            if (r2 == 0) goto L_0x008d
        L_0x008b:
            r5.f64496l = r1
        L_0x008d:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x0091:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.F(com.caverock.androidsvg.SVG$j, org.xml.sax.Attributes):void");
    }

    public final void G(SVG.n nVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 == 1) {
                nVar.f64511q = o0(trim);
            } else if (i12 == 2) {
                nVar.f64512r = o0(trim);
            } else if (i12 == 3) {
                SVG.o o02 = o0(trim);
                nVar.f64513s = o02;
                if (o02.h()) {
                    throw new SVGParseException("Invalid <use> element. width cannot be negative");
                }
            } else if (i12 == 4) {
                SVG.o o03 = o0(trim);
                nVar.f64514t = o03;
                if (o03.h()) {
                    throw new SVGParseException("Invalid <use> element. height cannot be negative");
                }
            } else if (i12 != 6) {
                if (i12 == 7) {
                    w0(nVar, trim);
                }
            } else if ("".equals(attributes.getURI(i11)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i11))) {
                nVar.f64510p = trim;
            }
        }
    }

    public final void H(SVG.p pVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            switch (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()]) {
                case 15:
                    pVar.f64524o = o0(trim);
                    break;
                case 16:
                    pVar.f64525p = o0(trim);
                    break;
                case 17:
                    pVar.f64526q = o0(trim);
                    break;
                case 18:
                    pVar.f64527r = o0(trim);
                    break;
            }
        }
    }

    public final void I(SVG.k0 k0Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            switch (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()]) {
                case 15:
                    k0Var.f64503m = o0(trim);
                    break;
                case 16:
                    k0Var.f64504n = o0(trim);
                    break;
                case 17:
                    k0Var.f64505o = o0(trim);
                    break;
                case 18:
                    k0Var.f64506p = o0(trim);
                    break;
            }
        }
    }

    public final void J(SVG.q qVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            switch (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()]) {
                case 26:
                    qVar.f64530r = o0(trim);
                    break;
                case 27:
                    qVar.f64531s = o0(trim);
                    break;
                case 28:
                    SVG.o o02 = o0(trim);
                    qVar.f64532t = o02;
                    if (!o02.h()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <marker> element. markerWidth cannot be negative");
                    }
                case 29:
                    SVG.o o03 = o0(trim);
                    qVar.f64533u = o03;
                    if (!o03.h()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <marker> element. markerHeight cannot be negative");
                    }
                case 30:
                    if ("strokeWidth".equals(trim)) {
                        qVar.f64529q = false;
                        break;
                    } else if ("userSpaceOnUse".equals(trim)) {
                        qVar.f64529q = true;
                        break;
                    } else {
                        throw new SVGParseException("Invalid value for attribute markerUnits");
                    }
                case 31:
                    if (!TtmlNode.TEXT_EMPHASIS_AUTO.equals(trim)) {
                        qVar.f64534v = Float.valueOf(f0(trim));
                        break;
                    } else {
                        qVar.f64534v = Float.valueOf(Float.NaN);
                        break;
                    }
            }
        }
    }

    public final Matrix J0(String str) throws SVGParseException {
        String str2 = str;
        Matrix matrix = new Matrix();
        g gVar = new g(str2);
        gVar.A();
        while (!gVar.h()) {
            String o11 = gVar.o();
            if (o11 != null) {
                char c11 = 65535;
                switch (o11.hashCode()) {
                    case -1081239615:
                        if (o11.equals("matrix")) {
                            c11 = 0;
                            break;
                        }
                        break;
                    case -925180581:
                        if (o11.equals("rotate")) {
                            c11 = 1;
                            break;
                        }
                        break;
                    case 109250890:
                        if (o11.equals("scale")) {
                            c11 = 2;
                            break;
                        }
                        break;
                    case 109493390:
                        if (o11.equals("skewX")) {
                            c11 = 3;
                            break;
                        }
                        break;
                    case 109493391:
                        if (o11.equals("skewY")) {
                            c11 = 4;
                            break;
                        }
                        break;
                    case 1052832078:
                        if (o11.equals("translate")) {
                            c11 = 5;
                            break;
                        }
                        break;
                }
                switch (c11) {
                    case 0:
                        gVar.A();
                        float n11 = gVar.n();
                        gVar.z();
                        float n12 = gVar.n();
                        gVar.z();
                        float n13 = gVar.n();
                        gVar.z();
                        float n14 = gVar.n();
                        gVar.z();
                        float n15 = gVar.n();
                        gVar.z();
                        float n16 = gVar.n();
                        gVar.A();
                        if (!Float.isNaN(n16) && gVar.f(')')) {
                            Matrix matrix2 = new Matrix();
                            matrix2.setValues(new float[]{n11, n13, n15, n12, n14, n16, 0.0f, 0.0f, 1.0f});
                            matrix.preConcat(matrix2);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                        break;
                    case 1:
                        gVar.A();
                        float n17 = gVar.n();
                        float x11 = gVar.x();
                        float x12 = gVar.x();
                        gVar.A();
                        if (Float.isNaN(n17) || !gVar.f(')')) {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        } else if (Float.isNaN(x11)) {
                            matrix.preRotate(n17);
                            break;
                        } else if (!Float.isNaN(x12)) {
                            matrix.preRotate(n17, x11, x12);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                    case 2:
                        gVar.A();
                        float n18 = gVar.n();
                        float x13 = gVar.x();
                        gVar.A();
                        if (!Float.isNaN(n18) && gVar.f(')')) {
                            if (!Float.isNaN(x13)) {
                                matrix.preScale(n18, x13);
                                break;
                            } else {
                                matrix.preScale(n18, n18);
                                break;
                            }
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                        break;
                    case 3:
                        gVar.A();
                        float n19 = gVar.n();
                        gVar.A();
                        if (!Float.isNaN(n19) && gVar.f(')')) {
                            matrix.preSkew((float) Math.tan(Math.toRadians((double) n19)), 0.0f);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                    case 4:
                        gVar.A();
                        float n21 = gVar.n();
                        gVar.A();
                        if (!Float.isNaN(n21) && gVar.f(')')) {
                            matrix.preSkew(0.0f, (float) Math.tan(Math.toRadians((double) n21)));
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                    case 5:
                        gVar.A();
                        float n22 = gVar.n();
                        float x14 = gVar.x();
                        gVar.A();
                        if (!Float.isNaN(n22) && gVar.f(')')) {
                            if (!Float.isNaN(x14)) {
                                matrix.preTranslate(n22, x14);
                                break;
                            } else {
                                matrix.preTranslate(n22, 0.0f);
                                break;
                            }
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                        break;
                    default:
                        throw new SVGParseException("Invalid transform list fn: " + o11 + ")");
                }
                if (gVar.h()) {
                    return matrix;
                }
                gVar.z();
            } else {
                throw new SVGParseException("Bad transform function encountered in transform list: " + str2);
            }
        }
        return matrix;
    }

    public final void K(SVG.r rVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 == 1) {
                rVar.f64537q = o0(trim);
            } else if (i12 == 2) {
                rVar.f64538r = o0(trim);
            } else if (i12 == 3) {
                SVG.o o02 = o0(trim);
                rVar.f64539s = o02;
                if (o02.h()) {
                    throw new SVGParseException("Invalid <mask> element. width cannot be negative");
                }
            } else if (i12 == 4) {
                SVG.o o03 = o0(trim);
                rVar.f64540t = o03;
                if (o03.h()) {
                    throw new SVGParseException("Invalid <mask> element. height cannot be negative");
                }
            } else if (i12 != 43) {
                if (i12 != 44) {
                    continue;
                } else if ("objectBoundingBox".equals(trim)) {
                    rVar.f64536p = Boolean.FALSE;
                } else if ("userSpaceOnUse".equals(trim)) {
                    rVar.f64536p = Boolean.TRUE;
                } else {
                    throw new SVGParseException("Invalid value for attribute maskContentUnits");
                }
            } else if ("objectBoundingBox".equals(trim)) {
                rVar.f64535o = Boolean.FALSE;
            } else if ("userSpaceOnUse".equals(trim)) {
                rVar.f64535o = Boolean.TRUE;
            } else {
                throw new SVGParseException("Invalid value for attribute maskUnits");
            }
        }
    }

    public final void K0(InputStream inputStream) throws SVGParseException {
        Log.d("SVGParser", "Falling back to SAX parser");
        try {
            SAXParserFactory newInstance = SAXParserFactory.newInstance();
            newInstance.setFeature("http://xml.org/sax/features/external-general-entities", false);
            newInstance.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            XMLReader xMLReader = newInstance.newSAXParser().getXMLReader();
            f fVar = new f(this, (a) null);
            xMLReader.setContentHandler(fVar);
            xMLReader.setProperty("http://xml.org/sax/properties/lexical-handler", fVar);
            xMLReader.parse(new InputSource(inputStream));
        } catch (ParserConfigurationException e11) {
            throw new SVGParseException("XML parser problem", e11);
        } catch (SAXException e12) {
            throw new SVGParseException("SVG parse error", e12);
        } catch (IOException e13) {
            throw new SVGParseException("Stream error", e13);
        }
    }

    public final void L(SVG.u uVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 == 8) {
                uVar.f64546o = u0(trim);
            } else if (i12 != 9) {
                continue;
            } else {
                Float valueOf = Float.valueOf(f0(trim));
                uVar.f64547p = valueOf;
                if (valueOf.floatValue() < 0.0f) {
                    throw new SVGParseException("Invalid <path> element. pathLength cannot be negative");
                }
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:44:0x010e, code lost:
        r9 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x0116, code lost:
        throw new com.caverock.androidsvg.SVGParseException("Stream error", r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x0117, code lost:
        r9 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x011f, code lost:
        throw new com.caverock.androidsvg.SVGParseException("XML parser problem", r9);
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x0117 A[ExcHandler: XmlPullParserException (r9v1 'e' org.xmlpull.v1.XmlPullParserException A[CUSTOM_DECLARE]), Splitter:B:0:0x0000] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void L0(java.io.InputStream r9, boolean r10) throws com.caverock.androidsvg.SVGParseException {
        /*
            r8 = this;
            org.xmlpull.v1.XmlPullParser r0 = android.util.Xml.newPullParser()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            com.caverock.androidsvg.SVGParser$h r1 = new com.caverock.androidsvg.SVGParser$h     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r1.<init>(r0)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r2 = "http://xmlpull.org/v1/doc/features.html#process-docdecl"
            r3 = 0
            r0.setFeature(r2, r3)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r2 = "http://xmlpull.org/v1/doc/features.html#process-namespaces"
            r4 = 1
            r0.setFeature(r2, r4)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r2 = 0
            r0.setInput(r9, r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            int r2 = r0.getEventType()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
        L_0x001d:
            if (r2 == r4) goto L_0x010a
            if (r2 == 0) goto L_0x0101
            r5 = 8
            java.lang.String r6 = "SVGParser"
            if (r2 == r5) goto L_0x00d4
            r5 = 10
            if (r2 == r5) goto L_0x00ac
            r5 = 58
            r6 = 2
            if (r2 == r6) goto L_0x0080
            r7 = 3
            if (r2 == r7) goto L_0x0053
            r5 = 4
            if (r2 == r5) goto L_0x0044
            r5 = 5
            if (r2 == r5) goto L_0x003b
            goto L_0x0104
        L_0x003b:
            java.lang.String r2 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r8.c1(r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            goto L_0x0104
        L_0x0044:
            int[] r2 = new int[r6]     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            char[] r5 = r0.getTextCharacters(r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6 = r2[r3]     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r2 = r2[r4]     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r8.e1(r5, r6, r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            goto L_0x0104
        L_0x0053:
            java.lang.String r2 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r6 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            if (r6 == 0) goto L_0x0073
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6.<init>()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r7 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6.append(r7)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6.append(r5)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6.append(r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r2 = r6.toString()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
        L_0x0073:
            java.lang.String r5 = r0.getNamespace()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r6 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r8.p(r5, r6, r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            goto L_0x0104
        L_0x0080:
            java.lang.String r2 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r6 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            if (r6 == 0) goto L_0x00a0
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6.<init>()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r7 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6.append(r7)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6.append(r5)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r6.append(r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r2 = r6.toString()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
        L_0x00a0:
            java.lang.String r5 = r0.getNamespace()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r6 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r8.X0(r5, r6, r2, r1)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            goto L_0x0104
        L_0x00ac:
            if (r10 == 0) goto L_0x0104
            com.caverock.androidsvg.SVG r2 = r8.f64576a     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            com.caverock.androidsvg.SVG$d0 r2 = r2.l()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            if (r2 != 0) goto L_0x0104
            java.lang.String r2 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r5 = "<!ENTITY "
            boolean r2 = r2.contains(r5)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            if (r2 == 0) goto L_0x0104
            java.lang.String r10 = "Switching to SAX parser to process entities"
            android.util.Log.d(r6, r10)     // Catch:{ IOException -> 0x00ce, XmlPullParserException -> 0x0117 }
            r9.reset()     // Catch:{ IOException -> 0x00ce, XmlPullParserException -> 0x0117 }
            r8.K0(r9)     // Catch:{ IOException -> 0x00ce, XmlPullParserException -> 0x0117 }
            goto L_0x00d3
        L_0x00ce:
            java.lang.String r9 = "Detected internal entity definitions, but could not parse them."
            android.util.Log.w(r6, r9)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
        L_0x00d3:
            return
        L_0x00d4:
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r2.<init>()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r5 = "PROC INSTR: "
            r2.append(r5)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r5 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r2.append(r5)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r2 = r2.toString()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            android.util.Log.d(r6, r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            com.caverock.androidsvg.SVGParser$g r2 = new com.caverock.androidsvg.SVGParser$g     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r5 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r2.<init>(r5)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.lang.String r5 = r2.r()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            java.util.Map r2 = r8.x0(r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            r8.r(r5, r2)     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            goto L_0x0104
        L_0x0101:
            r8.W0()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
        L_0x0104:
            int r2 = r0.nextToken()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            goto L_0x001d
        L_0x010a:
            r8.o()     // Catch:{ XmlPullParserException -> 0x0117, IOException -> 0x010e }
            return
        L_0x010e:
            r9 = move-exception
            com.caverock.androidsvg.SVGParseException r10 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r0 = "Stream error"
            r10.<init>(r0, r9)
            throw r10
        L_0x0117:
            r9 = move-exception
            com.caverock.androidsvg.SVGParseException r10 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r0 = "XML parser problem"
            r10.<init>(r0, r9)
            throw r10
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.L0(java.io.InputStream, boolean):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:63:0x00d0, code lost:
        continue;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void M(com.caverock.androidsvg.SVG.x r6, org.xml.sax.Attributes r7) throws com.caverock.androidsvg.SVGParseException {
        /*
            r5 = this;
            r0 = 0
        L_0x0001:
            int r1 = r7.getLength()
            if (r0 >= r1) goto L_0x00d4
            java.lang.String r1 = r7.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = com.caverock.androidsvg.SVGParser.a.f64604b
            java.lang.String r3 = r7.getLocalName(r0)
            com.caverock.androidsvg.SVGParser$SVGAttr r3 = com.caverock.androidsvg.SVGParser.SVGAttr.fromString(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 1
            if (r2 == r3) goto L_0x00ca
            r3 = 2
            if (r2 == r3) goto L_0x00c3
            r3 = 3
            if (r2 == r3) goto L_0x00ae
            r3 = 4
            if (r2 == r3) goto L_0x0099
            r3 = 6
            if (r2 == r3) goto L_0x007e
            java.lang.String r3 = "userSpaceOnUse"
            java.lang.String r4 = "objectBoundingBox"
            switch(r2) {
                case 40: goto L_0x0060;
                case 41: goto L_0x0040;
                case 42: goto L_0x0038;
                default: goto L_0x0036;
            }
        L_0x0036:
            goto L_0x00d0
        L_0x0038:
            android.graphics.Matrix r1 = r5.J0(r1)
            r6.f64555s = r1
            goto L_0x00d0
        L_0x0040:
            boolean r2 = r4.equals(r1)
            if (r2 == 0) goto L_0x004c
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r6.f64554r = r1
            goto L_0x00d0
        L_0x004c:
            boolean r1 = r3.equals(r1)
            if (r1 == 0) goto L_0x0058
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r6.f64554r = r1
            goto L_0x00d0
        L_0x0058:
            com.caverock.androidsvg.SVGParseException r6 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r7 = "Invalid value for attribute patternContentUnits"
            r6.<init>(r7)
            throw r6
        L_0x0060:
            boolean r2 = r4.equals(r1)
            if (r2 == 0) goto L_0x006b
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r6.f64553q = r1
            goto L_0x00d0
        L_0x006b:
            boolean r1 = r3.equals(r1)
            if (r1 == 0) goto L_0x0076
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r6.f64553q = r1
            goto L_0x00d0
        L_0x0076:
            com.caverock.androidsvg.SVGParseException r6 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r7 = "Invalid value for attribute patternUnits"
            r6.<init>(r7)
            throw r6
        L_0x007e:
            java.lang.String r2 = r7.getURI(r0)
            java.lang.String r3 = ""
            boolean r2 = r3.equals(r2)
            if (r2 != 0) goto L_0x0096
            java.lang.String r2 = r7.getURI(r0)
            java.lang.String r3 = "http://www.w3.org/1999/xlink"
            boolean r2 = r3.equals(r2)
            if (r2 == 0) goto L_0x00d0
        L_0x0096:
            r6.f64560x = r1
            goto L_0x00d0
        L_0x0099:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r6.f64559w = r1
            boolean r1 = r1.h()
            if (r1 != 0) goto L_0x00a6
            goto L_0x00d0
        L_0x00a6:
            com.caverock.androidsvg.SVGParseException r6 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r7 = "Invalid <pattern> element. height cannot be negative"
            r6.<init>(r7)
            throw r6
        L_0x00ae:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r6.f64558v = r1
            boolean r1 = r1.h()
            if (r1 != 0) goto L_0x00bb
            goto L_0x00d0
        L_0x00bb:
            com.caverock.androidsvg.SVGParseException r6 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r7 = "Invalid <pattern> element. width cannot be negative"
            r6.<init>(r7)
            throw r6
        L_0x00c3:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r6.f64557u = r1
            goto L_0x00d0
        L_0x00ca:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r6.f64556t = r1
        L_0x00d0:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x00d4:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.M(com.caverock.androidsvg.SVG$x, org.xml.sax.Attributes):void");
    }

    public final void N(SVG.y yVar, Attributes attributes, String str) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            if (SVGAttr.fromString(attributes.getLocalName(i11)) == SVGAttr.points) {
                g gVar = new g(attributes.getValue(i11));
                ArrayList<Float> arrayList = new ArrayList<>();
                gVar.A();
                while (!gVar.h()) {
                    float n11 = gVar.n();
                    if (!Float.isNaN(n11)) {
                        gVar.z();
                        float n12 = gVar.n();
                        if (!Float.isNaN(n12)) {
                            gVar.z();
                            arrayList.add(Float.valueOf(n11));
                            arrayList.add(Float.valueOf(n12));
                        } else {
                            throw new SVGParseException("Invalid <" + str + "> points attribute. There should be an even number of coordinates.");
                        }
                    } else {
                        throw new SVGParseException("Invalid <" + str + "> points attribute. Non-coordinate content found in list.");
                    }
                }
                yVar.f64564o = new float[arrayList.size()];
                int i12 = 0;
                for (Float floatValue : arrayList) {
                    yVar.f64564o[i12] = floatValue.floatValue();
                    i12++;
                }
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:24:0x005b, code lost:
        continue;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void O(com.caverock.androidsvg.SVG.o0 r5, org.xml.sax.Attributes r6) throws com.caverock.androidsvg.SVGParseException {
        /*
            r4 = this;
            r0 = 0
        L_0x0001:
            int r1 = r6.getLength()
            if (r0 >= r1) goto L_0x005e
            java.lang.String r1 = r6.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = com.caverock.androidsvg.SVGParser.a.f64604b
            java.lang.String r3 = r6.getLocalName(r0)
            com.caverock.androidsvg.SVGParser$SVGAttr r3 = com.caverock.androidsvg.SVGParser.SVGAttr.fromString(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 35
            if (r2 == r3) goto L_0x0055
            r3 = 36
            if (r2 == r3) goto L_0x004e
            switch(r2) {
                case 12: goto L_0x0047;
                case 13: goto L_0x0040;
                case 14: goto L_0x002b;
                default: goto L_0x002a;
            }
        L_0x002a:
            goto L_0x005b
        L_0x002b:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r5.f64521o = r1
            boolean r1 = r1.h()
            if (r1 != 0) goto L_0x0038
            goto L_0x005b
        L_0x0038:
            com.caverock.androidsvg.SVGParseException r5 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r6 = "Invalid <radialGradient> element. r cannot be negative"
            r5.<init>(r6)
            throw r5
        L_0x0040:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r5.f64520n = r1
            goto L_0x005b
        L_0x0047:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r5.f64519m = r1
            goto L_0x005b
        L_0x004e:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r5.f64523q = r1
            goto L_0x005b
        L_0x0055:
            com.caverock.androidsvg.SVG$o r1 = o0(r1)
            r5.f64522p = r1
        L_0x005b:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x005e:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.O(com.caverock.androidsvg.SVG$o0, org.xml.sax.Attributes):void");
    }

    public final void O0(Attributes attributes) throws SVGParseException {
        l("<path>", new Object[0]);
        if (this.f64577b != null) {
            SVG.u uVar = new SVG.u();
            uVar.f64508a = this.f64576a;
            uVar.f64509b = this.f64577b;
            D(uVar, attributes);
            S(uVar, attributes);
            W(uVar, attributes);
            C(uVar, attributes);
            L(uVar, attributes);
            this.f64577b.h(uVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void P(SVG.a0 a0Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 == 1) {
                a0Var.f64441o = o0(trim);
            } else if (i12 == 2) {
                a0Var.f64442p = o0(trim);
            } else if (i12 == 3) {
                SVG.o o02 = o0(trim);
                a0Var.f64443q = o02;
                if (o02.h()) {
                    throw new SVGParseException("Invalid <rect> element. width cannot be negative");
                }
            } else if (i12 == 4) {
                SVG.o o03 = o0(trim);
                a0Var.f64444r = o03;
                if (o03.h()) {
                    throw new SVGParseException("Invalid <rect> element. height cannot be negative");
                }
            } else if (i12 == 10) {
                SVG.o o04 = o0(trim);
                a0Var.f64445s = o04;
                if (o04.h()) {
                    throw new SVGParseException("Invalid <rect> element. rx cannot be negative");
                }
            } else if (i12 != 11) {
                continue;
            } else {
                SVG.o o05 = o0(trim);
                a0Var.f64446t = o05;
                if (o05.h()) {
                    throw new SVGParseException("Invalid <rect> element. ry cannot be negative");
                }
            }
        }
    }

    public final void P0(Attributes attributes) throws SVGParseException {
        l("<pattern>", new Object[0]);
        if (this.f64577b != null) {
            SVG.x xVar = new SVG.x();
            xVar.f64508a = this.f64576a;
            xVar.f64509b = this.f64577b;
            D(xVar, attributes);
            S(xVar, attributes);
            C(xVar, attributes);
            Y(xVar, attributes);
            M(xVar, attributes);
            this.f64577b.h(xVar);
            this.f64577b = xVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void Q(SVG.d0 d0Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 == 1) {
                d0Var.f64466q = o0(trim);
            } else if (i12 == 2) {
                d0Var.f64467r = o0(trim);
            } else if (i12 == 3) {
                SVG.o o02 = o0(trim);
                d0Var.f64468s = o02;
                if (o02.h()) {
                    throw new SVGParseException("Invalid <svg> element. width cannot be negative");
                }
            } else if (i12 == 4) {
                SVG.o o03 = o0(trim);
                d0Var.f64469t = o03;
                if (o03.h()) {
                    throw new SVGParseException("Invalid <svg> element. height cannot be negative");
                }
            } else if (i12 == 5) {
                d0Var.f64470u = trim;
            }
        }
    }

    public final void Q0(Attributes attributes) throws SVGParseException {
        l("<polygon>", new Object[0]);
        if (this.f64577b != null) {
            SVG.z zVar = new SVG.z();
            zVar.f64508a = this.f64576a;
            zVar.f64509b = this.f64577b;
            D(zVar, attributes);
            S(zVar, attributes);
            W(zVar, attributes);
            C(zVar, attributes);
            N(zVar, attributes, "polygon");
            this.f64577b.h(zVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void R(SVG.c0 c0Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            if (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()] == 37) {
                c0Var.f64462h = n0(trim);
            }
        }
    }

    public final void R0(Attributes attributes) throws SVGParseException {
        l("<polyline>", new Object[0]);
        if (this.f64577b != null) {
            SVG.y yVar = new SVG.y();
            yVar.f64508a = this.f64576a;
            yVar.f64509b = this.f64577b;
            D(yVar, attributes);
            S(yVar, attributes);
            W(yVar, attributes);
            C(yVar, attributes);
            N(yVar, attributes, "polyline");
            this.f64577b.h(yVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void S(SVG.j0 j0Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            if (trim.length() != 0) {
                int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
                if (i12 == 45) {
                    E0(j0Var, trim);
                } else if (i12 != 46) {
                    if (j0Var.f64499e == null) {
                        j0Var.f64499e = new SVG.Style();
                    }
                    S0(j0Var.f64499e, attributes.getLocalName(i11), attributes.getValue(i11).trim());
                } else {
                    j0Var.f64501g = CSSParser.f(trim);
                }
            }
        }
    }

    public final void T(SVG.s0 s0Var, Attributes attributes) {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            if (a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()] == 6 && ("".equals(attributes.getURI(i11)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i11)))) {
                s0Var.f64541o = trim;
            }
        }
    }

    public final void T0(Attributes attributes) throws SVGParseException {
        l("<radialGradient>", new Object[0]);
        if (this.f64577b != null) {
            SVG.o0 o0Var = new SVG.o0();
            o0Var.f64508a = this.f64576a;
            o0Var.f64509b = this.f64577b;
            D(o0Var, attributes);
            S(o0Var, attributes);
            F(o0Var, attributes);
            O(o0Var, attributes);
            this.f64577b.h(o0Var);
            this.f64577b = o0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void U(SVG.x0 x0Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 != 6) {
                if (i12 == 39) {
                    x0Var.f64562p = o0(trim);
                }
            } else if ("".equals(attributes.getURI(i11)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i11))) {
                x0Var.f64561o = trim;
            }
        }
    }

    public final void U0(Attributes attributes) throws SVGParseException {
        l("<rect>", new Object[0]);
        if (this.f64577b != null) {
            SVG.a0 a0Var = new SVG.a0();
            a0Var.f64508a = this.f64576a;
            a0Var.f64509b = this.f64577b;
            D(a0Var, attributes);
            S(a0Var, attributes);
            W(a0Var, attributes);
            C(a0Var, attributes);
            P(a0Var, attributes);
            this.f64577b.h(a0Var);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void V(SVG.y0 y0Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 == 1) {
                y0Var.f64565o = p0(trim);
            } else if (i12 == 2) {
                y0Var.f64566p = p0(trim);
            } else if (i12 == 19) {
                y0Var.f64567q = p0(trim);
            } else if (i12 == 20) {
                y0Var.f64568r = p0(trim);
            }
        }
    }

    public final void V0(Attributes attributes) throws SVGParseException {
        l("<solidColor>", new Object[0]);
        if (this.f64577b != null) {
            SVG.b0 b0Var = new SVG.b0();
            b0Var.f64508a = this.f64576a;
            b0Var.f64509b = this.f64577b;
            D(b0Var, attributes);
            S(b0Var, attributes);
            this.f64577b.h(b0Var);
            this.f64577b = b0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void W(SVG.m mVar, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            if (SVGAttr.fromString(attributes.getLocalName(i11)) == SVGAttr.transform) {
                mVar.k(J0(attributes.getValue(i11)));
            }
        }
    }

    public final void W0() {
        this.f64576a = new SVG();
    }

    public final void X(SVG.b1 b1Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 == 1) {
                b1Var.f64454q = o0(trim);
            } else if (i12 == 2) {
                b1Var.f64455r = o0(trim);
            } else if (i12 == 3) {
                SVG.o o02 = o0(trim);
                b1Var.f64456s = o02;
                if (o02.h()) {
                    throw new SVGParseException("Invalid <use> element. width cannot be negative");
                }
            } else if (i12 == 4) {
                SVG.o o03 = o0(trim);
                b1Var.f64457t = o03;
                if (o03.h()) {
                    throw new SVGParseException("Invalid <use> element. height cannot be negative");
                }
            } else if (i12 == 6 && ("".equals(attributes.getURI(i11)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i11)))) {
                b1Var.f64453p = trim;
            }
        }
    }

    public final void X0(String str, String str2, String str3, Attributes attributes) throws SVGParseException {
        if (this.f64578c) {
            this.f64579d++;
        } else if ("http://www.w3.org/2000/svg".equals(str) || "".equals(str)) {
            if (str2.length() <= 0) {
                str2 = str3;
            }
            SVGElem fromString = SVGElem.fromString(str2);
            switch (a.f64603a[fromString.ordinal()]) {
                case 1:
                    a1(attributes);
                    return;
                case 2:
                case 3:
                    q(attributes);
                    return;
                case 4:
                    m(attributes);
                    return;
                case 5:
                    i1(attributes);
                    return;
                case 6:
                    O0(attributes);
                    return;
                case 7:
                    U0(attributes);
                    return;
                case 8:
                    i(attributes);
                    return;
                case 9:
                    n(attributes);
                    return;
                case 10:
                    v(attributes);
                    return;
                case 11:
                    R0(attributes);
                    return;
                case 12:
                    Q0(attributes);
                    return;
                case 13:
                    d1(attributes);
                    return;
                case 14:
                    h1(attributes);
                    return;
                case 15:
                    g1(attributes);
                    return;
                case 16:
                    k1(attributes);
                    return;
                case 17:
                    b1(attributes);
                    return;
                case 18:
                    x(attributes);
                    return;
                case 19:
                    w(attributes);
                    return;
                case 20:
                    T0(attributes);
                    return;
                case 21:
                    Y0(attributes);
                    return;
                case 22:
                case 23:
                    this.f64580e = true;
                    this.f64581f = fromString;
                    return;
                case 24:
                    k(attributes);
                    return;
                case 25:
                    f1(attributes);
                    return;
                case 26:
                    P0(attributes);
                    return;
                case 27:
                    u(attributes);
                    return;
                case 28:
                    j1(attributes);
                    return;
                case 29:
                    y(attributes);
                    return;
                case 30:
                    Z0(attributes);
                    return;
                case 31:
                    V0(attributes);
                    return;
                default:
                    this.f64578c = true;
                    this.f64579d = 1;
                    return;
            }
        }
    }

    public final void Y(SVG.p0 p0Var, Attributes attributes) throws SVGParseException {
        for (int i11 = 0; i11 < attributes.getLength(); i11++) {
            String trim = attributes.getValue(i11).trim();
            int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
            if (i12 == 7) {
                w0(p0Var, trim);
            } else if (i12 == 87) {
                p0Var.f64528p = N0(trim);
            }
        }
    }

    public final void Y0(Attributes attributes) throws SVGParseException {
        l("<stop>", new Object[0]);
        SVG.h0 h0Var = this.f64577b;
        if (h0Var == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (h0Var instanceof SVG.j) {
            SVG.c0 c0Var = new SVG.c0();
            c0Var.f64508a = this.f64576a;
            c0Var.f64509b = this.f64577b;
            D(c0Var, attributes);
            S(c0Var, attributes);
            R(c0Var, attributes);
            this.f64577b.h(c0Var);
            this.f64577b = c0Var;
        } else {
            throw new SVGParseException("Invalid document. <stop> elements are only valid inside <linearGradient> or <radialGradient> elements.");
        }
    }

    public final void Z(String str) {
        this.f64576a.a(new CSSParser(CSSParser.MediaType.screen, CSSParser.Source.Document).d(str));
    }

    public final void Z0(Attributes attributes) throws SVGParseException {
        l("<style>", new Object[0]);
        if (this.f64577b != null) {
            String str = TtmlNode.COMBINE_ALL;
            boolean z11 = true;
            for (int i11 = 0; i11 < attributes.getLength(); i11++) {
                String trim = attributes.getValue(i11).trim();
                int i12 = a.f64604b[SVGAttr.fromString(attributes.getLocalName(i11)).ordinal()];
                if (i12 == 88) {
                    z11 = trim.equals("text/css");
                } else if (i12 == 89) {
                    str = trim;
                }
            }
            if (!z11 || !CSSParser.b(str, CSSParser.MediaType.screen)) {
                this.f64578c = true;
                this.f64579d = 1;
                return;
            }
            this.f64583h = true;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void a1(Attributes attributes) throws SVGParseException {
        l("<svg>", new Object[0]);
        SVG.d0 d0Var = new SVG.d0();
        d0Var.f64508a = this.f64576a;
        d0Var.f64509b = this.f64577b;
        D(d0Var, attributes);
        S(d0Var, attributes);
        C(d0Var, attributes);
        Y(d0Var, attributes);
        Q(d0Var, attributes);
        SVG.h0 h0Var = this.f64577b;
        if (h0Var == null) {
            this.f64576a.s(d0Var);
        } else {
            h0Var.h(d0Var);
        }
        this.f64577b = d0Var;
    }

    public final void b1(Attributes attributes) throws SVGParseException {
        l("<symbol>", new Object[0]);
        if (this.f64577b != null) {
            SVG.r0 r0Var = new SVG.r0();
            r0Var.f64508a = this.f64576a;
            r0Var.f64509b = this.f64577b;
            D(r0Var, attributes);
            S(r0Var, attributes);
            C(r0Var, attributes);
            Y(r0Var, attributes);
            this.f64577b.h(r0Var);
            this.f64577b = r0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void c1(String str) throws SVGParseException {
        if (!this.f64578c) {
            if (this.f64580e) {
                if (this.f64582g == null) {
                    this.f64582g = new StringBuilder(str.length());
                }
                this.f64582g.append(str);
            } else if (this.f64583h) {
                if (this.f64584i == null) {
                    this.f64584i = new StringBuilder(str.length());
                }
                this.f64584i.append(str);
            } else if (this.f64577b instanceof SVG.w0) {
                h(str);
            }
        }
    }

    public final void d1(Attributes attributes) throws SVGParseException {
        l("<text>", new Object[0]);
        if (this.f64577b != null) {
            SVG.u0 u0Var = new SVG.u0();
            u0Var.f64508a = this.f64576a;
            u0Var.f64509b = this.f64577b;
            D(u0Var, attributes);
            S(u0Var, attributes);
            W(u0Var, attributes);
            C(u0Var, attributes);
            V(u0Var, attributes);
            this.f64577b.h(u0Var);
            this.f64577b = u0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void e1(char[] cArr, int i11, int i12) throws SVGParseException {
        if (!this.f64578c) {
            if (this.f64580e) {
                if (this.f64582g == null) {
                    this.f64582g = new StringBuilder(i12);
                }
                this.f64582g.append(cArr, i11, i12);
            } else if (this.f64583h) {
                if (this.f64584i == null) {
                    this.f64584i = new StringBuilder(i12);
                }
                this.f64584i.append(cArr, i11, i12);
            } else if (this.f64577b instanceof SVG.w0) {
                h(new String(cArr, i11, i12));
            }
        }
    }

    public final void f1(Attributes attributes) throws SVGParseException {
        l("<textPath>", new Object[0]);
        if (this.f64577b != null) {
            SVG.x0 x0Var = new SVG.x0();
            x0Var.f64508a = this.f64576a;
            x0Var.f64509b = this.f64577b;
            D(x0Var, attributes);
            S(x0Var, attributes);
            C(x0Var, attributes);
            U(x0Var, attributes);
            this.f64577b.h(x0Var);
            this.f64577b = x0Var;
            SVG.h0 h0Var = x0Var.f64509b;
            if (h0Var instanceof SVG.z0) {
                x0Var.n((SVG.z0) h0Var);
            } else {
                x0Var.n(((SVG.v0) h0Var).c());
            }
        } else {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        }
    }

    public final void g1(Attributes attributes) throws SVGParseException {
        l("<tref>", new Object[0]);
        SVG.h0 h0Var = this.f64577b;
        if (h0Var == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (h0Var instanceof SVG.w0) {
            SVG.s0 s0Var = new SVG.s0();
            s0Var.f64508a = this.f64576a;
            s0Var.f64509b = this.f64577b;
            D(s0Var, attributes);
            S(s0Var, attributes);
            C(s0Var, attributes);
            T(s0Var, attributes);
            this.f64577b.h(s0Var);
            SVG.h0 h0Var2 = s0Var.f64509b;
            if (h0Var2 instanceof SVG.z0) {
                s0Var.n((SVG.z0) h0Var2);
            } else {
                s0Var.n(((SVG.v0) h0Var2).c());
            }
        } else {
            throw new SVGParseException("Invalid document. <tref> elements are only valid inside <text> or <tspan> elements.");
        }
    }

    public final void h(String str) throws SVGParseException {
        SVG.l0 l0Var;
        SVG.f0 f0Var = (SVG.f0) this.f64577b;
        int size = f0Var.f64475i.size();
        if (size == 0) {
            l0Var = null;
        } else {
            l0Var = f0Var.f64475i.get(size - 1);
        }
        if (l0Var instanceof SVG.a1) {
            StringBuilder sb2 = new StringBuilder();
            SVG.a1 a1Var = (SVG.a1) l0Var;
            sb2.append(a1Var.f64447c);
            sb2.append(str);
            a1Var.f64447c = sb2.toString();
            return;
        }
        this.f64577b.h(new SVG.a1(str));
    }

    public final void h1(Attributes attributes) throws SVGParseException {
        l("<tspan>", new Object[0]);
        SVG.h0 h0Var = this.f64577b;
        if (h0Var == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (h0Var instanceof SVG.w0) {
            SVG.t0 t0Var = new SVG.t0();
            t0Var.f64508a = this.f64576a;
            t0Var.f64509b = this.f64577b;
            D(t0Var, attributes);
            S(t0Var, attributes);
            C(t0Var, attributes);
            V(t0Var, attributes);
            this.f64577b.h(t0Var);
            this.f64577b = t0Var;
            SVG.h0 h0Var2 = t0Var.f64509b;
            if (h0Var2 instanceof SVG.z0) {
                t0Var.n((SVG.z0) h0Var2);
            } else {
                t0Var.n(((SVG.v0) h0Var2).c());
            }
        } else {
            throw new SVGParseException("Invalid document. <tspan> elements are only valid inside <text> or other <tspan> elements.");
        }
    }

    public final void i(Attributes attributes) throws SVGParseException {
        l("<circle>", new Object[0]);
        if (this.f64577b != null) {
            SVG.d dVar = new SVG.d();
            dVar.f64508a = this.f64576a;
            dVar.f64509b = this.f64577b;
            D(dVar, attributes);
            S(dVar, attributes);
            W(dVar, attributes);
            C(dVar, attributes);
            A(dVar, attributes);
            this.f64577b.h(dVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void i1(Attributes attributes) throws SVGParseException {
        l("<use>", new Object[0]);
        if (this.f64577b != null) {
            SVG.b1 b1Var = new SVG.b1();
            b1Var.f64508a = this.f64576a;
            b1Var.f64509b = this.f64577b;
            D(b1Var, attributes);
            S(b1Var, attributes);
            W(b1Var, attributes);
            C(b1Var, attributes);
            X(b1Var, attributes);
            this.f64577b.h(b1Var);
            this.f64577b = b1Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void j1(Attributes attributes) throws SVGParseException {
        l("<view>", new Object[0]);
        if (this.f64577b != null) {
            SVG.c1 c1Var = new SVG.c1();
            c1Var.f64508a = this.f64576a;
            c1Var.f64509b = this.f64577b;
            D(c1Var, attributes);
            C(c1Var, attributes);
            Y(c1Var, attributes);
            this.f64577b.h(c1Var);
            this.f64577b = c1Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void k(Attributes attributes) throws SVGParseException {
        l("<clipPath>", new Object[0]);
        if (this.f64577b != null) {
            SVG.e eVar = new SVG.e();
            eVar.f64508a = this.f64576a;
            eVar.f64509b = this.f64577b;
            D(eVar, attributes);
            S(eVar, attributes);
            W(eVar, attributes);
            C(eVar, attributes);
            B(eVar, attributes);
            this.f64577b.h(eVar);
            this.f64577b = eVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void k1(Attributes attributes) throws SVGParseException {
        l("<switch>", new Object[0]);
        if (this.f64577b != null) {
            SVG.q0 q0Var = new SVG.q0();
            q0Var.f64508a = this.f64576a;
            q0Var.f64509b = this.f64577b;
            D(q0Var, attributes);
            S(q0Var, attributes);
            W(q0Var, attributes);
            C(q0Var, attributes);
            this.f64577b.h(q0Var);
            this.f64577b = q0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void l(String str, Object... objArr) {
    }

    public final void m(Attributes attributes) throws SVGParseException {
        l("<defs>", new Object[0]);
        if (this.f64577b != null) {
            SVG.h hVar = new SVG.h();
            hVar.f64508a = this.f64576a;
            hVar.f64509b = this.f64577b;
            D(hVar, attributes);
            S(hVar, attributes);
            W(hVar, attributes);
            this.f64577b.h(hVar);
            this.f64577b = hVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void n(Attributes attributes) throws SVGParseException {
        l("<ellipse>", new Object[0]);
        if (this.f64577b != null) {
            SVG.i iVar = new SVG.i();
            iVar.f64508a = this.f64576a;
            iVar.f64509b = this.f64577b;
            D(iVar, attributes);
            S(iVar, attributes);
            W(iVar, attributes);
            C(iVar, attributes);
            E(iVar, attributes);
            this.f64577b.h(iVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final Float n0(String str) throws SVGParseException {
        if (str.length() != 0) {
            int length = str.length();
            boolean z11 = true;
            if (str.charAt(str.length() - 1) == '%') {
                length--;
            } else {
                z11 = false;
            }
            try {
                float g02 = g0(str, 0, length);
                float f11 = 100.0f;
                if (z11) {
                    g02 /= 100.0f;
                }
                if (g02 < 0.0f) {
                    f11 = 0.0f;
                } else if (g02 <= 100.0f) {
                    f11 = g02;
                }
                return Float.valueOf(f11);
            } catch (NumberFormatException e11) {
                throw new SVGParseException("Invalid offset value in <stop>: " + str, e11);
            }
        } else {
            throw new SVGParseException("Invalid offset value in <stop> (empty string)");
        }
    }

    public final void o() {
    }

    public final void p(String str, String str2, String str3) throws SVGParseException {
        if (this.f64578c) {
            int i11 = this.f64579d - 1;
            this.f64579d = i11;
            if (i11 == 0) {
                this.f64578c = false;
                return;
            }
        }
        if ("http://www.w3.org/2000/svg".equals(str) || "".equals(str)) {
            if (str2.length() <= 0) {
                str2 = str3;
            }
            int i12 = a.f64603a[SVGElem.fromString(str2).ordinal()];
            if (!(i12 == 1 || i12 == 2 || i12 == 4 || i12 == 5 || i12 == 13 || i12 == 14)) {
                switch (i12) {
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 31:
                        break;
                    case 22:
                    case 23:
                        this.f64580e = false;
                        StringBuilder sb2 = this.f64582g;
                        if (sb2 != null) {
                            SVGElem sVGElem = this.f64581f;
                            if (sVGElem == SVGElem.title) {
                                this.f64576a.t(sb2.toString());
                            } else if (sVGElem == SVGElem.desc) {
                                this.f64576a.r(sb2.toString());
                            }
                            this.f64582g.setLength(0);
                            return;
                        }
                        return;
                    case 30:
                        StringBuilder sb3 = this.f64584i;
                        if (sb3 != null) {
                            this.f64583h = false;
                            Z(sb3.toString());
                            this.f64584i.setLength(0);
                            return;
                        }
                        return;
                    default:
                        return;
                }
            }
            this.f64577b = ((SVG.l0) this.f64577b).f64509b;
        }
    }

    public final void q(Attributes attributes) throws SVGParseException {
        l("<g>", new Object[0]);
        if (this.f64577b != null) {
            SVG.l lVar = new SVG.l();
            lVar.f64508a = this.f64576a;
            lVar.f64509b = this.f64577b;
            D(lVar, attributes);
            S(lVar, attributes);
            W(lVar, attributes);
            C(lVar, attributes);
            this.f64577b.h(lVar);
            this.f64577b = lVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void r(String str, Map<String, String> map) {
        String str2;
        String b11;
        if (str.equals("xml-stylesheet") && SVG.g() != null) {
            if (map.get("type") != null && !"text/css".equals(map.get("type"))) {
                return;
            }
            if ((map.get("alternate") == null || "no".equals(map.get("alternate"))) && (str2 = map.get(ShareConstants.WEB_DIALOG_PARAM_HREF)) != null && (b11 = SVG.g().b(str2)) != null) {
                String str3 = map.get("media");
                if (str3 != null && !TtmlNode.COMBINE_ALL.equals(str3.trim())) {
                    b11 = "@media " + str3 + " { " + b11 + "}";
                }
                Z(b11);
            }
        }
    }

    public final void u(Attributes attributes) throws SVGParseException {
        l("<image>", new Object[0]);
        if (this.f64577b != null) {
            SVG.n nVar = new SVG.n();
            nVar.f64508a = this.f64576a;
            nVar.f64509b = this.f64577b;
            D(nVar, attributes);
            S(nVar, attributes);
            W(nVar, attributes);
            C(nVar, attributes);
            G(nVar, attributes);
            this.f64577b.h(nVar);
            this.f64577b = nVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void v(Attributes attributes) throws SVGParseException {
        l("<line>", new Object[0]);
        if (this.f64577b != null) {
            SVG.p pVar = new SVG.p();
            pVar.f64508a = this.f64576a;
            pVar.f64509b = this.f64577b;
            D(pVar, attributes);
            S(pVar, attributes);
            W(pVar, attributes);
            C(pVar, attributes);
            H(pVar, attributes);
            this.f64577b.h(pVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void w(Attributes attributes) throws SVGParseException {
        l("<linearGradient>", new Object[0]);
        if (this.f64577b != null) {
            SVG.k0 k0Var = new SVG.k0();
            k0Var.f64508a = this.f64576a;
            k0Var.f64509b = this.f64577b;
            D(k0Var, attributes);
            S(k0Var, attributes);
            F(k0Var, attributes);
            I(k0Var, attributes);
            this.f64577b.h(k0Var);
            this.f64577b = k0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final void x(Attributes attributes) throws SVGParseException {
        l("<marker>", new Object[0]);
        if (this.f64577b != null) {
            SVG.q qVar = new SVG.q();
            qVar.f64508a = this.f64576a;
            qVar.f64509b = this.f64577b;
            D(qVar, attributes);
            S(qVar, attributes);
            C(qVar, attributes);
            Y(qVar, attributes);
            J(qVar, attributes);
            this.f64577b.h(qVar);
            this.f64577b = qVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public final Map<String, String> x0(g gVar) {
        HashMap hashMap = new HashMap();
        gVar.A();
        String s11 = gVar.s('=');
        while (s11 != null) {
            gVar.f('=');
            hashMap.put(s11, gVar.q());
            gVar.A();
            s11 = gVar.s('=');
        }
        return hashMap;
    }

    public final void y(Attributes attributes) throws SVGParseException {
        l("<mask>", new Object[0]);
        if (this.f64577b != null) {
            SVG.r rVar = new SVG.r();
            rVar.f64508a = this.f64576a;
            rVar.f64509b = this.f64577b;
            D(rVar, attributes);
            S(rVar, attributes);
            C(rVar, attributes);
            K(rVar, attributes);
            this.f64577b.h(rVar);
            this.f64577b = rVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    public SVG z(BufferedInputStream bufferedInputStream, boolean z11) throws SVGParseException {
        if (!bufferedInputStream.markSupported()) {
            bufferedInputStream = new BufferedInputStream(bufferedInputStream);
        }
        try {
            bufferedInputStream.mark(3);
            int read = bufferedInputStream.read() + (bufferedInputStream.read() << 8);
            bufferedInputStream.reset();
            if (read == 35615) {
                bufferedInputStream = new BufferedInputStream(new GZIPInputStream(bufferedInputStream));
            }
        } catch (IOException unused) {
        }
        try {
            bufferedInputStream.mark(4096);
            L0(bufferedInputStream, z11);
            return this.f64576a;
        } finally {
            try {
                bufferedInputStream.close();
            } catch (IOException unused2) {
                Log.e("SVGParser", "Exception thrown closing input stream");
            }
        }
    }
}
