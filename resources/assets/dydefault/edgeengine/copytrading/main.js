var DP = 20, RM = 1, MAX_DP = 1e6, MAX_POWER = 1e6, NE = -7, PE = 21, NAME = "[big.js] ", INVALID = NAME + "Invalid ", INVALID_DP = INVALID + "decimal places", INVALID_RM = INVALID + "rounding mode", DIV_BY_ZERO = NAME + "Division by zero", P = {}, UNDEFINED = void 0, NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;

function _Big_() {
    function Big(n) {
        var x = this;
        if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);
        if (n instanceof Big) {
            x.s = n.s;
            x.e = n.e;
            x.c = n.c.slice();
        } else {
            parse(x, n);
        }
        x.constructor = Big;
    }
    Big.prototype = P;
    Big.DP = DP;
    Big.RM = RM;
    Big.NE = NE;
    Big.PE = PE;
    Big.version = "5.2.2";
    return Big;
}

function parse(x, n) {
    var e, i, nl;
    if (n === 0 && 1 / n < 0) n = "-0"; else if (!NUMERIC.test(n += "")) throw Error(INVALID + "number");
    x.s = n.charAt(0) == "-" ? (n = n.slice(1), -1) : 1;
    if ((e = n.indexOf(".")) > -1) n = n.replace(".", "");
    if ((i = n.search(/e/i)) > 0) {
        if (e < 0) e = i;
        e += +n.slice(i + 1);
        n = n.substring(0, i);
    } else if (e < 0) {
        e = n.length;
    }
    nl = n.length;
    for (i = 0; i < nl && n.charAt(i) == "0"; ) ++i;
    if (i == nl) {
        x.c = [ x.e = 0 ];
    } else {
        for (;nl > 0 && n.charAt(--nl) == "0"; ) ;
        x.e = e - i - 1;
        x.c = [];
        for (e = 0; i <= nl; ) x.c[e++] = +n.charAt(i++);
    }
    return x;
}

function round(x, dp, rm, more) {
    var xc = x.c, i = x.e + dp + 1;
    if (i < xc.length) {
        if (rm === 1) {
            more = xc[i] >= 5;
        } else if (rm === 2) {
            more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);
        } else if (rm === 3) {
            more = more || !!xc[0];
        } else {
            more = false;
            if (rm !== 0) throw Error(INVALID_RM);
        }
        if (i < 1) {
            xc.length = 1;
            if (more) {
                x.e = -dp;
                xc[0] = 1;
            } else {
                xc[0] = x.e = 0;
            }
        } else {
            xc.length = i--;
            if (more) {
                for (;++xc[i] > 9; ) {
                    xc[i] = 0;
                    if (!i--) {
                        ++x.e;
                        xc.unshift(1);
                    }
                }
            }
            for (i = xc.length; !xc[--i]; ) xc.pop();
        }
    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {
        throw Error(INVALID_RM);
    }
    return x;
}

function stringify(x, id, n, k) {
    var e, s, Big = x.constructor, z = !x.c[0];
    if (n !== UNDEFINED) {
        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {
            throw Error(id == 3 ? INVALID + "precision" : INVALID_DP);
        }
        x = new Big(x);
        n = k - x.e;
        if (x.c.length > ++k) round(x, n, Big.RM);
        if (id == 2) k = x.e + n + 1;
        for (;x.c.length < k; ) x.c.push(0);
    }
    e = x.e;
    s = x.c.join("");
    n = s.length;
    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {
        s = s.charAt(0) + (n > 1 ? "." + s.slice(1) : "") + (e < 0 ? "e" : "e+") + e;
    } else if (e < 0) {
        for (;++e; ) s = "0" + s;
        s = "0." + s;
    } else if (e > 0) {
        if (++e > n) for (e -= n; e--; ) s += "0"; else if (e < n) s = s.slice(0, e) + "." + s.slice(e);
    } else if (n > 1) {
        s = s.charAt(0) + "." + s.slice(1);
    }
    return x.s < 0 && (!z || id == 4) ? "-" + s : s;
}

P.abs = function() {
    var x = new this.constructor(this);
    x.s = 1;
    return x;
};

P.cmp = function(y) {
    var isneg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e;
    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;
    if (i != j) return i;
    isneg = i < 0;
    if (k != l) return k > l ^ isneg ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l;
    for (i = -1; ++i < j; ) {
        if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
    }
    return k == l ? 0 : k > l ^ isneg ? 1 : -1;
};

P.div = function(y) {
    var x = this, Big = x.constructor, a = x.c, b = (y = new Big(y)).c, k = x.s == y.s ? 1 : -1, dp = Big.DP;
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);
    if (!b[0]) throw Error(DIV_BY_ZERO);
    if (!a[0]) return new Big(k * 0);
    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), rl = r.length, q = y, qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1;
    q.s = k;
    k = d < 0 ? 0 : d;
    bz.unshift(0);
    for (;rl++ < bl; ) r.push(0);
    do {
        for (n = 0; n < 10; n++) {
            if (bl != (rl = r.length)) {
                cmp = bl > rl ? 1 : -1;
            } else {
                for (ri = -1, cmp = 0; ++ri < bl; ) {
                    if (b[ri] != r[ri]) {
                        cmp = b[ri] > r[ri] ? 1 : -1;
                        break;
                    }
                }
            }
            if (cmp < 0) {
                for (bt = rl == bl ? b : bz; rl; ) {
                    if (r[--rl] < bt[rl]) {
                        ri = rl;
                        for (;ri && !r[--ri]; ) r[ri] = 9;
                        --r[ri];
                        r[rl] += 10;
                    }
                    r[rl] -= bt[rl];
                }
                for (;!r[0]; ) r.shift();
            } else {
                break;
            }
        }
        qc[qi++] = cmp ? n : ++n;
        if (r[0] && cmp) r[rl] = a[ai] || 0; else r = [ a[ai] ];
    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);
    if (!qc[0] && qi != 1) {
        qc.shift();
        q.e--;
    }
    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);
    return q;
};

P.eq = function(y) {
    return !this.cmp(y);
};

P.gt = function(y) {
    return this.cmp(y) > 0;
};

P.gte = function(y) {
    return this.cmp(y) > -1;
};

P.lt = function(y) {
    return this.cmp(y) < 0;
};

P.lte = function(y) {
    return this.cmp(y) < 1;
};

P.minus = P.sub = function(y) {
    var i, j, t, xlty, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;
    if (a != b) {
        y.s = -b;
        return x.plus(y);
    }
    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;
    if (!xc[0] || !yc[0]) {
        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);
    }
    if (a = xe - ye) {
        if (xlty = a < 0) {
            a = -a;
            t = xc;
        } else {
            ye = xe;
            t = yc;
        }
        t.reverse();
        for (b = a; b--; ) t.push(0);
        t.reverse();
    } else {
        j = ((xlty = xc.length < yc.length) ? xc : yc).length;
        for (a = b = 0; b < j; b++) {
            if (xc[b] != yc[b]) {
                xlty = xc[b] < yc[b];
                break;
            }
        }
    }
    if (xlty) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
    }
    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (;b--; ) xc[i++] = 0;
    for (b = i; j > a; ) {
        if (xc[--j] < yc[j]) {
            for (i = j; i && !xc[--i]; ) xc[i] = 9;
            --xc[i];
            xc[j] += 10;
        }
        xc[j] -= yc[j];
    }
    for (;xc[--b] === 0; ) xc.pop();
    for (;xc[0] === 0; ) {
        xc.shift();
        --ye;
    }
    if (!xc[0]) {
        y.s = 1;
        xc = [ ye = 0 ];
    }
    y.c = xc;
    y.e = ye;
    return y;
};

P.mod = function(y) {
    var ygtx, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;
    if (!y.c[0]) throw Error(DIV_BY_ZERO);
    x.s = y.s = 1;
    ygtx = y.cmp(x) == 1;
    x.s = a;
    y.s = b;
    if (ygtx) return new Big(x);
    a = Big.DP;
    b = Big.RM;
    Big.DP = Big.RM = 0;
    x = x.div(y);
    Big.DP = a;
    Big.RM = b;
    return this.minus(x.times(y));
};

P.plus = P.add = function(y) {
    var t, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;
    if (a != b) {
        y.s = -b;
        return x.minus(y);
    }
    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;
    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);
    xc = xc.slice();
    if (a = xe - ye) {
        if (a > 0) {
            ye = xe;
            t = yc;
        } else {
            a = -a;
            t = xc;
        }
        t.reverse();
        for (;a--; ) t.push(0);
        t.reverse();
    }
    if (xc.length - yc.length < 0) {
        t = yc;
        yc = xc;
        xc = t;
    }
    a = yc.length;
    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;
    if (b) {
        xc.unshift(b);
        ++ye;
    }
    for (a = xc.length; xc[--a] === 0; ) xc.pop();
    y.c = xc;
    y.e = ye;
    return y;
};

P.pow = function(n) {
    var x = this, one = new x.constructor(1), y = one, isneg = n < 0;
    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + "exponent");
    if (isneg) n = -n;
    for (;;) {
        if (n & 1) y = y.times(x);
        n >>= 1;
        if (!n) break;
        x = x.times(x);
    }
    return isneg ? one.div(y) : y;
};

P.round = function(dp, rm) {
    var Big = this.constructor;
    if (dp === UNDEFINED) dp = 0; else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);
    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);
};

P.sqrt = function() {
    var r, c, t, x = this, Big = x.constructor, s = x.s, e = x.e, half = new Big(.5);
    if (!x.c[0]) return new Big(x);
    if (s < 0) throw Error(NAME + "No square root");
    s = Math.sqrt(x + "");
    if (s === 0 || s === 1 / 0) {
        c = x.c.join("");
        if (!(c.length + e & 1)) c += "0";
        s = Math.sqrt(c);
        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
        r = new Big((s == 1 / 0 ? "1e" : (s = s.toExponential()).slice(0, s.indexOf("e") + 1)) + e);
    } else {
        r = new Big(s);
    }
    e = r.e + (Big.DP += 4);
    do {
        t = r;
        r = half.times(t.plus(x.div(t)));
    } while (t.c.slice(0, e).join("") !== r.c.slice(0, e).join(""));
    return round(r, Big.DP -= 4, Big.RM);
};

P.times = P.mul = function(y) {
    var c, x = this, Big = x.constructor, xc = x.c, yc = (y = new Big(y)).c, a = xc.length, b = yc.length, i = x.e, j = y.e;
    y.s = x.s == y.s ? 1 : -1;
    if (!xc[0] || !yc[0]) return new Big(y.s * 0);
    y.e = i + j;
    if (a < b) {
        c = xc;
        xc = yc;
        yc = c;
        j = a;
        a = b;
        b = j;
    }
    for (c = new Array(j = a + b); j--; ) c[j] = 0;
    for (i = b; i--; ) {
        b = 0;
        for (j = a + i; j > i; ) {
            b = c[j] + yc[i] * xc[j - i - 1] + b;
            c[j--] = b % 10;
            b = b / 10 | 0;
        }
        c[j] = (c[j] + b) % 10;
    }
    if (b) ++y.e; else c.shift();
    for (i = c.length; !c[--i]; ) c.pop();
    y.c = c;
    return y;
};

P.toExponential = function(dp) {
    return stringify(this, 1, dp, dp);
};

P.toFixed = function(dp) {
    return stringify(this, 2, dp, this.e + dp);
};

P.toPrecision = function(sd) {
    return stringify(this, 3, sd, sd - 1);
};

P.toString = function() {
    return stringify(this);
};

P.valueOf = P.toJSON = function() {
    return stringify(this, 4);
};

var Big = _Big_();

function add(x, y) {
    return new Big(x).plus(y).toString();
}

function subtract(x, y) {
    return new Big(x).minus(y).toString();
}

function multiply(x, y) {
    return new Big(x).times(y).toString();
}

function divide(x, y) {
    return new Big(x).div(y).toString();
}

function format(value, precision) {
    const bigValue = new Big(value);
    let stringValue = bigValue.toString();
    stringValue = scientificToNumber(stringValue);
    if (stringValue.includes(".")) {
        let strArray = stringValue.split(".");
        if (strArray[1].length >= precision) {
            if (0 == precision) {
                return strArray[0];
            } else {
                let truncate = strArray[1].substring(0, precision);
                return `${strArray[0]}.${truncate}`;
            }
        } else {
            let zeroNumber = precision - strArray[1].length;
            var str = "";
            for (let i = 0; i < zeroNumber; i++) {
                str += "0";
            }
            return `${stringValue}${str}`;
        }
    } else {
        if (0 == precision) {
            return stringValue;
        } else {
            let zeroNumber = precision;
            var str = "";
            for (let i = 0; i < zeroNumber; i++) {
                str += "0";
            }
            return `${stringValue}.${str}`;
        }
    }
}

function bignumber(arr) {
    if (Array.isArray(arr)) {
        return arr.map((value => Big(value).toFixed()));
    } else {
        return Big(arr).toFixed();
    }
}

function scientificToNumber(num) {
    if (/\d+\.?\d*e[\+\-]*\d+/i.test(num)) {
        let zero = "0";
        let parts = String(num).toLowerCase().split("e");
        let e = parts[1];
        let zeroLen = Math.abs(e);
        let sign = e / zeroLen;
        let beforeArr = parts[0].split(".");
        if (sign < 0) {
            num = zero + "." + new Array(zeroLen).join(zero) + beforeArr.join("");
        } else {
            let dec = beforeArr[1];
            if (dec) {
                zeroLen = zeroLen - dec.length;
                num = beforeArr.join("") + new Array(zeroLen + 1).join(zero);
            }
        }
    }
    return num;
}

var clickable = true;

const UnitType = {
    unitTypeSymbol: "symbol",
    unitTypeUSDT: "usdt"
};

const TabType = {
    tabTypePosition: "position",
    tabTypeOpenOrders: "openOrders",
    tabTypeOrders: "orders",
    tabTypeHistory: "history"
};

var upColorList;

var downColorList;

var commonData = {
    userSign: "",
    isTrader: 0,
    isFollower: 0,
    currentSymbol: "BTC-USDT",
    currentContractInfo: {},
    contractInfoData: [],
    contractH5Url: "",
    currencyRate: "6.4",
    currencyCharacter: "CNY",
    priceColorType: 0,
    colorMode: 0,
    OS: 0,
    appVersion: "",
    isInReview: 1,
    isLogin: 0,
    webUrl: "",
    language: "",
    linearSwapWsData: {},
    unitType: UnitType.unitTypeSymbol,
    lastUnitType: UnitType.unitTypeSymbol,
    openSingleMargin: true,
    curTabType: TabType.tabTypePosition,
    isChild: false,
    navbarHeight: 44,
    statusBarHeight: 44,
    hasTraderRight: 0
};

var userSign = "";

var tempTraderInfo = {};

function saveUserSign(tempUserSign) {
    userSign = tempUserSign;
}

function getUserSign() {
    return userSign;
}

function saveTraderInfo(info) {
    tempTraderInfo = info;
}

function getTraderInfo$1() {
    return tempTraderInfo;
}

async function subPriceWebSocket(type = "linearSwapWs") {
    await $nativeAPI.copyTradingBridge({
        action: "subPriceWebSocket",
        type: type
    });
}

async function unsubPriceWebSocket(type = "linearSwapWs") {
    await $nativeAPI.copyTradingBridge({
        action: "unsubPriceWebSocket",
        type: type
    });
}

function getModelByContractShortType(contractShortType) {
    for (let i = 0; i < commonData.contractInfoData.length; i++) {
        if (commonData.contractInfoData[i].contract_short_type == contractShortType) {
            return commonData.contractInfoData[i];
        }
    }
    return null;
}

function getModelByContractCode(contractCode) {
    for (let i = 0; i < commonData.contractInfoData.length; i++) {
        if (commonData.contractInfoData[i].contract_code == contractCode) {
            return commonData.contractInfoData[i];
        }
    }
    return null;
}

function getContractSize(contractInfo) {
    if (contractInfo) {
        return contractInfo.contract_size.toString();
    }
    return "";
}

function getOtherAmountPrecision(contractInfo) {
    if (contractInfo) {
        return parseInt(contractInfo.other_amount_precision);
    }
    return 4;
}

function getPriceTickPrecision(contractInfo) {
    if (null == contractInfo) {
        return 4;
    }
    var sizeString = bignumber(contractInfo.price_tick);
    return sizeString.split(".")[1].length;
}

function getContractSizePrecision(contractInfo) {
    if (null == contractInfo) {
        return 0;
    }
    if (parseFloat(contractInfo.contract_size) >= 1) {
        return 0;
    }
    var sizeString = contractInfo.contract_size.toString();
    return sizeString.split(".")[1].length;
}

function getFeeAmountPrecision(contractInfo) {
    if (contractInfo) {
        return parseInt(contractInfo.fee_amount_precision);
    }
    return 6;
}

function getOtherPrecision(contractInfo) {
    if (contractInfo) {
        return parseInt(contractInfo.other_amount_precision);
    }
    return 4;
}

async function sendRequest$2(path, params = {}, method = 0, hostType = 0, header = {}) {
    console.log(`request ${path}, params:${JSON.stringify(params)}`);
    if (hostType == 5 || hostType == 6) {
        header["Content-Type"] = "application/json";
    }
    const param = {
        path: path,
        method: method,
        hostType: hostType,
        header: header,
        params: params
    };
    try {
        var responseString = await $nativeAPI.request(JSON.stringify(param));
        var response = JSON.parse(responseString);
        var {code: code, data: data} = response;
        if (8 == hostType) {
            var status = response.status;
            var err_code = response.err_code;
            var err_msg = response.err_msg;
            if (status == "ok") {
                console.log(`request ${path} done`);
                if (typeof data === "number") {
                    let start = `"data":`;
                    let startIndex = responseString.indexOf(start);
                    let end = `,"ts":`;
                    let endIndex = responseString.indexOf(end);
                    let dataString = responseString.substring(startIndex + start.length, endIndex);
                    console.log(`data is typeof number, dataString = ${dataString}`);
                    return dataString;
                }
                return data;
            } else {
                console.log(`request failed, code=${err_code}, message=${err_msg}`);
                if (method != 0) {
                    showToast(err_msg);
                }
                return null;
            }
        } else if (code == 200) {
            if (data == null) {
                return response;
            }
            console.log(`request ${path} done`);
            return data;
        } else {
            console.log(`request failed, code=${code}`);
            let message = response.message;
            if (method != 0 && message) {
                showToast(message);
            }
            return null;
        }
    } catch (e) {
        console.log(`request error, error=${e}`);
        return null;
    }
}

async function sendRequestReturnCode(path, params = {}, method = 0, hostType = 0, header = {}) {
    console.log(`request ${path}, params:${JSON.stringify(params)}`);
    if (hostType == 5 || hostType == 6) {
        header["Content-Type"] = "application/json";
    }
    const param = {
        path: path,
        method: method,
        hostType: hostType,
        header: header,
        params: params
    };
    try {
        var responseString = await $nativeAPI.request(JSON.stringify(param));
        var response = JSON.parse(responseString);
        var {code: code, data: data} = response;
        if (8 == hostType) {
            var status = response.status;
            var err_code = response.err_code;
            var err_msg = response.err_msg;
            if (status == "ok") {
                return code;
            } else {
                console.log(`request failed, code=${err_code}, message=${err_msg}`);
                if (method != 0) {
                    showToast(err_msg);
                }
                return code;
            }
        } else if (code == 200) {
            console.log(`request ${path} done`);
            return code;
        } else {
            console.log(`request failed, code=${code}`);
            let message = response.message;
            if (method != 0 && message) {
                showToast(message);
            }
            return code;
        }
    } catch (e) {
        console.log(`request error, error=${e}`);
        return 0;
    }
}

async function sendRequestWithCache(path, callback, params = {}, method = 0, hostType = 0, header = {}, cacheKeyList = null) {
    var cacheKey = getCacheKey(path, params, cacheKeyList);
    const cache = await read("apiCache", cacheKey);
    if (cache && callback) {
        callback(cache, true);
    }
    const requestData = await sendRequest$2(path, params, method, hostType, header);
    await save("apiCache", cacheKey, requestData);
    if (requestData && callback) {
        callback(requestData, false);
    }
    return requestData;
}

function getCacheKey(path, params, cacheKeyList = null) {
    var cacheKey = "";
    if (cacheKeyList == null) {
        var paramStr = JSON.stringify(params);
        cacheKey = `${path}_${paramStr}_${commonData.language}_${commonData.colorMode}_${commonData.isLogin}`;
    } else if (cacheKeyList.length == 0) {
        cacheKey = `${path}_${commonData.language}_${commonData.colorMode}_${commonData.isLogin}`;
    } else {
        var cacheKeyListStr = cacheKeyList.join("_");
        cacheKey = `${path}_${cacheKeyListStr}_${commonData.language}_${commonData.colorMode}_${commonData.isLogin}`;
    }
    return cacheKey;
}

function getPriceColor(ratio) {
    if (ratio == null) {
        ratio = 0;
    }
    const ratio_abs = Math.abs(ratio);
    var colorLevel = 0;
    if (ratio_abs > 0 && ratio_abs < 3) {
        colorLevel = 1;
    } else if (ratio_abs >= 3 && ratio_abs < 8) {
        colorLevel = 2;
    } else if (ratio_abs >= 8) {
        colorLevel = 3;
    }
    var colorHexStr = null;
    if (ratio > 0) {
        colorHexStr = upColorList[colorLevel];
    } else {
        colorHexStr = downColorList[colorLevel];
    }
    return colorHexStr;
}

function formatPrecision(value, precision) {
    if (value == "--" || value == null || value == "") {
        return "--";
    }
    try {
        const result = format(value, precision);
        return result;
    } catch (e) {
        console.log(e);
        return value.toFixed(precision);
    }
}

async function openURL(url) {
    if (!clickable) {
        return;
    }
    console.log(`open url:`, url);
    if (url && url != null && url.length > 0) {
        await $nativeAPI.openRoute(url);
    }
    clickable = false;
    setTimeout((() => {
        clickable = true;
    }), 1e3);
}

async function openPage(page, type = "native", params = {}) {
    await $nativeAPI.copyTradingBridge({
        action: "openPage",
        type: type,
        page: page,
        params: JSON.stringify(params)
    });
}

async function showToast(msg) {
    await $nativeAPI.hbToast(msg);
}

async function save(module, key, data) {
    await $nativeAPI.storage({
        action: "save",
        name: module,
        key: key,
        data: JSON.stringify(data)
    });
}

async function read(module, key) {
    const data = await $nativeAPI.storage({
        action: "read",
        name: module,
        key: key
    });
    if (data && data != "") {
        return JSON.parse(data);
    }
    return null;
}

async function clear(module, key) {
    await $nativeAPI.storage({
        action: "clear",
        name: module,
        key: key
    });
}

async function sendCommonConfig$1(param) {
    console.log(param);
    let savedSymbol = await read("copyTrading", "currentCopyTradingSymbol");
    if (null == savedSymbol || 0 == savedSymbol.length) {
        commonData.currentSymbol = "BTC-USDT";
    } else {
        commonData.currentSymbol = savedSymbol;
    }
    commonData.contractH5Url = param.contractH5Url;
    commonData.currencyRate = param.currencyRate;
    if (param.currencyRate != null && 0 == param.currencyRate.length) {
        commonData.currencyRate = "1";
    }
    commonData.currencyCharacter = param.currencyCharacter;
    commonData.priceColorType = parseInt(param.priceColorType);
    commonData.colorMode = parseInt(param.colorMode);
    commonData.OS = parseInt(param.OS);
    commonData.appVersion = param.appVersion;
    commonData.isInReview = parseInt(param.isInReview);
    commonData.language = param.language;
    commonData.webUrl = param.webUrl;
    let swapUnitType = await read("copyTrading", "LINEAR_SWAP");
    commonData.unitType = swapUnitType;
    commonData.lastUnitType = swapUnitType;
    commonData.isChild = param.isChild;
    var redColorList = [ "#ADB0B2", "#E94359", "#DE2941", "#CE142B" ];
    var greenColorList = [ "#ADB0B2", "#00A171", "#008B61", "#006245" ];
    if (parseInt(commonData.priceColorType) == 0) {
        upColorList = redColorList;
        downColorList = greenColorList;
    } else {
        upColorList = greenColorList;
        downColorList = redColorList;
    }
    commonData.navbarHeight = param.navbarHeight;
    commonData.statusBarHeight = param.statusBarHeight;
}

function getUpDownColor(isUpper = true, level = 1) {
    const lev = level < 4 ? level : 0;
    if (isUpper) {
        return upColorList[lev];
    }
    return downColorList[lev];
}

let symbolDescMap = {};

function symbolDesc(symbol) {
    if (!symbolDescMap.hasOwnProperty(symbol)) {
        symbolDescMap[symbol] = $i18n.$intercept.n_contract_swap_trade_name(symbol.replace("-", ""));
    }
    return symbolDescMap[symbol];
}

function moduleDefine(moduleName, startFunction, defaultDataFunction) {
    console.log(`loadModule`, moduleName);
    $data[moduleName] = defaultDataFunction();
    $event[moduleName] = {
        start: startFunction
    };
    return {
        moduleEvent: $event[moduleName],
        moduleData: $data[moduleName]
    };
}

Date.prototype.Format = function(fmt) {
    var o = {
        "M+": this.getMonth() + 1,
        "d+": this.getDate(),
        "h+": this.getHours(),
        "m+": this.getMinutes(),
        "s+": this.getSeconds(),
        "q+": Math.floor((this.getMonth() + 3) / 3),
        S: this.getMilliseconds()
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o) if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    return fmt;
};

function showLoading(isShow = true) {
    $nativeAPI.showLoading(isShow ? 1 : 0);
}

async function subKeybordSocket(show) {
    await $nativeAPI.copyTradingBridge({
        action: show,
        type: "tradeLimitKeyboard"
    });
}

function coinUnit(symbol) {
    coin = "";
    unit = "";
    if (symbol && symbol != "undefined" && symbol != null) {
        const coinUnit = symbol.split("-");
        if (coinUnit && coinUnit.length > 0) {
            coin = coinUnit[0];
            if (coinUnit.length > 1) {
                unit = coinUnit[1];
            }
        }
    }
    return {
        coin: coin,
        unit: unit
    };
}

function getPNGIconURLByCurrency(currency) {
    let baseUrl = commonData.webUrl ? commonData.webUrl : "";
    return `${baseUrl}/-/x/hb/p/api/contents/currency/icon_png/${currency.toLowerCase()}.png`;
}

let clickTimer = 0;

function clickThrottle(interval = 2e3) {
    try {
        let now = (new Date).getTime();
        let timer = clickTimer;
        console.log(`common clickThrottle now = ${now}`);
        console.log(`common clickThrottle timer = ${timer}`);
        if (now - timer < interval) {
            console.log(`common clickThrottle double click`);
            return false;
        } else {
            clickTimer = now;
            return true;
        }
    } catch (e) {
        console.log(`common clickThrottle error = ${e}`);
    }
}

function parseBoolean(string) {
    switch (String(string).toLowerCase()) {
      case "true":
      case "1":
      case "yes":
      case "y":
        return true;

      case "false":
      case "0":
      case "no":
      case "n":
        return false;

      default:
        return undefined;
    }
}

function notNull(string) {
    if (string == null || string == "") {
        return false;
    }
    return true;
}

async function analytics$1(event = "", properties = {}) {
    const propertiesJson = JSON.stringify(properties);
    console.log(`analytics event: ${event}, propertiesJson = ${propertiesJson}`);
    var map = {
        event: event,
        properties: propertiesJson
    };
    await $nativeAPI.analytics(map);
}

async function showDrawer(symbols) {
    await $nativeAPI.copyTradingBridge({
        action: "showDrawer",
        symbolList: JSON.stringify(symbols)
    });
}

function convertNum(num_str) {
    var resValue = "", power = "", result = null, dotIndex = 0, resArr = [], sym = "";
    var numStr = num_str.toString();
    if (numStr[0] == "-") {
        numStr = numStr.substr(1);
        sym = "-";
    }
    console.log(numStr);
    if (numStr.indexOf("E") != -1 || numStr.indexOf("e") != -1) {
        var regExp = new RegExp("^(((\\d+.?\\d+)|(\\d+))[Ee]{1}((-(\\d+))|(\\d+)))$", "ig");
        result = regExp.exec(numStr);
        console.log(result);
        if (result != null) {
            resValue = result[2];
            power = result[5];
            result = null;
        }
        if (!resValue && !power) {
            return false;
        }
        dotIndex = resValue.indexOf(".");
        resValue = resValue.replace(".", "");
        resArr = resValue.split("");
        if (Number(power) >= 0) {
            var subres = resValue.substr(dotIndex);
            power = Number(power);
            for (var i = 0; i < power - subres.length; i++) {
                resArr.push("0");
            }
            if (power - subres.length < 0) {
                resArr.splice(dotIndex + power, 0, ".");
            }
        } else {
            power = power.replace("-", "");
            power = Number(power);
            for (var i = 0; i <= power - dotIndex; i++) {
                resArr.unshift("0");
            }
            var n = power - dotIndex >= 0 ? 1 : -(power - dotIndex);
            resArr.splice(n, 0, ".");
        }
    }
    resValue = resArr.join("");
    console.log(sym + resValue);
    return sym + resValue;
}

function replaceAll(str, oldStr, newStr) {
    while (str.indexOf(oldStr) >= 0) {
        str = str.replace(oldStr, newStr);
    }
    return str;
}

async function uploadLog(tag, info = "") {
    var map = {
        tag: tag,
        info: info
    };
    await $nativeAPI.uploadLog(map);
}

async function formatThousands(number) {
    if (number === "--") {
        return number;
    }
    const params = {
        type: 53,
        number: number
    };
    return await $nativeAPI.currencyCommon(JSON.stringify(params));
}

async function formatDecimal(str, precision, needThousands) {
    if (str.length === 0 || isNaN(str)) {
        return "0";
    }
    str += "";
    if (str.includes(".")) {
        var decimal = str.split(".")[1];
        if (decimal && decimal.length > precision) {
            str = str.replace("." + decimal, "." + decimal.slice(0, precision));
            return needThousands ? await formatThousands(str) : str;
        }
    }
    return needThousands ? await formatThousands(str + "") : str + "";
}

function start$O() {}

function defaultData$O() {
    return {};
}

const {moduleData: moduleData$N, moduleEvent: moduleEvent$N} = moduleDefine("tradeLimitAlert", start$O, defaultData$O);

function close$3() {
    moduleData$N.alertPopShow = "false";
}

moduleEvent$N.confirm = function() {
    close$3();
};

function calculateOpenAvailable(usdtAvailable, leverRate, price, contractSizePrecision, otherAmountPrecision) {
    if (usdtAvailable == "" || leverRate == "--") {
        return "";
    }
    try {
        var leverUsdt = multiply(usdtAvailable, leverRate);
        if (commonData.unitType == UnitType.unitTypeUSDT) {
            return formatPrecision(leverUsdt, otherAmountPrecision);
        } else {
            var coinVolume = divide(leverUsdt, price);
            return formatPrecision(coinVolume, contractSizePrecision);
        }
    } catch (e) {
        console.log(`calculateOpenAvailable error=${e}`);
    }
}

function calcuateMargin(volume, contractSize, leverRate, price, otherAmountPrecision) {
    try {
        var zhangFloat = divide(volume, contractSize);
        if (commonData.unitType == UnitType.unitTypeUSDT) {
            var coinVolume = divide(volume, price);
            zhangFloat = divide(coinVolume, contractSize);
        }
        var zhangAmount = formatPrecision(zhangFloat, 0);
        var realCoinVolume = multiply(zhangAmount, contractSize);
        var usdtAmount = multiply(realCoinVolume, price);
        var marginAmount = divide(usdtAmount, leverRate);
        return formatPrecision(marginAmount, 4);
    } catch (e) {
        console.log(`calcuateMargin error=${e}`);
    }
}

function calculateUsdtVolume(volume, contractSize, price, otherAmountPrecision) {
    if (price == "" || volume == "") {
        return "";
    }
    var zhangFloat = divide(volume, contractSize);
    if (commonData.unitType == UnitType.unitTypeUSDT) {
        var coinVolume = divide(volume, price);
        zhangFloat = divide(coinVolume, contractSize);
    }
    var zhangAmount = formatPrecision(zhangFloat, 0);
    var realCoinVolume = multiply(zhangAmount, contractSize);
    if (commonData.unitType == UnitType.unitTypeUSDT) {
        var contractSizeArr = contractSize.split(".");
        if (contractSizeArr.length == 2) {
            var precision = contractSize.split(".")[1].length;
            var formatted = formatPrecision(realCoinVolume, precision);
            return `≈${formatted} `;
        }
        return `≈${realCoinVolume} `;
    } else {
        var usdtAmount = multiply(realCoinVolume, price);
        var formatted = formatPrecision(usdtAmount, otherAmountPrecision);
        return `≈${formatted} `;
    }
}

function calculateLawCurrencyVolume(price) {
    let rate = commonData.currencyRate;
    if (price == "" || rate == "") {
        return "";
    }
    try {
        let character = commonData.currencyCharacter;
        var lawAmount = multiply(price, rate);
        var handledAmount = handleFiat(lawAmount.toString(), character);
        return `≈${handledAmount} ${character}`;
    } catch (e) {
        console.log(`copyTrading---\x3e> calculateLawCurrencyVolume e = ${e}`);
    }
    return "";
}

function getNoneZeroPosition(numStr) {
    for (let i = 0; i < numStr.length; i++) {
        if (parseInt(numStr[i] != 0)) {
            return i - 2;
        }
    }
    return 0;
}

function handleFiat(fiatEquivalent, character) {
    var precision = 2;
    if (character == "KRW" || character == "RUB") {
        if (parseFloat(fiatEquivalent) < 1) {
            precision = getNoneZeroPosition(fiatEquivalent) + 3;
        } else {
            precision = 1;
        }
    } else {
        if (parseFloat(fiatEquivalent) < .1) {
            precision = getNoneZeroPosition(fiatEquivalent) + 3;
        }
    }
    return formatPrecision(fiatEquivalent, precision);
}

function chooseBuyPrice(price, latestPrice, isOpponentPrice, sellFirstPrice) {
    var realPrice = isOpponentPrice ? latestPrice : price;
    if (!isOpponentPrice && parseFloat(realPrice) > parseFloat(sellFirstPrice)) {
        return sellFirstPrice;
    }
    return realPrice;
}

function chooseSellPrice(price, latestPrice, isOpponentPrice, buyFirstPrice) {
    var realPrice = isOpponentPrice ? latestPrice : price;
    if (!isOpponentPrice && parseFloat(realPrice) > parseFloat(buyFirstPrice)) {
        return buyFirstPrice;
    }
    return realPrice;
}

function getVolume(volume, price, contractSize, unitType) {
    if (price == "" || volume == "") {
        return "";
    }
    if (unitType == UnitType.unitTypeUSDT) {
        return formatPrecision(multiply(volume, price), 4);
    } else {
        return formatPrecision(volume, contractSize);
    }
}

function getCoinVolume(volume, price, contractSize, unitType) {
    if (price == "" || volume == "") {
        return "";
    }
    if (unitType == UnitType.unitTypeUSDT) {
        let coinVolume = divide(volume, price);
        return formatPrecision(coinVolume, contractSize);
    } else {
        return formatPrecision(volume, contractSize);
    }
}

function getMinVolume(price, contractSize, unitType) {
    if (unitType == UnitType.unitTypeUSDT) {
        if (price == "") {
            return "";
        }
        let usdtVolume = multiply(contractSize, price);
        return formatPrecision(usdtVolume, 4);
    } else {
        return contractSize;
    }
}

function getProfit(openPrice, latestPrice, amount, direction) {
    if (openPrice == "" || latestPrice == "" || amount == "") {
        return "";
    }
    let delta = "";
    if (direction == "long") {
        delta = subtract(latestPrice, openPrice);
    } else {
        delta = subtract(openPrice, latestPrice);
    }
    let profit = formatPrecision(multiply(delta, amount), 4);
    return profit;
}

function getProfitRate(openPrice, latestPrice, amount, direction, leverRate) {
    if (openPrice == "" || latestPrice == "" || amount == "" || leverRate == "") {
        return "";
    }
    let delta = "";
    if (direction == "long") {
        delta = subtract(latestPrice, openPrice);
    } else {
        delta = subtract(openPrice, latestPrice);
    }
    let ratio = multiply(divide(delta, openPrice), leverRate);
    let profitRate = multiply(ratio, 100);
    let profitRateStr = formatPrecision(profitRate, 2);
    if (Number.parseFloat(profitRate) >= 0) {
        return `+${profitRateStr}%`;
    } else {
        return `${profitRateStr}%`;
    }
}

function getExpectedIncome(coinAmount, latestPrice, ratio, leverRate) {
    if (coinAmount == "" || latestPrice == "" || ratio == "") {
        return "";
    }
    let positionvalue = "";
    if (commonData.unitType == UnitType.unitTypeUSDT) {
        positionvalue = coinAmount;
    } else {
        positionvalue = multiply(coinAmount, latestPrice);
    }
    let expectedIncome = formatPrecision(multiply(divide(positionvalue, leverRate), divide(ratio, 100)), 4);
    return expectedIncome;
}

function getTriggerPrice(price, directionType, stopType, ratio, leverRate, priceTickPrecision = 4) {
    if (price == "" || ratio == "" || leverRate == "") {
        return "--";
    }
    let actualRatio = divide(divide(ratio, 100), leverRate);
    let actualRatioPrice = multiply(actualRatio, price);
    let triggerPrice = "--";
    if (directionType === 1 && stopType === 1 || directionType === 2 && stopType === 2) {
        triggerPrice = add(price, actualRatioPrice);
    } else {
        triggerPrice = subtract(price, actualRatioPrice);
    }
    return formatPrecision(triggerPrice, priceTickPrecision);
}

const Edit_Board_SelectColor$5 = "#0173E5";

const Edit_Board_NomalColor$3 = "@color/KBaseColorInputBackground";

const Edit_Board_ErrorColor$2 = "#E94359";

const Price_STR_DEFAULT = "--";

const EditType = {
    TakeProfit: "TakeProfit",
    StopLoss: "StopLoss"
};

const Direction = {
    Buy: "long",
    Sell: "short"
};

var orderParamData = {};

var requesting$1 = false;

var params = {
    orderParam: {},
    id: "",
    stopProfitRate: "",
    stopLossRate: "",
    precisionPriceFloat: 4
};

function start$N() {}

function defaultData$N() {
    return {
        currentFocusIndex: -1
    };
}

const {moduleData: moduleData$M, moduleEvent: moduleEvent$M} = moduleDefine("tradeLimit", start$N, defaultData$N);

function show$2(orderParam) {
    subKeyBord$2(true);
    params.orderParam = orderParam;
    resetData$2();
    configInputBorderColors$1();
    convertOrderParam(params.orderParam);
    showDisPlayData$1(params.orderParam);
}

function resetData$2() {
    clearTips(EditType.TakeProfit);
    clearTips(EditType.StopLoss);
    clearExpectedRevenuePrice(EditType.TakeProfit);
    clearExpectedRevenuePrice(EditType.StopLoss);
    moduleData$M.takeProfit1Focus = "false";
    moduleData$M.takeProfit2Focus = "false";
    moduleData$M.stopLoss1Focus = "false";
    moduleData$M.stopLoss2Focus = "false";
    moduleData$M.takeProfitPrice = "";
    moduleData$M.takeProfitRatio = "";
    moduleData$M.stopLossPrice = "";
    moduleData$M.stopLossRatio = "";
    moduleData$M.currentFocusIndex = -1;
}

function clearTips(type) {
    switch (type) {
      case EditType.TakeProfit:
        moduleData$M.takeProfitPriceErrorVisible = getVisibilityStatus(false);
        moduleData$M.takeProfitPriceError = "";
        break;

      case EditType.StopLoss:
        moduleData$M.stopLossPriceErrorVisible = getVisibilityStatus(false);
        moduleData$M.stopLossPriceError = "";
        break;
    }
}

function clearExpectedRevenuePrice(type) {
    const primaryTextColor = commonData.colorMode === 1 ? "#D7DEEB" : "#1C1C1E";
    const secondaryTextColor = commonData.colorMode === 1 ? "#5E5E61" : "#8A8A8E";
    let priceDesc = Price_STR_DEFAULT;
    const input = $i18n.$intercept.n_copy_trading_expected_revenue(priceDesc, priceDesc);
    let key = `${priceDesc} USDT`;
    let arr = input.split(key);
    console.log(arr);
    let rep = new Array;
    for (let i in arr) {
        rep[i] = formatRichText(secondaryTextColor, arr[i]);
    }
    let priceDescAttr = formatRichText(secondaryTextColor, priceDesc);
    let usdtAttr = formatRichText(primaryTextColor, "USDT");
    let fullSplit = `${priceDescAttr} ${usdtAttr}`;
    let result = rep.join(fullSplit);
    console.log(result);
    switch (type) {
      case EditType.TakeProfit:
        moduleData$M.takeProfitExpectedRichText = result;
        break;

      case EditType.StopLoss:
        moduleData$M.stopLossExpectedRichText = result;
        break;
    }
}

function configInputBorderColors$1() {
    moduleData$M.takeProfit1BoardColor = Edit_Board_NomalColor$3;
    moduleData$M.takeProfit2BoardColor = Edit_Board_NomalColor$3;
    moduleData$M.stopLoss1BoardColor = Edit_Board_NomalColor$3;
    moduleData$M.stopLoss2BoardColor = Edit_Board_NomalColor$3;
}

function convertOrderParam(orderParam) {
    params.id = orderParam.id;
    orderParamData.direction = orderParam.direction;
    orderParamData.positionModel = orderParam.positionModel;
    orderParamData.lever = convertToNumber(orderParam.lever);
    orderParamData.marketPrice = convertToNumber(orderParam.marketPrice);
    orderParamData.explosionPrice = convertToNumber(orderParam.explosionPrice);
    orderParamData.openPrice = convertToNumber(orderParam.openPrice);
    orderParamData.openAmount = orderParam.openAmount;
    orderParamData.symbol = orderParam.symbol;
    orderParamData.tpslRiskRate = orderParam.tpslRiskRate;
    orderParamData.tpslRiskRateDesc = orderParam.tpslRiskRateDesc ? orderParam.tpslRiskRateDesc : "";
    orderParamData.modeType = orderParam.modeType;
    const stopProfitPrice = convertToNumber(orderParam.stopProfitPrice);
    orderParamData.stopProfitPrice = stopProfitPrice > 0 ? orderParam.stopProfitPrice : "";
    const stopLossPrice = convertToNumber(orderParam.stopLossPrice);
    orderParamData.stopLossPrice = stopLossPrice > 0 ? orderParam.stopLossPrice : "";
    requesting$1 = false;
    let currentContractInfo = getModelByContractShortType(orderParam.symbol);
    moduleData$M.precisionPriceFloat = getPriceTickPrecision(currentContractInfo);
}

function refreshTradeLimitData() {
    try {
        console.log(`wp refreshTrade------LimitData = ${params.orderParam}`);
        if (params.orderParam != null && params.orderParam.symbol != "undefined") {
            showDisPlayData$1(params.orderParam);
        }
    } catch (e) {
        console.log(`refreshTradeLimitData------e = ${e}`);
    }
}

function showDisPlayData$1(orderParam) {
    moduleData$M.profitTitle = `${$i18n.n_copy_trading_profit}(USDT)`;
    moduleData$M.lastPriceTitle = `${$i18n.n_copy_trading_last_price}(USDT)`;
    moduleData$M.openPirceTitle = `${$i18n.n_contract_avg_position_price}(USDT)`;
    if (orderParamData.modeType === 1) {
        moduleData$M.storehousePriceTitle = `${$i18n.n_copy_trading_storehouse_price}(USDT)`;
    } else {
        moduleData$M.storehousePriceTitle = orderParam.explosionPriceTitle;
    }
    moduleData$M.tabBuyTextColor = orderParam.directionColor;
    moduleData$M.symbolName = orderParam.symbolDesc;
    moduleData$M.modeTypeName = orderParam.modeTypeName;
    moduleData$M.leverDesc = orderParam.leverDesc;
    moduleData$M.directionDesc = orderParam.directionDesc;
    moduleData$M.profit = orderParam.openProfit;
    moduleData$M.profitRatio = orderParam.openProfitRate;
    moduleData$M.profitColor = getCurrentOpenProfitColor(orderParam.openProfit);
    moduleData$M.marketPriceDesc = orderParam.marketPrice;
    moduleData$M.explosionPriceDesc = orderParam.explosionPrice;
    moduleData$M.openPriceDesc = orderParam.openPriceStr;
    let unit = coinUnit(orderParam.symbol);
    try {
        let data = commonData.linearSwapWsData[orderParam.symbol];
        let currentContractInfo = getModelByContractShortType(orderParam.symbol);
        let futureNumber = getVolume(orderParam.openAmount, data.price, getContractSizePrecision(currentContractInfo), commonData.unitType);
        moduleData$M.openAmountTitle = `${$i18n.n_option_market_list_setting_position_volume}(${commonData.unitType === UnitType.unitTypeUSDT ? unit.unit : unit.coin})`;
        moduleData$M.openAmountDesc = `${futureNumber}`;
        if (data && data != "undefined" && data != null && data.price != null || data.price != "" || data.price != "undefined" && data.price > 0) {
            moduleData$M.marketPriceDesc = data.price;
            let profit = getProfit(orderParam.openPrice, data.price, orderParam.openAmount, orderParam.direction);
            if (parseFloat(profit) >= 0) {
                moduleData$M.profitColor = getUpDownColor();
                moduleData$M.profit = `+${profit}`;
            } else if (isNaN(parseFloat(profit))) {
                moduleData$M.profitColor = "@color/kColorSecondaryText";
                moduleData$M.profit = "--";
            } else {
                moduleData$M.profitColor = getUpDownColor(false);
                moduleData$M.profit = profit;
            }
            let profitRate = getProfitRate(orderParam.openPrice, data.price, orderParam.openAmount, orderParam.direction, orderParam.lever);
            if (profitRate != "") {
                moduleData$M.profitRatio = profitRate;
            } else {
                moduleData$M.profitRatio = "--";
            }
        }
    } catch (e) {
        console.log(`openAmountDesc--e = ${e}`);
    }
    if (orderParamData.direction === "long") {
        moduleData$M.buyTitle = `${$i18n.n_copy_trading_trade_limit_buy}`;
    } else {
        moduleData$M.buyTitle = `${$i18n.n_copy_trading_trade_limit_sell}`;
    }
    moduleData$M.ruleVisibility = getVisibilityStatus(false);
    moduleData$M.rule = configRule();
    moduleData$M.confirmBackgroud = chekDoneButtonEnable$1() ? "#0173E5" : "@color/eButtonUnenabledBgColor";
}

function priceTextNumValidate(text) {
    let arr = text.split(".");
    let number1 = arr[0];
    if (number1.length > 10) {
        return false;
    }
    if (arr.length === 2) {
        let number2 = arr[1];
        if (number2.length > moduleData$M.precisionPriceFloat) {
            return false;
        }
    }
    return true;
}

function priceTextFilter(text) {
    let arr = text.split(".");
    if (arr.length === 1) {
        let number1 = arr[0];
        if (number1.length > 10) {
            number1 = number1.substring(0, 10);
        }
        return number1;
    } else if (arr.length === 2) {
        let number1 = arr[0];
        if (number1.length > 10) {
            number1 = number1.substring(0, 10);
        }
        let number2 = arr[1];
        if (number2.length > moduleData$M.precisionPriceFloat) {
            number2 = number2.substring(0, moduleData$M.precisionPriceFloat);
        }
        let str = `${number1}.${number2}`;
        return scientificToNumber(str);
    } else {
        return text;
    }
}

function ratioTextNumValidate(text) {
    let arr = text.split(".");
    let number1 = arr[0];
    if (number1.length > 10) {
        return false;
    }
    if (arr.length === 2) {
        let number2 = arr[1];
        if (number2.length > 2) {
            return false;
        }
    }
    return true;
}

function ratioTextFilter(text) {
    let arr = text.split(".");
    if (arr.length === 1) {
        let number1 = arr[0];
        if (number1.length > 10) {
            number1 = number1.substring(0, 2);
        }
    } else if (arr.length === 2) {
        let number1 = arr[0];
        if (number1.length > 10) {
            number1 = number1.substring(0, 2);
        }
        let number2 = arr[1];
        if (number2.length > 2) {
            number2 = number2.substring(0, 2);
        }
        let number = `${number1}.${number2}`;
        return number;
    } else {
        return text;
    }
}

moduleEvent$M.onTextChange = async function(key, text) {
    switch (key) {
      case 1:
        if (moduleData$M.currentFocusIndex != 2) {
            if (text === "") {
                moduleData$M.takeProfitRatio = "";
                params.stopProfitRate = "";
                clearTips(EditType.TakeProfit);
                clearExpectedRevenuePrice(EditType.TakeProfit);
                cleanErrorBoardColor(key);
            } else {
                if (priceTextNumValidate(text)) {
                    calculationtInputRatio(EditType.TakeProfit, key);
                } else {
                    let price = priceTextFilter(text);
                    moduleData$M.takeProfitPrice = price;
                    return;
                }
            }
        }
        break;

      case 2:
        if (moduleData$M.currentFocusIndex != 1) {
            if (text === "") {
                moduleData$M.takeProfitRatio = text;
                moduleData$M.takeProfitPrice = "";
                params.stopProfitRate = "";
                clearTips(EditType.TakeProfit);
                clearExpectedRevenuePrice(EditType.TakeProfit);
                cleanErrorBoardColor(1);
            } else {
                if (ratioTextNumValidate(text)) {
                    let result = ratioInputMaxCheck(EditType.TakeProfit, text);
                    moduleData$M.takeProfitRatio = result;
                    calculationInputPrice(EditType.TakeProfit, convertToNumber(result), key);
                } else {
                    let ratio = ratioTextFilter(text);
                    moduleData$M.takeProfitRatio = ratio;
                    return;
                }
            }
        }
        break;

      case 3:
        if (moduleData$M.currentFocusIndex != 4) {
            if (text === "") {
                moduleData$M.stopLossRatio = "";
                params.stopLossRate = "";
                clearTips(EditType.StopLoss);
                clearExpectedRevenuePrice(EditType.StopLoss);
                cleanErrorBoardColor(key);
            } else {
                if (priceTextNumValidate(text)) {
                    calculationtInputRatio(EditType.StopLoss, key);
                } else {
                    let price = priceTextFilter(text);
                    moduleData$M.stopLossPrice = price;
                    return;
                }
            }
        }
        break;

      case 4:
        if (moduleData$M.currentFocusIndex != 3) {
            if (text === "") {
                moduleData$M.stopLossRatio = text;
                moduleData$M.stopLossPrice = "";
                params.stopLossRate = "";
                clearTips(EditType.StopLoss);
                clearExpectedRevenuePrice(EditType.StopLoss);
                cleanErrorBoardColor(3);
            } else {
                if (ratioTextNumValidate(text)) {
                    let result = ratioInputMaxCheck(EditType.StopLoss, text);
                    moduleData$M.stopLossRatio = result;
                    calculationInputPrice(EditType.StopLoss, convertToNumber(result), key);
                } else {
                    let ratio = ratioTextFilter(text);
                    moduleData$M.stopLossRatio = ratio;
                    return;
                }
            }
        }
        break;
    }
    moduleData$M.confirmBackgroud = chekDoneButtonEnable$1() ? "#0173E5" : "@color/eButtonUnenabledBgColor";
};

function calculationtInputRatio(type, index) {
    let expectedRevenue = 0;
    switch (type) {
      case EditType.TakeProfit:
        let takeProfitPrice = convertToNumber(moduleData$M.takeProfitPrice);
        switch (orderParamData.direction) {
          case Direction.Buy:
            if (checkBuyValid(type) === true && takeProfitPrice > 0) {
                let ratio = linkageRatioFormula(moduleData$M.takeProfitPrice, orderParamData.openPrice, orderParamData.openPrice, orderParamData.lever);
                moduleData$M.takeProfitRatio = ratioInputMaxCheck(type, formatRatioForDisplay(ratio));
                let paramsRatio = divide(moduleData$M.takeProfitRatio, 100);
                params.stopProfitRate = formatRatioForRequestParam(paramsRatio);
                expectedRevenue = calculationExpectedRevenue(type, takeProfitPrice);
                configDislayExpectedRevenuePrice(type, takeProfitPrice, expectedRevenue);
                cleanErrorBoardColor(index);
            } else {
                takeProfitPrice = 0;
                moduleData$M.takeProfitRatio = "";
                params.stopProfitRate = "";
                showErrorBoardColor(index);
                clearExpectedRevenuePrice(type);
            }
            break;

          case Direction.Sell:
            if (checkSellVaild(type) === true && takeProfitPrice > 0) {
                let ratio = linkageRatioFormula(orderParamData.openPrice, takeProfitPrice, orderParamData.openPrice, orderParamData.lever);
                moduleData$M.takeProfitRatio = ratioInputMaxCheck(type, formatRatioForDisplay(ratio));
                let paramsRatio = divide(moduleData$M.takeProfitRatio, 100);
                params.stopProfitRate = formatRatioForRequestParam(paramsRatio);
                expectedRevenue = calculationExpectedRevenue(type, takeProfitPrice);
                configDislayExpectedRevenuePrice(type, takeProfitPrice, expectedRevenue);
                cleanErrorBoardColor(index);
            } else {
                takeProfitPrice = 0;
                moduleData$M.takeProfitRatio = "";
                params.stopProfitRate = "";
                showErrorBoardColor(index);
                clearExpectedRevenuePrice(type);
            }
            break;
        }
        break;

      case EditType.StopLoss:
        let stopLossPrice = convertToNumber(moduleData$M.stopLossPrice);
        switch (orderParamData.direction) {
          case Direction.Buy:
            if (checkBuyValid(type) === true && stopLossPrice > 0) {
                let ratio = linkageRatioFormula(orderParamData.openPrice, stopLossPrice, orderParamData.openPrice, orderParamData.lever);
                moduleData$M.stopLossRatio = ratioInputMaxCheck(type, formatRatioForDisplay(ratio));
                let paramsRatio = divide(moduleData$M.stopLossRatio, 100);
                params.stopLossRate = formatRatioForRequestParam(paramsRatio);
                expectedRevenue = calculationExpectedRevenue(type, stopLossPrice);
                configDislayExpectedRevenuePrice(type, stopLossPrice, expectedRevenue);
                cleanErrorBoardColor(index);
            } else {
                stopLossPrice = 0;
                moduleData$M.stopLossRatio = "";
                params.stopLossRate = "";
                showErrorBoardColor(index);
                clearExpectedRevenuePrice(type);
            }
            break;

          case Direction.Sell:
            if (checkSellVaild(type) === true && stopLossPrice > 0) {
                let ratio = linkageRatioFormula(stopLossPrice, orderParamData.openPrice, orderParamData.openPrice, orderParamData.lever);
                moduleData$M.stopLossRatio = ratioInputMaxCheck(type, formatRatioForDisplay(ratio));
                let paramsRatio = divide(moduleData$M.stopLossRatio, 100);
                params.stopLossRate = formatRatioForRequestParam(paramsRatio);
                expectedRevenue = calculationExpectedRevenue(type, stopLossPrice);
                configDislayExpectedRevenuePrice(type, stopLossPrice, expectedRevenue);
                cleanErrorBoardColor(index);
            } else {
                stopLossPrice = 0;
                moduleData$M.stopLossRatio = "";
                params.stopLossRate = "";
                showErrorBoardColor(index);
                clearExpectedRevenuePrice(type);
            }
            break;
        }
        break;
    }
}

function linkageRatioFormula(priceX, priceY, openPrice, lever) {
    let step1Num = subtract(priceX, priceY);
    let step2Num = divide(step1Num, openPrice);
    let step3Num = multiply(step2Num, lever);
    return step3Num;
}

function formatRatioForDisplay(percentage) {
    let floatValue;
    if (typeof percentage === "number" || typeof percentage === "string") {
        floatValue = multiply(percentage, 100);
    } else {
        return "";
    }
    if (isNaN(floatValue)) {
        return "";
    }
    const decimalIndex = floatValue.indexOf(".");
    let formattedNumber;
    if (decimalIndex !== -1) {
        const decimalDigits = floatValue.substring(decimalIndex + 1);
        const decimalPart = decimalDigits.length > 2 ? decimalDigits.substring(0, 2) : decimalDigits;
        formattedNumber = floatValue.substring(0, decimalIndex) + "." + decimalPart;
    } else {
        formattedNumber = floatValue;
    }
    return formattedNumber;
}

function calculationInputPrice(type, ratio, index) {
    if (index === 2) {
        index = 1;
    } else if (index === 4) {
        index = 3;
    }
    let ratioNum = divide(ratio, 100);
    let expectedRevenuePrice = 0;
    switch (type) {
      case EditType.TakeProfit:
        let takeProfitPrice;
        const takeProfitRatio = parseFloat(ratioNum);
        switch (orderParamData.direction) {
          case Direction.Buy:
            takeProfitPrice = linkagePriceFormula(orderParamData.openPrice, true, takeProfitRatio, orderParamData.lever);
            takeProfitPrice = priceTextFilter(takeProfitPrice);
            moduleData$M.takeProfitPrice = takeProfitPrice;
            if (checkBuyValid(type) === true) {
                params.stopProfitRate = formatRatioForRequestParam(ratioNum);
                expectedRevenuePrice = calculationExpectedRevenue(type, takeProfitPrice);
                configDislayExpectedRevenuePrice(type, takeProfitPrice, expectedRevenuePrice);
                cleanErrorBoardColor(index);
            } else {
                params.stopProfitRate = "";
                clearExpectedRevenuePrice(type);
                showErrorBoardColor(index);
            }
            break;

          case Direction.Sell:
            takeProfitPrice = linkagePriceFormula(orderParamData.openPrice, false, takeProfitRatio, orderParamData.lever);
            takeProfitPrice = priceTextFilter(takeProfitPrice);
            moduleData$M.takeProfitPrice = takeProfitPrice;
            if (checkSellVaild(type) === true) {
                params.stopProfitRate = formatRatioForRequestParam(ratioNum);
                expectedRevenuePrice = calculationExpectedRevenue(type, takeProfitPrice);
                configDislayExpectedRevenuePrice(type, takeProfitPrice, expectedRevenuePrice);
                cleanErrorBoardColor(index);
            } else {
                params.stopProfitRate = "";
                clearExpectedRevenuePrice(type);
                showErrorBoardColor(index);
            }
            break;
        }
        break;

      case EditType.StopLoss:
        let stopLossPrice;
        const stopLossRatio = parseFloat(ratioNum);
        switch (orderParamData.direction) {
          case Direction.Buy:
            stopLossPrice = linkagePriceFormula(orderParamData.openPrice, false, stopLossRatio, orderParamData.lever);
            stopLossPrice = priceTextFilter(stopLossPrice);
            moduleData$M.stopLossPrice = stopLossPrice;
            if (checkBuyValid(type) === true) {
                params.stopLossRate = formatRatioForRequestParam(ratioNum);
                expectedRevenuePrice = calculationExpectedRevenue(type, stopLossPrice);
                configDislayExpectedRevenuePrice(type, stopLossPrice, expectedRevenuePrice);
                cleanErrorBoardColor(index);
            } else {
                params.stopLossRate = "";
                clearExpectedRevenuePrice(type);
                showErrorBoardColor(index);
            }
            break;

          case Direction.Sell:
            stopLossPrice = linkagePriceFormula(orderParamData.openPrice, true, stopLossRatio, orderParamData.lever);
            stopLossPrice = priceTextFilter(stopLossPrice);
            moduleData$M.stopLossPrice = stopLossPrice;
            if (checkSellVaild(type) === true) {
                params.stopLossRate = formatRatioForRequestParam(ratioNum);
                expectedRevenuePrice = calculationExpectedRevenue(type, stopLossPrice);
                configDislayExpectedRevenuePrice(type, stopLossPrice, expectedRevenuePrice);
                cleanErrorBoardColor(index);
            } else {
                params.stopLossRate = "";
                clearExpectedRevenuePrice(type);
                showErrorBoardColor(index);
            }
            break;
        }
        break;
    }
}

function linkagePriceFormula(openPrice, isAdd, ratio, lever) {
    let step1Num = divide(ratio, lever);
    let step2Num;
    if (isAdd === true) {
        step2Num = add(1, step1Num);
    } else {
        step2Num = subtract(1, step1Num);
    }
    let step3Num = multiply(openPrice, step2Num);
    return step3Num;
}

function genericRatioMax() {
    let step1Num = multiply(orderParamData.lever, 100);
    let step2Num = subtract(step1Num, .01);
    return step2Num;
}

function ratioInputMaxCheck(type, ratioString) {
    let maxValue = "";
    switch (type) {
      case EditType.TakeProfit:
        maxValue = genericRatioMax();
        break;

      case EditType.StopLoss:
        maxValue = genericRatioMax();
        break;
    }
    if (maxValue.length > 0) {
        let ratio = parseFloat(ratioString);
        let max = parseFloat(maxValue);
        if (ratio > max) {
            return maxValue;
        }
    }
    return ratioString;
}

function richText(string, key, keyColor, normalColor) {
    let arr = string.split(key);
    let rep = new Array;
    for (let i in arr) {
        rep[i] = formatRichText(normalColor, arr[i]);
    }
    let keyItem = formatRichText(keyColor, key);
    let result = rep.join(keyItem);
    return result;
}

function formatRichText(color, key) {
    return `<span style='color: ${color}; font-size: 12px;'>${key}</span>`;
}

function configDislayExpectedRevenuePrice(type, reachPrice, expectedRevenue) {
    const primaryTextColor = commonData.colorMode === 1 ? "#D7DEEB" : "#1C1C1E";
    const secondaryTextColor = commonData.colorMode === 1 ? "#5E5E61" : "#8A8A8E";
    reachPrice = convertToNumber(reachPrice);
    expectedRevenue = convertToNumber(expectedRevenue);
    let reachPriceDes = reachPrice !== 0 ? scientificToNumber(formatNumberWithDecimals(reachPrice, 0)) : Price_STR_DEFAULT;
    let reachPriceColor = reachPrice !== 0 ? primaryTextColor : secondaryTextColor;
    let expectedRevenueDes;
    let expectedRevenueColor;
    switch (type) {
      case EditType.TakeProfit:
        expectedRevenueDes = expectedRevenue !== 0 ? formatNumberWithDecimals(expectedRevenue, 4) : Price_STR_DEFAULT;
        expectedRevenueColor = expectedRevenue !== 0 ? getUpDownColor(expectedRevenue > 0) : secondaryTextColor;
        break;

      case EditType.StopLoss:
        expectedRevenueDes = expectedRevenue !== 0 ? formatNumberWithDecimals(expectedRevenue, 4) : Price_STR_DEFAULT;
        expectedRevenueColor = expectedRevenue !== 0 ? getUpDownColor(expectedRevenue > 0) : secondaryTextColor;
        break;
    }
    const input = $i18n.$intercept.n_copy_trading_expected_revenue(reachPriceDes, expectedRevenueDes);
    let result;
    if (reachPrice === expectedRevenue) {
        let reachKey = `${reachPriceDes} USDT)`;
        let expectedRevenueKey = `${expectedRevenueDes} USDT (`;
        let array = input.split(`，`);
        if (input.indexOf(reachKey) != -1 && input.indexOf(expectedRevenueKey) != -1) {
            let reachRePlace = formatRichText(reachPriceColor, `${reachPriceDes} USDT`);
            reachRePlace = `</span>${reachRePlace}`;
            let end = formatRichText(secondaryTextColor, ")");
            reachRePlace = `${reachRePlace}${end}`;
            let expectedReplace = formatRichText(expectedRevenueColor, `${expectedRevenueDes} USDT`);
            expectedReplace = `</span>${expectedReplace}<span style='color: ${secondaryTextColor}; font-size: 12px;'> (`;
            result = input.replace(expectedRevenueKey, expectedReplace);
            result = result.replace(reachKey, reachRePlace);
            result = `<span style='color: ${secondaryTextColor}; font-size: 12px;'>${result}`;
        } else if (array.length === 2) {
            let reachKey = `${reachPriceDes} USDT`;
            let reachRePlace = formatRichText(reachPriceColor, `${reachPriceDes} USDT`);
            reachRePlace = `</span>${reachRePlace}`;
            let item0 = array[0];
            item0 = item0.replace(reachKey, reachRePlace);
            item0 = `<span style='color: ${secondaryTextColor}; font-size: 12px;'>${item0}`;
            let space = formatRichText(secondaryTextColor, "，");
            let expectedKey = `${expectedRevenueDes} USDT`;
            let expectedReplace = formatRichText(expectedRevenueColor, `${expectedRevenueDes} USDT`);
            let item1 = array[1];
            item1 = item1.replace(expectedKey, expectedReplace);
            item1 = `<span style='color: ${secondaryTextColor}; font-size: 12px;'>${item1}`;
            result = `${item0}${space}${item1}`;
        } else {
            result = formatRichText(secondaryTextColor, result);
        }
    } else {
        let key = `${reachPriceDes} USDT`;
        let expectedRevenueKey = `${expectedRevenueDes} USDT`;
        let arr = input.split(key);
        if (arr[0].indexOf(expectedRevenueKey) != -1) {
            let item1 = formatRichText(secondaryTextColor, arr[1]);
            let itemReach = formatRichText(reachPriceColor, key);
            let lastString = arr[0];
            let item0 = richText(lastString, expectedRevenueKey, expectedRevenueColor, secondaryTextColor);
            result = `${item0}${itemReach}${item1}`;
        }
        if (arr[1].indexOf(expectedRevenueKey) != -1) {
            let item0 = formatRichText(secondaryTextColor, arr[0]);
            let itemReach = formatRichText(reachPriceColor, key);
            let lastString = arr[1];
            let item1 = richText(lastString, expectedRevenueKey, expectedRevenueColor, secondaryTextColor);
            result = `${item0}${itemReach}${item1}`;
        }
    }
    console.log(result);
    switch (type) {
      case EditType.TakeProfit:
        moduleData$M.takeProfitExpectedRichText = result;
        break;

      case EditType.StopLoss:
        moduleData$M.stopLossExpectedRichText = result;
        break;
    }
}

function calculationExpectedRevenue(type, inputPrice) {
    let result = 0;
    switch (type) {
      case EditType.TakeProfit:
        switch (orderParamData.direction) {
          case Direction.Buy:
            result = expectedRevenueFormula(orderParamData.openAmount, inputPrice, orderParamData.openPrice, 1);
            break;

          case Direction.Sell:
            result = expectedRevenueFormula(orderParamData.openAmount, inputPrice, orderParamData.openPrice, -1);
            break;
        }
        break;

      case EditType.StopLoss:
        switch (orderParamData.direction) {
          case Direction.Buy:
            result = expectedRevenueFormula(orderParamData.openAmount, inputPrice, orderParamData.openPrice, 1);
            break;

          case Direction.Sell:
            result = expectedRevenueFormula(orderParamData.openAmount, inputPrice, orderParamData.openPrice, -1);
            break;
        }
        break;
    }
    return result;
}

function expectedRevenueFormula(count, inputPrice, openPrice, direction) {
    let price = subtract(inputPrice, openPrice);
    let total = multiply(count, price);
    let result = multiply(total, direction);
    return result;
}

function formatNumberWithDecimals(number, maxDecimalPlaces) {
    const Price_STR_DEFAULT = "0";
    if (typeof number === "string") {
        number = parseFloat(number);
    }
    if (isNaN(number)) {
        return Price_STR_DEFAULT;
    }
    let strNum = number.toString();
    let arr = strNum.split(".");
    let formattedNumber = arr[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    let decimalPart = arr[1];
    if (maxDecimalPlaces > 0) {
        if (decimalPart && decimalPart.length > 0 && decimalPart.length > maxDecimalPlaces) {
            decimalPart = decimalPart.slice(0, maxDecimalPlaces);
        }
    }
    if (decimalPart) {
        return `${formattedNumber}.${decimalPart}`;
    } else {
        return formattedNumber;
    }
}

function checkBuyValid(type) {
    if (type === EditType.TakeProfit) {
        moduleData$M.takeProfitPriceErrorVisible = getVisibilityStatus(false);
        moduleData$M.takeProfitPriceError = "";
        if (moduleData$M.takeProfitPrice === "") {
            return false;
        } else {
            const takeProfitPrice = convertToNumber(moduleData$M.takeProfitPrice);
            if (orderParamData.marketPrice >= orderParamData.openPrice && takeProfitPrice <= orderParamData.marketPrice) {
                moduleData$M.takeProfitPriceErrorVisible = getVisibilityStatus(true);
                moduleData$M.takeProfitPriceError = `${$i18n.n_copy_trading_error_tp_price_higher_last_price}`;
                return false;
            } else if (orderParamData.marketPrice < orderParamData.openPrice && takeProfitPrice <= orderParamData.openPrice) {
                moduleData$M.takeProfitPriceErrorVisible = getVisibilityStatus(true);
                moduleData$M.takeProfitPriceError = `${$i18n.n_copy_trading_error_tp_price_higher_open_price}`;
                return false;
            }
        }
    } else if (type === EditType.StopLoss) {
        moduleData$M.stopLossPriceErrorVisible = getVisibilityStatus(false);
        moduleData$M.stopLossPriceError = "";
        if (moduleData$M.stopLossPrice === "") {
            return false;
        } else {
            const stopLossPrice = convertToNumber(moduleData$M.stopLossPrice);
            if (orderParamData.marketPrice >= orderParamData.openPrice && stopLossPrice >= orderParamData.openPrice) {
                moduleData$M.stopLossPriceErrorVisible = getVisibilityStatus(true);
                moduleData$M.stopLossPriceError = `${$i18n.n_copy_trading_error_sl_price_less_open_price}`;
                return false;
            } else if (orderParamData.marketPrice < orderParamData.openPrice && stopLossPrice >= orderParamData.marketPrice) {
                moduleData$M.stopLossPriceErrorVisible = getVisibilityStatus(true);
                moduleData$M.stopLossPriceError = `${$i18n.n_copy_trading_error_sl_price_less_last_price}`;
                return false;
            }
        }
    }
    return true;
}

function checkSellVaild(type) {
    if (type === EditType.TakeProfit) {
        moduleData$M.takeProfitPriceErrorVisible = getVisibilityStatus(false);
        moduleData$M.takeProfitPriceError = "";
        const takeProfitPrice = convertToNumber(moduleData$M.takeProfitPrice);
        if (orderParamData.marketPrice >= orderParamData.openPrice && takeProfitPrice >= orderParamData.openPrice) {
            moduleData$M.takeProfitPriceErrorVisible = getVisibilityStatus(true);
            moduleData$M.takeProfitPriceError = `${$i18n.n_copy_trading_error_tp_price_less_open_price}`;
            return false;
        } else if (orderParamData.marketPrice < orderParamData.openPrice && takeProfitPrice >= orderParamData.marketPrice) {
            moduleData$M.takeProfitPriceErrorVisible = getVisibilityStatus(true);
            moduleData$M.takeProfitPriceError = `${$i18n.n_copy_trading_error_tp_price_less_last_price}`;
            return false;
        }
    } else if (type === EditType.StopLoss) {
        moduleData$M.stopLossPriceErrorVisible = getVisibilityStatus(false);
        moduleData$M.stopLossPriceError = "";
        const stopLossPrice = convertToNumber(moduleData$M.stopLossPrice);
        if (orderParamData.marketPrice >= orderParamData.openPrice && stopLossPrice <= orderParamData.marketPrice) {
            moduleData$M.stopLossPriceErrorVisible = getVisibilityStatus(true);
            moduleData$M.stopLossPriceError = `${$i18n.n_copy_trading_error_sl_price_higher_last_price}`;
            return false;
        } else if (orderParamData.marketPrice < orderParamData.openPrice && stopLossPrice <= orderParamData.openPrice) {
            moduleData$M.stopLossPriceErrorVisible = getVisibilityStatus(true);
            moduleData$M.stopLossPriceError = `${$i18n.n_copy_trading_error_sl_price_higher_open_price}`;
            return false;
        } else if (orderParamData.modeType === 1 && stopLossPrice >= orderParamData.explosionPrice) {
            moduleData$M.stopLossPriceErrorVisible = getVisibilityStatus(true);
            moduleData$M.stopLossPriceError = `${$i18n.n_copy_trading_error_sl_price_less_storehouse_price}`;
            return false;
        }
    }
    return true;
}

function chekDoneButtonEnable$1() {
    return isNonEmptyString(params.stopProfitRate) || isNonEmptyString(params.stopLossRate);
}

moduleEvent$M.confirm = async function() {
    if (chekDoneButtonEnable$1() === true) {
        await sendRequest$1();
    }
};

function formatRatioForRequestParam(percentage) {
    let valueStr;
    if (typeof percentage === "number") {
        valueStr = String(percentage);
    } else if (typeof percentage === "string") {
        valueStr = percentage;
    } else {
        return "";
    }
    let arr = valueStr.split(".");
    if (arr.length === 2) {
        let decimalPart = arr[1];
        if (decimalPart && decimalPart.length > 4) {
            decimalPart = decimalPart.slice(0, 4);
            let string = `${arr[0]}.${decimalPart}`;
            return string;
        }
    }
    return valueStr;
}

async function sendRequest$1() {
    if (isNonEmptyString(moduleData$M.takeProfitPriceError) === false && isNonEmptyString(moduleData$M.stopLossPriceError) === false) {
        if (requesting$1 === false) {
            requesting$1 = true;
            let data = await sendRequest$2("v1/copytrading/trader/update-order-tpsl", params, 1, 0, {
                "Content-Type": "application/json"
            });
            requesting$1 = false;
            if (data !== null) {
                showToast(`${$i18n.n_copy_trading_trade_limit_submit_success}`);
                close$2();
                $event.order.refreshData();
            }
        }
    }
}

moduleEvent$M.onFocusChange = async function(key, isFocus) {
    if (key === 1) {
        if (moduleData$M.takeProfitPriceErrorVisible !== "visible") {
            configItemFocus$1(key, isFocus);
        }
    } else if (key === 3) {
        if (moduleData$M.stopLossPriceErrorVisible !== "visible") {
            configItemFocus$1(key, isFocus);
        }
    } else {
        configItemFocus$1(key, isFocus);
    }
    moduleData$M.currentFocusIndex = key;
};

function currentBoardColor$1(isFocus) {
    return isFocus ? Edit_Board_SelectColor$5 : Edit_Board_NomalColor$3;
}

function configItemFocus$1(index, isFocus) {
    let color = currentBoardColor$1(isFocus);
    switch (index) {
      case 1:
        moduleData$M.takeProfit1BoardColor = color;
        break;

      case 2:
        moduleData$M.takeProfit2BoardColor = color;
        break;

      case 3:
        moduleData$M.stopLoss1BoardColor = color;
        break;

      case 4:
        moduleData$M.stopLoss2BoardColor = color;
        break;
    }
}

function showErrorBoardColor(index) {
    if (index === 1) {
        moduleData$M.takeProfit1BoardColor = Edit_Board_ErrorColor$2;
    } else if (index === 3) {
        moduleData$M.stopLoss1BoardColor = Edit_Board_ErrorColor$2;
    }
}

function cleanErrorBoardColor(index) {
    if (index === 1 && moduleData$M.takeProfit1BoardColor === Edit_Board_ErrorColor$2) {
        moduleData$M.takeProfit1BoardColor = currentBoardColor$1(moduleData$M.currentFocusIndex === index);
    } else if (index === 3 && moduleData$M.stopLoss1BoardColor === Edit_Board_ErrorColor$2) {
        moduleData$M.stopLoss1BoardColor = currentBoardColor$1(moduleData$M.currentFocusIndex === index);
    }
}

moduleEvent$M.closeKeyBoard = function() {
    moduleData$M.takeProfit1Focus = "false";
    moduleData$M.takeProfit2Focus = "false";
    moduleData$M.stopLoss1Focus = "false";
    moduleData$M.stopLoss2Focus = "false";
};

function getVisibilityStatus(show) {
    if (typeof show === "boolean") {
        return show ? "visible" : "gone";
    } else if (typeof show === "number") {
        return show !== 0 ? "visible" : "gone";
    } else {
        return "gone";
    }
}

function convertToNumber(price) {
    const numericValue = Number(price);
    return isNaN(numericValue) ? 0 : numericValue;
}

function isNonEmptyString(str) {
    return typeof str === "string" && str.trim().length > 0;
}

function getCurrentOpenProfitColor(currentOpenProfit) {
    let openProfitColor;
    if (parseFloat(currentOpenProfit) > 0) {
        openProfitColor = getUpDownColor();
    } else if (isNaN(parseFloat(currentOpenProfit))) {
        openProfitColor = "@color/kColorPrimaryText";
    } else if (parseFloat(currentOpenProfit) == 0) {
        openProfitColor = getUpDownColor();
    } else {
        openProfitColor = getUpDownColor(false);
    }
    return openProfitColor;
}

function configRule() {
    let input;
    if (commonData.OS === 0 || commonData.OS === "0") {
        input = $i18n.$intercept.n_copy_trading_sl_max_ratio_tip(orderParamData.tpslRiskRateDesc ? orderParamData.tpslRiskRateDesc : "");
    } else {
        input = $i18n.$intercept.n_copy_trading_sl_max_ratio_tip2(orderParamData.tpslRiskRateDesc ? orderParamData.tpslRiskRateDesc : "");
    }
    let primaryText = commonData.colorMode === 1 ? "#D7DEEB" : "#1C1C1E";
    let secondaryText = commonData.colorMode === 1 ? "#5E5E61" : "#8A8A8E";
    let keyText = `${orderParamData.tpslRiskRateDesc}%`;
    let keyText2 = `%${orderParamData.tpslRiskRateDesc}`;
    if (input.indexOf(keyText) != -1) {
        let replaceString = formatRichText(primaryText, keyText);
        var title = input.replace(keyText, replaceString);
        input = `<span style='color: ${secondaryText}; font-size: 12px;'>${title}`;
    } else if (input.indexOf(keyText2) != -1) {
        let replaceString = formatRichText(primaryText, keyText2);
        var title = input.replace(keyText2, replaceString);
        input = `<span style='color: ${secondaryText}; font-size: 12px;'>${title}`;
    }
    return input;
}

function subKeyBord$2(sub) {
    if (sub === true) {
        subKeybordSocket("sub");
    } else {
        subKeybordSocket("unsub");
    }
}

function close$2() {
    subKeyBord$2(false);
    moduleData$M.tradeListPopShow = "false";
}

function cleanAllPops$1() {
    subKeyBord$2(false);
    moduleData$M.tradeListPopShow = "false";
    close$3();
}

moduleEvent$M.clickEditBackground = async function() {};

moduleEvent$M.showAlert = async function() {
    if ($data.tradeLimitAlert.alertPopShow !== "true") {
        $data.tradeLimitAlert.alertPopShow = "true";
    }
};

moduleEvent$M.close = close$2;

function start$M() {}

function defaultData$M() {
    return {
        slippage: "-- USDT"
    };
}

var orderParam = {};

var requesting = false;

const {moduleData: moduleData$L, moduleEvent: moduleEvent$L} = moduleDefine("tradeClose", start$M, defaultData$M);

function show$1(param) {
    orderParam = param;
    showDisPlayData(orderParam);
    requesting = false;
}

function refreshTradeCloseData() {
    try {
        console.log(`wp refreshTrade--CloseData = ${JSON.stringify(orderParam)}`);
        if (orderParam != null && orderParam.symbol != "undefined") {
            showDisPlayData(orderParam);
        }
    } catch (e) {
        console.log(`refreshTradeCloseData------e = ${e}`);
    }
}

function showDisPlayData(orderParam) {
    let {coin: coin, unit: unit} = coinUnit(orderParam.symbol);
    moduleData$L.orderId = orderParam.id;
    moduleData$L.directionLabel = orderParam.directionLabel;
    moduleData$L.directionColor = orderParam.directionColor;
    moduleData$L.symbolDesc = orderParam.symbolDesc;
    moduleData$L.modeTypeName = orderParam.modeTypeName;
    moduleData$L.leverDesc = orderParam.leverDesc;
    moduleData$L.directionDesc = orderParam.directionDesc;
    moduleData$L.openPrice = `${orderParam.openPrice} ${unit}`;
    moduleData$L.marketPrice = `${orderParam.marketPrice} ${unit}`;
    moduleData$L.profit = `${orderParam.openProfit} ${unit}`;
    moduleData$L.profitColor = orderParam.openProfitColor;
    try {
        let data = commonData.linearSwapWsData[orderParam.symbol];
        let currentContractInfo = getModelByContractShortType(orderParam.symbol);
        let futureNumber = getVolume(orderParam.openAmount, data.price, getContractSizePrecision(currentContractInfo), commonData.unitType);
        moduleData$L.futureNumber = `${futureNumber} ${commonData.unitType === UnitType.unitTypeUSDT ? unit : coin}`;
        if (data && data != "undefined" && data != null && data.price != null || data.price != "" || data.price != "undefined" && data.price > 0) {
            moduleData$L.marketPrice = `${data.price} ${unit}`;
            let profit = getProfit(orderParam.openPrice, data.price, orderParam.openAmount, orderParam.direction);
            if (parseFloat(profit) >= 0) {
                moduleData$L.profitColor = getUpDownColor();
                moduleData$L.profit = `+${profit} ${unit}`;
            } else if (isNaN(parseFloat(profit))) {
                moduleData$L.profitColor = "@color/kColorSecondaryText";
                moduleData$L.profit = "--";
            } else {
                moduleData$L.profitColor = getUpDownColor(false);
                moduleData$L.profit = `${profit} ${unit}`;
            }
        }
        requestClosingSlippageData$1(orderParam.symbol, orderParam.openAmount, orderParam.direction);
    } catch (e) {
        console.log(`futureNumber--e = ${e}`);
    }
}

moduleEvent$L.confirm = async function() {
    await sendRequest(0);
};

moduleEvent$L.followerConfirm = async function() {
    await sendRequest(1);
};

function close$1() {
    moduleData$L.tradeClosePopShow = "false";
}

function followerClose() {
    moduleData$L.followerTradeClosePopShow = "false";
}

async function sendRequest(type) {
    if (requesting === false) {
        requesting = true;
        if (type == 1) {
            followerClose();
        } else {
            close$1();
        }
        showLoading(true);
        const params = {
            id: parseInt(moduleData$L.orderId)
        };
        var path = "v1/copytrading/trader/close-position";
        if (type == 1) {
            path = "v1/copytrading/follower/close-position";
        }
        let data = await sendRequest$2(path, params, 1, 0, {
            "Content-Type": "application/json"
        });
        showLoading(false);
        requesting = false;
        if (data !== null) {
            setTimeout((() => {
                requestData$2(type);
            }), 1e3);
            setTimeout((() => {
                requestData$2(type);
            }), 2e3);
        }
    }
}

function requestData$2(type) {
    if (type == 1) {
        $event.followOrders.onAppear();
    } else {
        $event.order.refreshData();
    }
}

async function requestClosingSlippageData$1(contractCode, amount, direction) {
    console.log("requestClosingSlippageData");
    var params = {
        contractCode: contractCode,
        amount: amount,
        direction: direction == "long" ? 1 : 2
    };
    const data = await sendRequest$2("v1/copytrading/close-position-slippage-tips", params, 1, 0, {
        "Content-Type": "application/json"
    });
    try {
        if (!data || data !== null) {
            console.log(`handle Position data =${JSON.stringify(data)}`);
            var strArray = contractCode.split("-");
            let currentContractInfo = getModelByContractShortType(contractCode);
            let precision = getPriceTickPrecision(currentContractInfo);
            moduleData$L.slippage = `${formatPrecision(data.marketClosingSlippage, precision)} ${strArray[1].toUpperCase()}`;
        }
    } catch (e) {
        console.log(`handle close-position-slippage-tips data error=${e}`);
    }
}

moduleEvent$L.close = close$1;

moduleEvent$L.followerClose = followerClose;

function start$L() {}

function defaultData$L() {
    return {};
}

const {moduleData: moduleData$K, moduleEvent: moduleEvent$K} = moduleDefine("stopProfitAlertPop", start$L, defaultData$L);

function show(orderData) {
    if (commonData.OS === 0 || commonData.OS === "0") {
        moduleData$K.tradeLimitAlertContent = $i18n.$intercept.n_copy_trading_stop_profit_alert(orderData.tpslRiskRateDesc);
    } else {
        moduleData$K.tradeLimitAlertContent = $i18n.$intercept.n_copy_trading_stop_profit_alert2(orderData.tpslRiskRateDesc);
    }
}

function stopProfitAlertDismiss() {
    moduleData$K.stopProfitPopShow = "false";
}

moduleEvent$K.confirm = function() {
    stopProfitAlertDismiss();
};

moduleEvent$K.stopProfitAlertDismiss = stopProfitAlertDismiss;

let isStarted$3 = false;

async function start$K() {
    if (isStarted$3) {
        return;
    }
    requestOrder$3();
    isStarted$3 = true;
}

var currentOrder$1 = {
    emptyVisible: "visible",
    listVisible: "invisible",
    isCurrentChecked: false,
    currentOrderCount: $i18n.$intercept.n_copy_trading_current_order(String(0)),
    tradeListPopShow: "false",
    checkboxImg: "@drawable/edge_engine_unselected",
    list: [],
    orders: []
};

var clickItemRecord$2 = {};

function defaultData$K() {
    return currentOrder$1;
}

const {moduleData: moduleData$J, moduleEvent: moduleEvent$J} = moduleDefine("order", start$K, defaultData$K);

let timerObject$5;

function startTimer$5() {
    clearTimer$5();
    if (null == timerObject$5) {
        timerObject$5 = setInterval(timerCallback$5, 5e3);
    }
}

function clearTimer$5() {
    if (timerObject$5 != null) {
        clearInterval(timerObject$5);
        timerObject$5 = null;
    }
}

async function timerCallback$5() {
    await requestOrder$3();
}

async function copyOrderId$1(orderId) {
    try {
        await $nativeAPI.clipBoard(JSON.stringify({
            label: "",
            content: orderId,
            toast: $i18n.n_replicated
        }));
    } catch (error) {
        console.log(`copy clipboard error:${error}`);
    }
}

async function onTradeLimitClick(index) {
    if (index >= moduleData$J.list.length) {
        return;
    }
    let item = moduleData$J.list[index];
    if (item.tradeLimitEnable && $data.tradeLimit.tradeListPopShow !== "true") {
        $data.tradeLimit.tradeListPopShow = "true";
        show$2(item.rawObject());
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "current_orders_tp/sl"
    });
}

async function onTradeClose(index) {
    if (index >= moduleData$J.list.length) {
        return;
    }
    let item = moduleData$J.list[index];
    if (item.tradeLimitEnable && $data.tradeClose.tradeClosePopShow !== "true") {
        $data.tradeClose.tradeClosePopShow = "true";
        show$1(item.rawObject());
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "current_orders_close"
    });
}

async function onSelectionChange$3() {
    moduleData$J.checkboxImg = moduleData$J.isCurrentChecked ? "@drawable/edge_engine_unselected" : "@drawable/edge_engine_selected";
    moduleData$J.isCurrentChecked = !moduleData$J.isCurrentChecked;
    requestOrder$3();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "current_orders_current_tokens_only"
    });
}

function setListVisible$9(visible) {
    if (true == visible) {
        moduleData$J.emptyVisible = "gone";
        moduleData$J.listVisible = "visible";
    } else {
        moduleData$J.emptyVisible = "visible";
        moduleData$J.listVisible = "invisible";
    }
}

var isRequest$a = false;

async function requestOrder$3() {
    var params = {
        userSign: commonData.userSign,
        pageSize: 100
    };
    console.log(`当前币对: ${commonData.currentSymbol} 是否选择当前币对:${moduleData$J.isCurrentChecked}`);
    if (moduleData$J.isCurrentChecked) {
        params["symbol"] = commonData.currentSymbol;
    }
    if (isRequest$a) {
        return;
    }
    isRequest$a = true;
    const data = await sendRequest$2("v1/copytrading/trader/open-unmatch-orders", params);
    isRequest$a = false;
    try {
        if (!data || data == null || !data.orders || data.orders == null || data.orders.length == 0) {
            setListVisible$9(false);
            moduleData$J.list = [];
            moduleData$J.currentOrderCount = $i18n.$intercept.n_copy_trading_current_order(String(0));
            uploadLog("copyTrading order requestOrder", "data is null");
            return;
        }
        uploadLog("copyTrading order requestOrder", `${JSON.stringify(data)}`);
        setListVisible$9(true);
        const {totalSize: totalSize, orders: orders} = data;
        moduleData$J.orders = orders;
        handleData$a(orders);
        moduleData$J.currentOrderCount = $i18n.$intercept.n_copy_trading_current_order(String(orders.length));
    } catch (e) {
        uploadLog("copyTrading order requestOrder e", `${e}`);
        console.log(`handle order data error=${e}`);
    }
}

function handleData$a(orders) {
    try {
        for (let i = 0; i < orders.length; ++i) {
            let v = orders[i];
            v.index = i;
            let {coin: coin, unit: unit} = coinUnit(v.symbol);
            if (v.direction == "long") {
                v.directionLabel = $i18n.n_contract_position_buy_label;
                v.directionColor = getUpDownColor();
                v.directionDesc = $i18n.n_contract_trade_open_more;
            } else {
                v.directionLabel = $i18n.n_contract_position_sell_label;
                v.directionColor = getUpDownColor(false);
                v.directionDesc = $i18n.n_contract_trade_open_low;
            }
            if (parseFloat(v.openProfit) >= 0) {
                v.openProfitColor = getUpDownColor();
                v.openProfit = `+${v.openProfit}`;
            } else if (isNaN(parseFloat(v.openProfit))) {
                v.openProfitColor = "@color/kColorSecondaryText";
                v.openProfit = "--";
            } else {
                v.openProfitColor = getUpDownColor(false);
            }
            if (typeof v.openProfitRate === "string" && !isNaN(parseFloat(v.openProfitRate))) {
                const openProfitRate = formatPrecision(multiply(v.openProfitRate, "100"), 2);
                v.openProfitRateStr = `${openProfitRate}%`;
            } else {
                v.openProfitRateStr = "--";
            }
            v.symbolDesc = symbolDesc(v.symbol);
            var positionModel = $i18n.n_copy_trading_isolated;
            if (v.positionModel == 2) {
                positionModel = $i18n.n_contract_super_margin;
            } else if (v.positionModel == 3) {
                positionModel = $i18n.n_contract_trade_margin;
            }
            v.modeTypeName = positionModel;
            v.leverDesc = `${v.lever}X`;
            v.orderId = v.orderIdShow;
            v.openPriceTitle = `${$i18n.n_contract_avg_position_price}(${unit})`;
            v.openAmountTitle = `${$i18n.n_option_market_list_setting_position_volume}(${commonData.unitType === UnitType.unitTypeUSDT ? unit : coin})`;
            v.bondAmountTitle = `${$i18n.$intercept.n_contarct_position_original_margin("USDT")}`;
            v.newestPriceTitle = `${$i18n.n_market_price_sort_text}(${"USDT"})`;
            v.bondAmountStr = formatPrecision(v.bondAmount, 4);
            let currentContractInfo = getModelByContractShortType(v.symbol);
            let precision = getContractSizePrecision(currentContractInfo);
            let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
            v.openPriceStr = formatPrecision(v.openPrice, priceTickPrecision);
            try {
                let data = commonData.linearSwapWsData[v.symbol];
                let usePrice = "0";
                if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                    uploadLog("copyTrading order handleData linearSwapWsData", "data is null");
                    usePrice = v.openPrice;
                    v.newestPriceStr = "--";
                } else {
                    uploadLog("copyTrading order handleData linearSwapWsData", `${JSON.stringify(data)}`);
                    usePrice = data.price;
                    v.newestPriceStr = data.price;
                }
                v.openAmountVolume = getVolume(v.openAmount, usePrice, precision, commonData.unitType);
                if (data && data != "undefined" && data != null && data.price != null || data.price != "" || data.price != "undefined" && data.price > 0) {
                    let profit = getProfit(v.openPrice, usePrice, v.openAmount, v.direction);
                    if (parseFloat(profit) >= 0) {
                        v.openProfitColor = getUpDownColor();
                        v.openProfitStr = `+${profit}`;
                    } else if (isNaN(parseFloat(profit))) {
                        v.openProfitColor = "@color/kColorSecondaryText";
                        v.openProfitStr = "--";
                    } else {
                        v.openProfitColor = getUpDownColor(false);
                        v.openProfitStr = profit;
                    }
                    let profitRate = getProfitRate(v.openPrice, usePrice, v.openAmount, v.direction, v.lever);
                    if (profitRate != "") {
                        v.openProfitRateStr = profitRate;
                    } else {
                        v.openProfitRateStr = "--";
                    }
                }
            } catch (e) {
                uploadLog("copyTrading order handleData linearSwapWsData e", `${e}`);
                console.log(`orderItem--e = ${e}`);
            }
            v.stopProfitPriceTitle = `${$i18n.n_grid_trade_zhiying}(${unit})`;
            v.stopLossPriceTitle = `${$i18n.n_grid_trade_zhisun}(${unit})`;
            v.openFeeTitle = `${$i18n.n_copy_trading_open_fee}(${unit})`;
            let feePrecision = getFeeAmountPrecision(currentContractInfo);
            v.openFeeStr = formatPrecision(v.openFee, feePrecision);
            v.stopProfitPrice = parseZero$2(v.stopProfitPrice, priceTickPrecision);
            v.stopLossPrice = parseZero$2(v.stopLossPrice, priceTickPrecision);
            v.stopProfitPopVisible = v.positionModel == 1 ? "visible" : "gone";
            v.explosionPriceTitle = v.positionModel == 1 ? `${$i18n.n_copy_trading_estimate_storehouse_price}(${unit})` : `${$i18n.n_balance_contract_prediction_of_strong_parity}(${unit})`;
            v.explosionPriceVisible = v.positionModel == 1 ? "gone" : "visible";
            v.explosionPrice = parseZero$2(v.explosionPrice, priceTickPrecision);
            if (v.status == 3) {
                v.stopProfitColor = "@color/eBaseColorThreeLevelText";
                v.stopLossBtn = $i18n.n_copy_trading_closing_position;
                v.tradeLimitEnable = false;
            } else {
                v.stopProfitColor = "@color/kColorPrimaryText";
                v.stopLossBtn = $i18n.n_contract_trade_position_close;
                v.tradeLimitEnable = true;
            }
            if (clickItemRecord$2[v.orderIdShow]) {
                v.orderIdVisible = clickItemRecord$2[v.orderIdShow];
            } else {
                v.orderIdVisible = "gone";
            }
            v.openTimeDesc = $i18n.n_copy_trading_open_time + ": " + new Date(v.openTime).Format("yyyy-MM-dd hh:mm:ss");
            v.type = "normal";
            v.orderIdDesc = `${$i18n.n_copy_trading_order_no}: ${v.orderIdShow}`;
            if (v.tpslRiskRate) {
                v.tpslRiskRateDesc = multiply(v.tpslRiskRate, 100);
            }
        }
        moduleData$J.list = orders;
    } catch (e) {
        uploadLog("copyTrading order handleData e", `${e}`);
    }
}

function refreshOrderData() {
    handleData$a(moduleData$J.orders);
}

function parseZero$2(price, precision = 4) {
    if (null == price || price == "--") {
        return "--";
    }
    if (parseFloat(price) == 0) {
        return "--";
    }
    return formatPrecision(price, precision);
}

function symbolChange$1() {
    if (true == moduleData$J.isCurrentChecked) {
        requestOrder$3();
    }
}

function clickedItem$5(index) {
    if (index >= moduleData$J.list.length) {
        return;
    }
    let item = moduleData$J.list[index];
    console.log(`订单点击 at:${index} 数据：${JSON.stringify(item)}`);
    item.orderIdVisible = item.orderIdVisible == "visible" ? "gone" : "visible";
    clickItemRecord$2[item.orderIdShow] = item.orderIdVisible;
}

function showStopProfitAlert$1(index) {
    if (index >= moduleData$J.list.length) {
        return;
    }
    let item = moduleData$J.list[index];
    if ($data.stopProfitAlertPop.stopProfitPopShow !== "true") {
        $data.stopProfitAlertPop.stopProfitPopShow = "true";
        show(item);
    }
}

function cleanAllPops() {
    cleanAllPops$1();
    $data.tradeClose.tradeClosePopShow = "false";
    $data.stopProfitAlertPop.stopProfitPopShow = "false";
}

async function onAppear$h() {
    commonData.curTabType = TabType.tabTypeOrders;
    requestOrder$3();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "current_orders"
    });
}

moduleEvent$J.shareAction = async function(index) {
    if (index >= moduleData$J.list.length) {
        return;
    }
    let item = moduleData$J.list[index];
    const traderInfo = await sendRequest$2("v1/copytrading/trader-info", {
        userSign: item.userSign
    });
    if (traderInfo != null) {
        moduleData$J.nickName = traderInfo.nickName;
        moduleData$J.imgUrl = traderInfo.imgUrl;
    }
    moduleData$J.symbol = item.symbolDesc;
    moduleData$J.leverDesc = item.leverDesc;
    if (item.direction == "long") {
        moduleData$J.directionColor = getUpDownColor();
        moduleData$J.directionDesc = $i18n.n_exchange_buy_in;
    } else {
        moduleData$J.directionColor = getUpDownColor(false);
        moduleData$J.directionDesc = $i18n.n_exchange_sell_out;
    }
    moduleData$J.profitRateStr = item.openProfitRateStr;
    let profitColor = getUpDownColor();
    if (parseFloat(item.openProfitRate) >= 0) {
        profitColor = getUpDownColor();
    } else {
        profitColor = getUpDownColor(false);
    }
    moduleData$J.profitColor = profitColor;
    moduleData$J.profitRateTitle = `${$i18n.n_copy_trading_yield}(${$i18n.n_copy_trading_position})`;
    moduleData$J.openPriceTitle = item.openPriceTitle;
    moduleData$J.openPriceStr = item.openPriceStr;
    moduleData$J.newestPriceTitle = item.newestPriceTitle;
    moduleData$J.newestPriceStr = item.newestPriceStr;
    moduleData$J.time = (new Date).Format("MM/dd/yyyy hh:mm");
    $nativeAPI.shareAbility({
        type: "renderSync",
        template: "trader_order_share",
        waitTime: 2,
        jumpUrl: ""
    });
};

moduleEvent$J.copyOrderId = copyOrderId$1;

moduleEvent$J.onTradeLimitClick = onTradeLimitClick;

moduleEvent$J.onTradeClose = onTradeClose;

moduleEvent$J.onSelectionChange = onSelectionChange$3;

moduleEvent$J.clickedItem = clickedItem$5;

moduleEvent$J.refreshData = requestOrder$3;

moduleEvent$J.showStopProfitAlert = showStopProfitAlert$1;

moduleEvent$J.onAppear = onAppear$h;

async function start$J() {}

function defaultData$J() {
    return {
        title: "",
        currentLever: 1,
        currentLeverText: "1X",
        maxLever: 50,
        leverTitles1: "1X",
        leverTitles2: "1X",
        leverTitles3: "1X",
        leverTitles4: "1X",
        leverTitles5: "1X",
        leverTitles6: "1X",
        currentProgress: 0
    };
}

const {moduleData: moduleData$I, moduleEvent: moduleEvent$I} = moduleDefine("leverPicker", start$J, defaultData$J);

var contractShortType = "";

function sendData(param) {
    moduleData$I.currentLever = parseInt(param.currentLever);
    moduleData$I.currentLeverText = `${moduleData$I.currentLever}X`;
    contractShortType = param.contractShortType;
    var positionMode = parseInt(param.positionMode);
    var strArray = contractShortType.split("-");
    var baseCurrency = strArray[0].toUpperCase();
    var quoteCurrency = strArray[1].toUpperCase();
    var positionString = $i18n.n_contract_trade_margin;
    if (positionMode == 2) {
        positionString = $i18n.n_contract_super_margin;
    }
    var swap = $i18n.n_market_contract_swap_trade_name;
    moduleData$I.title = `${baseCurrency}${quoteCurrency} ${swap}·${positionString}`;
    moduleData$I.maxLever = parseInt(param.highestLever);
    console.log(`maxLever = ${moduleData$I.maxLever}`);
    var step = moduleData$I.maxLever / 5;
    moduleData$I.leverTitles1 = "1X";
    moduleData$I.leverTitles2 = `${step}X`;
    moduleData$I.leverTitles3 = `${step * 2}X`;
    moduleData$I.leverTitles4 = `${step * 3}X`;
    moduleData$I.leverTitles5 = `${step * 4}X`;
    moduleData$I.leverTitles6 = `${moduleData$I.maxLever}X`;
    moduleData$I.currentProgress = moduleData$I.currentLever;
}

function getCurrentLever() {
    return moduleData$I.currentLever;
}

function sliderValueChanged$1(progress) {
    var intProgress = parseInt(moduleData$I.currentProgress);
    if (intProgress <= 0) return;
    moduleData$I.currentLever = intProgress;
    moduleData$I.currentLeverText = `${intProgress}X`;
}

function increaseLever$1() {
    if (moduleData$I.currentLever < moduleData$I.maxLever) {
        moduleData$I.currentLever += 1;
        moduleData$I.currentLeverText = `${moduleData$I.currentLever}X`;
        moduleData$I.currentProgress = moduleData$I.currentLever;
    }
}

function decreaseLever$1() {
    if (moduleData$I.currentLever > 1) {
        moduleData$I.currentLever -= 1;
        moduleData$I.currentLeverText = `${moduleData$I.currentLever}X`;
        moduleData$I.currentProgress = moduleData$I.currentLever;
    }
}

moduleEvent$I.sendData = sendData;

moduleEvent$I.sliderValueChanged = sliderValueChanged$1;

moduleEvent$I.increaseLever = increaseLever$1;

moduleEvent$I.decreaseLever = decreaseLever$1;

async function start$I() {}

function defaultData$I() {
    return {
        emptyVisible: "visible",
        listVisible: "invisible",
        isCurrentChecked: false,
        fokFailedReasonShow: false,
        checkboxImg: "@drawable/edge_engine_unselected",
        list: [],
        orders: []
    };
}

const {moduleData: moduleData$H, moduleEvent: moduleEvent$H} = moduleDefine("historyOrder", start$I, defaultData$I);

async function copyOrderId(orderId) {
    try {
        await $nativeAPI.clipBoard(JSON.stringify({
            label: "",
            content: orderId,
            toast: $i18n.n_replicated
        }));
    } catch (error) {
        console.log(`copy clipboard error:${error}`);
    }
}

async function onSelectionChange$2() {
    moduleData$H.checkboxImg = moduleData$H.isCurrentChecked ? "@drawable/edge_engine_unselected" : "@drawable/edge_engine_selected";
    moduleData$H.isCurrentChecked = !moduleData$H.isCurrentChecked;
    requestHistoryOrder$1();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "order_history_current_tokens_only"
    });
}

function setListVisible$8(visible) {
    if (true == visible) {
        moduleData$H.emptyVisible = "gone";
        moduleData$H.listVisible = "visible";
    } else {
        moduleData$H.emptyVisible = "visible";
        moduleData$H.listVisible = "invisible";
    }
}

var isRequest$9 = false;

async function requestHistoryOrder$1() {
    var params = {
        userSign: commonData.userSign,
        pageSize: 100
    };
    console.log(`当前币对: ${commonData.currentSymbol} 是否选择当前币对:${moduleData$H.isCurrentChecked}`);
    if (moduleData$H.isCurrentChecked) {
        params["symbol"] = commonData.currentSymbol;
    }
    if (isRequest$9) {
        return;
    }
    isRequest$9 = true;
    showLoading(true);
    const data = await sendRequest$2("v1/copytrading/trader/open-matched-orders", params);
    isRequest$9 = false;
    handleData$9(data);
    showLoading(false);
}

function handleData$9(data) {
    try {
        if (!data || data == null || !data.orders || data.orders == null || data.orders.length == 0) {
            setListVisible$8(false);
            moduleData$H.list = [];
            uploadLog("copyTrading historyOrder handleData", "data is null");
            return;
        }
        uploadLog("copyTrading historyOrder handleData data", `${JSON.stringify(data)}`);
        setListVisible$8(true);
        const {totalSize: totalSize, orders: orders} = data;
        moduleData$H.orders = orders;
        handleOrders$1(orders);
    } catch (e) {
        uploadLog("copyTrading historyOrder handleData e", `${e}`);
        console.log(`handle order data error=${e}`);
    }
}

function handleOrders$1(orders) {
    try {
        for (let i = 0; i < orders.length; ++i) {
            let v = orders[i];
            v.type = "normal";
            let {coin: coin, unit: unit} = coinUnit(v.symbol);
            v.index = i;
            if (v.direction == "long") {
                v.directionLabel = $i18n.n_contract_position_buy_label;
                v.directionColor = getUpDownColor();
                v.directionDesc = $i18n.n_contract_trade_open_more;
            } else {
                v.directionLabel = $i18n.n_contract_position_sell_label;
                v.directionColor = getUpDownColor(false);
                v.directionDesc = $i18n.n_contract_trade_open_low;
            }
            v.statusMore = "gone";
            if (v.status == 2) {
                v.statusDesc = $i18n.n_copy_trading_order_fail;
                v.statusDescColor = "#F95A50";
                v.statusMore = "visible";
            } else if (v.status == 3) {
                v.statusDesc = $i18n.n_copy_trading_closing_position;
                v.statusDescColor = "@color/kColorSecondaryText";
            } else {
                v.statusDesc = $i18n.n_copy_trading_order_success;
                v.statusDescColor = "#00A171";
            }
            v.symbolDesc = symbolDesc(v.symbol);
            var positionString = $i18n.n_copy_trading_isolated;
            if (v.positionModel == 2) {
                positionString = $i18n.n_contract_super_margin;
            } else if (v.positionModel == 3) {
                positionString = $i18n.n_contract_trade_margin;
            }
            v.modeTypeName = positionString;
            v.leverDesc = `${v.lever}X`;
            v.orderId = v.orderIdShow;
            v.openPriceTitle = `${$i18n.n_contract_avg_position_price}(${unit})`;
            v.openAmountTitle = `${$i18n.n_option_market_list_setting_position_volume}(${commonData.unitType === UnitType.unitTypeUSDT ? unit : coin})`;
            v.profitTitle = `${$i18n.n_copy_trading_profit}(${unit})`;
            let currentContractInfo = getModelByContractShortType(v.symbol);
            let precision = getContractSizePrecision(currentContractInfo);
            let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
            v.closePriceStr = formatPrecision(v.closePrice, priceTickPrecision);
            v.openPriceStr = formatPrecision(v.openPrice, priceTickPrecision);
            try {
                if (commonData.unitType == UnitType.unitTypeUSDT) {
                    v.openAmountVolume = getVolume(v.openAmount, v.openPrice, getContractSizePrecision(currentContractInfo), commonData.unitType);
                } else {
                    v.openAmountVolume = formatPrecision(v.openAmount, precision);
                }
            } catch (e) {
                console.log(`orderItem--e = ${e}`);
            }
            if (typeof v.profitRate === "string" && !isNaN(parseFloat(v.profitRate))) {
                const profitRate = formatPrecision(multiply(v.profitRate, "100"), 2);
                v.profitRateStr = `${profitRate}%`;
            } else {
                v.profitRateStr = "--";
            }
            if (parseFloat(v.profit) > 0) {
                v.profitStr = `+${v.profit}`;
            } else if (isNaN(parseFloat(v.profit))) {
                v.profitStr = "--";
            } else {
                v.profitStr = `${formatPrecision(v.profit, 4)}`;
            }
            v.profitDescColor = getColorByNumber$4(v.profit);
            v.profitDesc = `${v.profitStr}(${v.profitRateStr})`;
            v.closePriceTitle = `${$i18n.n_contract_share_history_position_close_price}(${unit})`;
            v.followTakesTitle = `${$i18n.n_copytrading_share_withholding}(${unit})`;
            v.followTakesColor = getColorByNumber$4(v.benefit);
        }
        moduleData$H.list = orders;
    } catch (e) {
        uploadLog("copyTrading historyOrder handleOrders e", `${e}`);
    }
}

function refreshHistoryOrderData() {
    handleOrders$1(moduleData$H.orders);
}

function getColorByNumber$4(number) {
    let profit = parseFloat(number);
    if (isNaN(profit)) {
        return "@color/kColorSecondaryText";
    } else if (profit >= 0) {
        return getUpDownColor();
    } else {
        return getUpDownColor(false);
    }
}

async function clickedItem$4(index) {
    if (index >= moduleData$H.list.length) {
        return;
    }
    let item = moduleData$H.list[index];
    console.log(`订单点击 at:${index} orderId:${item.orderId} 数据：${JSON.stringify(item)}`);
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&navConfig=native&rootName=orderDetail&xml=orderDetail&isTrader=1&orderId=${item.id}`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "order_history_order_details"
    });
}

async function onAppear$g() {
    commonData.curTabType = TabType.tabTypeHistory;
    requestHistoryOrder$1();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "order_history"
    });
}

async function showFokAlert(status) {
    if (status != 2) {
        return;
    }
    moduleData$H.fokFailedReasonShow = true;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "order_history_failed"
    });
}

function popDismiss$3() {
    moduleData$H.fokFailedReasonShow = false;
}

function symbolChange() {
    if (true == moduleData$H.isCurrentChecked) {
        requestHistoryOrder$1();
    }
}

moduleEvent$H.shareAction = async function(index) {
    if (index >= moduleData$H.list.length) {
        return;
    }
    let item = moduleData$H.list[index];
    const traderInfo = await sendRequest$2("v1/copytrading/trader-info", {
        userSign: item.userSign
    });
    if (traderInfo != null) {
        moduleData$H.nickName = traderInfo.nickName;
        moduleData$H.imgUrl = traderInfo.imgUrl;
    }
    moduleData$H.symbol = item.symbolDesc;
    moduleData$H.leverDesc = item.leverDesc;
    if (item.direction == "long") {
        moduleData$H.directionColor = getUpDownColor();
        moduleData$H.directionDesc = $i18n.n_exchange_buy_in;
    } else {
        moduleData$H.directionColor = getUpDownColor(false);
        moduleData$H.directionDesc = $i18n.n_exchange_sell_out;
    }
    let profitColor = getUpDownColor();
    let profitRate = parseFloat(item.profitRate);
    if (profitRate >= 0) {
        profitColor = getUpDownColor();
        moduleData$H.profitRateStr = `+${format(profitRate * 100, 2)}%`;
    } else {
        profitColor = getUpDownColor(false);
        moduleData$H.profitRateStr = `${format(profitRate * 100, 2)}%`;
    }
    moduleData$H.profitColor = profitColor;
    moduleData$H.profitRateTitle = `${$i18n.n_copy_trading_yield}(${$i18n.n_copy_trading_closed_position})`;
    moduleData$H.openPriceTitle = item.openPriceTitle;
    moduleData$H.openPriceStr = item.openPriceStr;
    moduleData$H.closePriceStr = item.closePriceStr;
    moduleData$H.closePriceTitle = item.closePriceTitle;
    moduleData$H.time = (new Date).Format("MM/dd/yyyy hh:mm");
    $nativeAPI.shareAbility({
        type: "renderSync",
        template: "trader_historyorder_share",
        waitTime: 2,
        jumpUrl: ""
    });
};

moduleEvent$H.popDismiss = popDismiss$3;

moduleEvent$H.copyOrderId = copyOrderId;

moduleEvent$H.onSelectionChange = onSelectionChange$2;

moduleEvent$H.clickedItem = clickedItem$4;

moduleEvent$H.onAppear = onAppear$g;

moduleEvent$H.showFokAlert = showFokAlert;

const Tab_Select_Bg_Color = "@color/kColorMajorTheme006";

const Tab_Normal_Bg_Color = "#00000000";

const Tab_Select_Text_Color = "@color/kColorMajorTheme100";

const Tab_Normal_Text_Color = "@color/kColorSecondaryText";

const CheckBox_Unselect_Img = "@drawable/edge_engine_unselected";

var limitPriceList = [];

var stopProfitStopLossList = [];

function defaultData$H() {
    return {
        tabIndex: 0,
        limitBg: Tab_Select_Bg_Color,
        profitAndLossBg: Tab_Normal_Bg_Color,
        limitPriceOrdersCount: "",
        stopProfitStopLossCount: "",
        limitOrderColor: Tab_Select_Text_Color,
        profitAndLossColor: Tab_Normal_Text_Color,
        checkboxImg: CheckBox_Unselect_Img,
        isCurrentChecked: false,
        listData: [],
        cancelOrderDialogShow: "false"
    };
}

async function start$H() {
    limitPriceList = [];
    stopProfitStopLossList = [];
    queryAllDelegateOrders();
}

const {moduleData: moduleData$G, moduleEvent: moduleEvent$G} = moduleDefine("currentDelegation", start$H, defaultData$H);

async function queryAllDelegateOrders() {
    var param = {
        pageSize: 100,
        pageNo: 1,
        type: 0
    };
    if (moduleData$G.isCurrentChecked) {
        param.symbol = commonData.currentSymbol;
    }
    try {
        const orders = await sendRequest$2("v1/copytrading/query-all-delegateorders", param, 1, 0, {
            "Content-Type": "application/json"
        });
        if (!orders || orders == null) {
            uploadLog("copyTrading currentDelegation queryAllDelegateOrders", "data is null");
            return;
        }
        uploadLog("copyTrading currentDelegation queryAllDelegateOrders", `${JSON.stringify(orders)}`);
        moduleData$G.limitPriceOrdersCount = `${orders.limitPriceOrdersCount == "0" ? "" : "(" + orders.limitPriceOrdersCount + ")"}`;
        moduleData$G.stopProfitStopLossCount = `${orders.stopProfitStopLossCount == "0" ? "" : "(" + orders.stopProfitStopLossCount + ")"}`;
        dataProcessingLimit(orders.limitPriceList);
        limitPriceList = orders.limitPriceList;
        dataProcessingProfitAndLoss(orders.stopProfitStopLossList);
        stopProfitStopLossList = orders.stopProfitStopLossList;
        refreshListStatusWithTabIndex();
    } catch (e) {
        uploadLog("copyTrading currentDelegation queryAllDelegateOrders error", `${e}`);
    }
}

function dataProcessingLimit(list) {
    try {
        var startIndex = 0;
        for (var item of list) {
            item.type = "limit";
            item.itemIndex = startIndex.toString();
            startIndex++;
            let {coin: coin, unit: unit} = coinUnit(item.contractCode);
            item.symbolDesc = symbolDesc(item.contractCode);
            if (item.direction == "long") {
                item.directionLabel = $i18n.n_contract_position_buy_label;
                item.directionColor = getUpDownColor();
                item.directionDesc = $i18n.n_contract_trade_open_more;
            } else {
                item.directionLabel = $i18n.n_contract_position_sell_label;
                item.directionColor = getUpDownColor(false);
                item.directionDesc = $i18n.n_contract_trade_open_low;
            }
            let currentContractInfo = getModelByContractShortType(item.symbol);
            let precision = getContractSizePrecision(currentContractInfo);
            let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
            item.modeTypeName = item.modeType == 1 ? $i18n.n_contract_trade_margin : $i18n.n_contract_super_margin;
            item.leverDesc = `${item.lever}X`;
            item.orderVolumeTitle = `${$i18n.n_exchange_order_list_entrust_amount}(${commonData.unitType === UnitType.unitTypeUSDT ? unit : coin})`;
            item.orderVolume = checkUnitPrice(item.volume, item.contractCode);
            item.commissionPriceTitle = $i18n.n_exchange_order_list_entrust_price + "(" + unit + ")";
            item.commissionPrice = checkStr(item.price, priceTickPrecision);
            item.freezeMarginTitle = $i18n.n_copy_trading_freeze_margin + "(" + unit + ")";
            item.freezeMargin = checkStr(formatPrecision(item.marginFrozen));
            item.turnoverTitle = `${$i18n.n_exchange_order_detail_trade_amount}(${commonData.unitType === UnitType.unitTypeUSDT ? unit : coin})`;
            item.turnover = checkUnitPrice(item.tradeVolume, item.contractCode);
            item.averageTransactionPriceTitle = $i18n.n_exchange_order_list_trade_avg_price + "(" + unit + ")";
            item.averageTransactionPrice = checkStr(item.tradeAvgPrice, priceTickPrecision);
            item.feesTitle = $i18n.n_exchange_order_detail_fee + "(" + unit + ")";
            let feePrecision = getFeeAmountPrecision(currentContractInfo);
            item.fees = checkStr(item.fee, feePrecision);
            var dateTime = "";
            if (item.createdAt != null && item.createdAt != "" && item.createdAt != "undefined") {
                const tempDate = new Date(item.createdAt);
                const year = tempDate.getFullYear();
                const month = tempDate.getMonth() + 1;
                const date = tempDate.getDate();
                const hours = tempDate.getHours();
                const minutes = tempDate.getMinutes();
                dateTime = ` ${hours}:${minutes} ${date}/${month}`;
            }
            item.orderTime = $i18n.n_contract_order_time + dateTime;
        }
    } catch (e) {
        uploadLog("copyTrading currentDelegation dataProcessingLimit error", `${e}`);
    }
}

function dataProcessingProfitAndLoss(list) {
    var startIndex = 0;
    for (var item of list) {
        item.type = "profit_loss";
        item.itemIndex = startIndex.toString();
        startIndex++;
        let {coin: coin, unit: unit} = coinUnit(item.contractCode);
        item.symbolDesc = symbolDesc(item.contractCode);
        if (item.direction == "long") {
            item.directionLabel = $i18n.n_contract_position_buy_label;
            item.directionColor = getUpDownColor();
            item.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            item.directionLabel = $i18n.n_contract_position_sell_label;
            item.directionColor = getUpDownColor(false);
            item.directionDesc = $i18n.n_contract_trade_open_low;
        }
        let currentContractInfo = getModelByContractShortType(item.symbol);
        getContractSizePrecision(currentContractInfo);
        let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
        item.modeTypeName = item.modeType == 1 ? $i18n.n_contract_trade_margin : $i18n.n_contract_super_margin;
        item.leverDesc = `${item.lever}X`;
        item.orderVolumeTitle = `${$i18n.n_exchange_order_list_entrust_amount}(${commonData.unitType === UnitType.unitTypeUSDT ? unit : coin})`;
        item.orderVolume = checkUnitPrice(item.volume, item.contractCode);
        item.triggerPriceTitle = $i18n.n_exchange_trigger_price + "(" + unit + ")";
        item.commissionPriceTitle = $i18n.n_exchange_order_list_entrust_price + "(" + unit + ")";
        if (checkStr(item.triggerPrice) == "--") {
            item.triggerPriceShow = "--";
        } else if (item.triggerType == "ge") {
            item.triggerPriceShow = $i18n.n_contract_last_price + "≥" + formatPrecision(item.triggerPrice, priceTickPrecision);
        } else if (item.triggerType == "le") {
            item.triggerPriceShow = $i18n.n_contract_last_price + "≤" + formatPrecision(item.triggerPrice, priceTickPrecision);
        } else {
            item.triggerPriceShow = "--";
        }
        if (item.tpslOrderType == "sl") {
            item.orderType = $i18n.n_contract_stop_loss;
        } else if (item.tpslOrderType == "tp") {
            item.orderType = $i18n.n_contract_take_profit;
        }
        var dateTime = "";
        if (item.createdAt != null && item.createdAt != "" && item.createdAt != "undefined") {
            const tempDate = new Date(item.createdAt);
            tempDate.getFullYear();
            const month = tempDate.getMonth() + 1;
            const date = tempDate.getDate();
            const hours = tempDate.getHours();
            const minutes = tempDate.getMinutes();
            dateTime = ` ${hours}:${minutes} ${date}/${month}`;
        }
        item.orderTime = $i18n.n_contract_order_time + dateTime;
    }
}

function refreshOpenOrdersData() {
    dataProcessingLimit(limitPriceList);
    dataProcessingProfitAndLoss(stopProfitStopLossList);
    refreshListStatusWithTabIndex();
}

function refreshListStatusWithTabIndex() {
    if (moduleData$G.tabIndex == 0) {
        moduleData$G.showEmpty = limitPriceList.length == 0 ? "visible" : "gone";
        moduleData$G.listData = limitPriceList;
    } else {
        moduleData$G.showEmpty = stopProfitStopLossList.length == 0 ? "visible" : "gone";
        moduleData$G.listData = stopProfitStopLossList;
    }
}

function checkUnitPrice(price, symbol) {
    if (price == null || price == "" || price == "undefined") {
        return "--";
    }
    let data = commonData.linearSwapWsData[symbol];
    let usePrice = "0";
    if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
        return "--";
    } else {
        usePrice = data.price;
    }
    let currentContractInfo = getModelByContractShortType(symbol);
    return getVolume(price, usePrice, getContractSizePrecision(currentContractInfo), commonData.unitType);
}

function checkStr(str, precision = 4) {
    if (str == null || str == "" || str == "undefined") {
        return "--";
    }
    return formatPrecision(str, precision);
}

async function resetSelectTab$1(index) {
    if (index == 0) {
        moduleData$G.limitBg = Tab_Select_Bg_Color;
        moduleData$G.profitAndLossBg = Tab_Normal_Bg_Color;
        moduleData$G.limitOrderColor = Tab_Select_Text_Color;
        moduleData$G.profitAndLossColor = Tab_Normal_Text_Color;
    } else {
        moduleData$G.limitBg = Tab_Normal_Bg_Color;
        moduleData$G.profitAndLossBg = Tab_Select_Bg_Color;
        moduleData$G.limitOrderColor = Tab_Normal_Text_Color;
        moduleData$G.profitAndLossColor = Tab_Select_Text_Color;
    }
}

async function showCancelDialog() {
    if (limitPriceList.length > 0 || stopProfitStopLossList.length > 0) {
        moduleData$G.cancelOrderDialogShow = "true";
    }
}

async function cancelDialogClose() {
    moduleData$G.cancelOrderDialogShow = "false";
}

async function cancelAllOrder() {
    moduleData$G.cancelOrderDialogShow = "false";
    showLoading(true);
    const code = await sendRequestReturnCode("v1/copytrading/trader/cancel-all-openorders", {}, 1, 0, {
        "Content-Type": "application/json"
    });
    showLoading(false);
    if (code == 200) {
        refreshData();
        showToast($i18n.n_copy_trading_already_revoke_all_delegates);
    } else {
        showToast($i18n.n_copy_trading_revoke_delegates_failed);
    }
    if (moduleData$G.tabIndex) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "limit_order_cancel_all"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "open_orders_tp/sl_cancel_all"
        });
    }
}

async function cancelOrder(type, index) {
    try {
        var orderId = "";
        var path = "";
        if (type == 0) {
            orderId = limitPriceList[index].orderId;
            path = "v1/copytrading/cancel-delegate-order";
        } else {
            orderId = stopProfitStopLossList[index].orderId;
            path = "v1/copytrading/cancel-stop-profit-stop-loss-order";
        }
        showLoading(true);
        const code = await sendRequestReturnCode(path, {
            orderId: orderId
        }, 1, 0, {
            "Content-Type": "application/json"
        });
        showLoading(false);
        if (code == 200) {
            queryAllDelegateOrders();
            showToast($i18n.n_order_cancel_success_toast);
        }
    } catch (e) {
        console.log(`cancelOrder--\x3e> error = ${e}`);
    }
    if (type == 0) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "limit_order_cancel"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "open_orders_tp/sl_cancel"
        });
    }
}

moduleEvent$G.tabSelect = async function(index) {
    moduleData$G.tabIndex = index;
    resetSelectTab$1(index);
    refreshListStatusWithTabIndex();
    if (index == 0) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "limit_order"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "open_orders_tp/sl"
        });
    }
};

moduleEvent$G.onSelectionChange = async function() {
    moduleData$G.checkboxImg = moduleData$G.isCurrentChecked ? "@drawable/edge_engine_unselected" : "@drawable/edge_engine_selected";
    moduleData$G.isCurrentChecked = !moduleData$G.isCurrentChecked;
    queryAllDelegateOrders();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "open_orders_current_tokens_only"
    });
};

moduleEvent$G.onAppear = async function() {
    commonData.curTabType = TabType.tabTypeOpenOrders;
    refreshData();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "open_orders"
    });
};

async function refreshData() {
    queryAllDelegateOrders();
}

let timerObject$4;

function startTimer$4() {
    clearTimer$4();
    if (null == timerObject$4) {
        timerObject$4 = setInterval(timerCallback$4, 1e4);
    }
}

function clearTimer$4() {
    if (timerObject$4 != null) {
        clearInterval(timerObject$4);
        timerObject$4 = null;
    }
}

async function timerCallback$4() {
    await queryAllDelegateOrders();
    startTimer$4();
}

async function isEntrustOrders(symbol, modeType) {
    try {
        for (var item of limitPriceList) {
            if (item.symbol === symbol && item.modeType === modeType) {
                return true;
            }
        }
        for (var item of stopProfitStopLossList) {
            if (item.symbol === symbol && item.modeType === modeType) {
                return true;
            }
        }
        return false;
    } catch (e) {
        return false;
    }
}

moduleEvent$G.resetSelectTab = resetSelectTab$1;

moduleEvent$G.showCancelDialog = showCancelDialog;

moduleEvent$G.cancelDialogClose = cancelDialogClose;

moduleEvent$G.cancelAllOrder = cancelAllOrder;

moduleEvent$G.cancelOrder = cancelOrder;

moduleEvent$G.refreshData = refreshData;

moduleEvent$G.symbolChange = refreshData;

async function start$G() {
    requestPositionOrder$1();
}

var position = {
    emptyVisible: "gone",
    listVisible: "visible",
    isCurrentChecked: false,
    currentOrderCount: 0,
    positionClosePopShow: "false",
    positionCloseTipShow: "false",
    adjustMarginShow: "false",
    checkboxImg: "@drawable/edge_engine_unselected",
    addBackColor: "@color/KBaseColorContentBackground",
    reduceBackColor: "@color/KBaseColorInputBackground",
    maxMargin: $i18n.n_contract_adjust_position_max_increase,
    selectionIndex: -1,
    list: [],
    positions: [],
    positionClose: {},
    slippage: "-- USDT",
    positionMarginData: {},
    adjustMarginType: 1
};

function defaultData$G() {
    return position;
}

const {moduleData: moduleData$F, moduleEvent: moduleEvent$F} = moduleDefine("position", start$G, defaultData$G);

async function onPositionCloseTouch(index) {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "positions_close"
    });
    onPositionClose$1(index);
}

async function onPositionClose$1(index) {
    try {
        selectionIndex = index;
        console.log(`wp- onPositionClose:${index}`);
        let item = moduleData$F.list[index];
        let currentContractInfo = getModelByContractShortType(item.symbol);
        let precision = getContractSizePrecision(currentContractInfo);
        let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
        let {coin: coin, unit: unit} = coinUnit(item.symbol);
        let uint = commonData.unitType === UnitType.unitTypeUSDT ? unit : coin;
        item.futureNumber = `${item.amount} ${uint}`;
        try {
            let data = commonData.linearSwapWsData[item.symbol];
            let usePrice = "0";
            if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                uploadLog("copyTrading onPositionClose linearSwapWsData", "data is null");
                usePrice = item.openPrice;
            } else {
                uploadLog("copyTrading onPositionClose linearSwapWsData", `${JSON.stringify(data)}`);
                usePrice = data.price;
            }
            item.marketPrice = `${usePrice} USDT`;
            let amount = "--";
            if (commonData.unitType == UnitType.unitTypeUSDT) {
                amount = getVolume(item.amount, usePrice, getContractSizePrecision(currentContractInfo), commonData.unitType);
            } else {
                amount = item.amount;
            }
            item.futureNumber = `${amount} ${uint}`;
        } catch (e) {
            uploadLog("copyTrading onPositionClose linearSwapWsData e1", `${e}`);
            console.log(`orderItem--e = ${e}`);
        }
        item.openAvgPrice = `${formatPrecision(item.openPrice, priceTickPrecision)} USDT`;
        let profit = 0;
        let profitColor = getUpDownColor();
        if (item.direction == "long") {
            profit = multiply(parseFloat(item.marketPrice) - parseFloat(item.openPrice), parseFloat(item.amount));
        } else {
            profit = multiply(parseFloat(item.openPrice) - parseFloat(item.marketPrice), parseFloat(item.amount));
        }
        let profitString = formatPrecision(profit, 4);
        if (profit >= 0) {
            profitColor = getUpDownColor();
            item.profit = `+${profitString} USDT`;
        } else {
            profitColor = getUpDownColor(false);
            item.profit = `${profitString} USDT`;
        }
        item.profitColor = profitColor;
        $data.position.positionClose = item;
        uploadLog("copyTrading onPositionClose positionClosePopShow", `${$data.position.positionClosePopShow}`);
        if ($data.position.positionClosePopShow == "false") {
            $data.position.positionClosePopShow = "true";
            $data.position.isEntrustedOrders = await isEntrustOrders(item.symbol, item.modeType);
            console.log(`wp- onPositionClose orders:${$data.position.isEntrustedOrders}`);
            uploadLog("copyTrading onPositionClose positionClosePopShow", `${$data.position.positionClosePopShow}`);
        }
        requestClosingSlippageData(item.symbol, item.amount, item.direction);
    } catch (e) {
        uploadLog("copyTrading onPositionClose e", `${e}`);
    }
}

async function requestClosingSlippageData(contractCode, amount, direction) {
    console.log("requestClosingSlippageData");
    var params = {
        contractCode: contractCode,
        amount: `${amount}`,
        direction: direction == "long" ? 1 : 2
    };
    const data = await sendRequest$2("v1/copytrading/close-position-slippage-tips", params, 1, 0, {
        "Content-Type": "application/json"
    });
    try {
        if (!data || data !== null) {
            uploadLog("copyTrading requestClosingSlippageData close-position-slippage-tips", `${JSON.stringify(data)}`);
            console.log(`handle Position data =${JSON.stringify(data)}`);
            var strArray = contractCode.split("-");
            let currentContractInfo = getModelByContractShortType(contractCode);
            let precision = getPriceTickPrecision(currentContractInfo);
            moduleData$F.slippage = `${formatPrecision(data.marketClosingSlippage, precision)} ${strArray[1].toUpperCase()}`;
        } else {
            uploadLog("copyTrading requestClosingSlippageData close-position-slippage-tips", "null");
        }
    } catch (e) {
        uploadLog("copyTrading requestClosingSlippageData e", `${e}`);
        console.log(`handle close-position-slippage-tips data error=${e}`);
    }
}

function onClose$1() {
    $data.position.positionClosePopShow = "false";
}

function onAdjustMarginClose$1() {
    $data.position.adjustMarginShow = "false";
    subKeyBord$1(false);
}

async function onSelectionChange$1() {
    moduleData$F.checkboxImg = moduleData$F.isCurrentChecked ? "@drawable/edge_engine_unselected" : "@drawable/edge_engine_selected";
    moduleData$F.isCurrentChecked = !moduleData$F.isCurrentChecked;
    requestPositionOrder$1();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "positions_current_tokens_only"
    });
}

function popConfirm$1() {
    if ($data.position.isEntrustedOrders == true) {
        $data.position.positionCloseTipShow = "true";
    } else {
        $data.position.positionClosePopShow = "false";
        requestClosePosition$1();
    }
}

function tipConfirm$2() {
    $data.position.positionCloseTipShow = "false";
    requestClosePosition$1();
}

function onTipClose$2() {
    selectionIndex = -1;
    $data.position.positionCloseTipShow = "false";
}

function handlePositionData$1(positions) {
    for (let i = 0; i < positions.length; ++i) {
        let v = positions[i];
        let currentContractInfo = getModelByContractShortType(v.symbol);
        let precision = getContractSizePrecision(currentContractInfo);
        let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
        v.openPriceStr = formatPrecision(v.openPrice, priceTickPrecision);
        v.index = i;
        v.adjustMarginVisible = v.modeType == 1 ? "visible" : "gone";
        let {coin: coin, unit: unit} = coinUnit(v.symbol);
        if (v.direction == "long") {
            v.directionLabel = $i18n.n_contract_position_buy_label;
            v.directionColor = getUpDownColor();
            v.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            v.directionLabel = $i18n.n_contract_position_sell_label;
            v.directionColor = getUpDownColor(false);
            v.directionDesc = $i18n.n_contract_trade_open_low;
        }
        if (parseFloat(v.profit) >= 0) {
            v.openProfitColor = getUpDownColor();
            v.openProfitStr = `+${v.profit}`;
        } else if (isNaN(parseFloat(v.profit))) {
            v.openProfitColor = "@color/kColorSecondaryText";
            v.openProfitStr = "--";
        } else {
            v.openProfitColor = getUpDownColor(false);
            v.openProfitStr = `${v.profit}`;
        }
        if (!isNaN(parseFloat(v.profitRate))) {
            const openProfitRate = formatPrecision(multiply(v.profitRate, "100"), 2);
            v.openProfitRateStr = `${openProfitRate}%`;
        } else {
            v.openProfitRateStr = "--";
        }
        v.symbolDesc = symbolDesc(v.symbol);
        v.modeTypeName = v.modeType == 1 ? $i18n.n_contract_trade_margin : $i18n.n_contract_super_margin;
        v.leverDesc = `${v.lever}X`;
        if (v.liquidationPrice == null) {
            v.explosionPrice = "--";
        } else {
            v.explosionPrice = formatPrecision(v.liquidationPrice, priceTickPrecision);
        }
        v.bondAmount = formatPrecision(v.positionMargin, 4);
        let uint = commonData.unitType === UnitType.unitTypeUSDT ? unit : coin;
        v.openAmountVolumeTitle = $i18n.$intercept.n_contarct_position_volume_label(uint);
        let priceSubtitle = $i18n.n_contract_last_price;
        v.priceTitle = `${priceSubtitle}(USDT)`;
        let riskRateString = "--";
        if (!isNaN(parseFloat(v.riskRate))) {
            const riskRate = formatPrecision(multiply(v.riskRate, "100"), 2);
            riskRateString = `${riskRate}%`;
        }
        v.riskRateString = riskRateString;
        try {
            let data = commonData.linearSwapWsData[v.symbol];
            let usePrice = "0";
            if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                usePrice = v.openPrice;
                v.price = "--";
            } else {
                usePrice = data.price;
                v.price = data.price;
            }
            v.openAmountVolume = getVolume(v.amount, usePrice, precision, commonData.unitType);
            if (data && data != "undefined" && data != null && data.price != null || data.price != "" || data.price != "undefined" && data.price > 0) {
                let profit = getProfit(v.openPrice, usePrice, v.amount, v.direction);
                if (parseFloat(profit) >= 0) {
                    v.openProfitColor = getUpDownColor();
                    v.openProfitStr = `+${profit}`;
                } else if (isNaN(parseFloat(profit))) {
                    v.openProfitColor = "@color/kColorSecondaryText";
                    v.openProfitStr = "--";
                } else {
                    v.openProfitColor = getUpDownColor(false);
                    v.openProfitStr = profit;
                }
                let profitRate = getProfitRate(v.openPrice, usePrice, v.amount, v.direction, v.lever);
                if (profitRate != "") {
                    v.openProfitRateStr = profitRate;
                } else {
                    v.openProfitRateStr = "--";
                }
            }
        } catch (e) {
            console.log(`orderItem--e = ${e}`);
        }
        v.type = "1";
    }
    moduleData$F.list = positions;
}

async function requestClosePosition$1() {
    if (selectionIndex == -1) {
        return;
    }
    let item = moduleData$F.list[selectionIndex];
    let marketPrice = item.openPrice;
    try {
        let data = commonData.linearSwapWsData[item.symbol];
        let usePrice = "0";
        if (data && data.price && data.price.length > 0) {
            marketPrice = data.price;
        }
    } catch (e) {
        console.log(`orderItem--e = ${e}`);
    }
    var params = {
        symbol: item.symbol,
        amount: `${item.amount}`,
        direction: item.direction,
        modeType: item.modeType,
        marketPrice: `${marketPrice}`
    };
    console.log(`handle close position params =${JSON.stringify(params)}`);
    showLoading(true);
    const data = await sendRequest$2("v1/copytrading/trader/close-all-position", params, 1, 0, {
        "Content-Type": "application/json"
    });
    showLoading(false);
    console.log(`handle close position data =${JSON.stringify(data)}`);
    if (data && data.length > 0) {
        requestPositionOrder$1();
    }
}

async function requestPositionOrder$1() {
    var params = {
        userSign: commonData.userSign,
        pageSize: 100
    };
    console.log(`position 当前币对: ${commonData.currentSymbol} 是否选择当前币对:${moduleData$F.isCurrentChecked}`);
    if (moduleData$F.isCurrentChecked) {
        params["symbol"] = commonData.currentSymbol;
    }
    const data = await sendRequest$2("v1/copytrading/trader/positions", params);
    try {
        console.log(`handle Position data =${JSON.stringify(data)}`);
        if (!data || data == null || !data.positions || data.positions == null || data.positions.length == 0) {
            moduleData$F.list = [];
            moduleData$F.emptyVisible = "visible";
            moduleData$F.listVisible = "gone";
            moduleData$F.currentOrderCount = 0;
            return;
        }
        const {positions: positions} = data;
        moduleData$F.positions = positions;
        handlePositionData$1(positions);
        moduleData$F.currentOrderCount = positions.length;
        moduleData$F.emptyVisible = "gone";
        moduleData$F.listVisible = "visible";
        startTimer$3();
    } catch (e) {
        console.log(`handle Position data error=${e}`);
    }
}

async function requestPositionMargin$1(contractCode, amount, direction, type) {
    var params = {
        contractCode: contractCode,
        amount: amount == "" || amount == null || amount == undefined ? "0" : amount,
        direction: direction == "long" ? 1 : 2,
        type: type
    };
    const responseData = await sendRequest$2("v1/copytrading/isolated/position-margin", params, 1, 0, {
        "Content-Type": "application/json"
    });
    try {
        console.log(`handle PositionMargin data =${JSON.stringify(responseData)}`);
        if (responseData) {
            $data.position.positionMarginData = responseData;
            $data.position.available = `${getMaxWithdrawAvailable$1()} USDT`;
            if (responseData.marginPosition != null) {
                $data.position.marginPosition = `${formatPrecision(responseData.marginPosition, 4)} USDT`;
            } else {
                $data.position.marginPosition = `-- USDT`;
            }
            if (responseData.liquidationPrice != null) {
                let currentContractInfo = getModelByContractShortType(contractCode);
                let precision = getPriceTickPrecision(currentContractInfo);
                $data.position.liquidationPrice = `${formatPrecision(responseData.liquidationPrice, precision)} USDT`;
            } else {
                $data.position.liquidationPrice = `-- USDT`;
            }
            if ($data.position.adjustMarginShow == "false") {
                $data.position.adjustMarginShow = "true";
                subKeyBord$1(true);
            }
        }
    } catch (e) {
        console.log(`handle Position data error=${e}`);
    }
}

async function requestPositionMarginChange$1(contractCode, amount, direction, type) {
    var params = {
        contractCode: contractCode,
        amount: amount == "" || amount == null || amount == undefined ? "0" : amount,
        direction: direction == "long" ? 1 : 2,
        type: type
    };
    const responseData = await sendRequest$2("v1/copytrading/isolated/position-margin-change", params, 1, 0, {
        "Content-Type": "application/json"
    });
    try {
        console.log(`handle requestPositionMarginChange data =${JSON.stringify(responseData)}`);
        if (responseData) {
            $data.position.adjustMarginShow = "false";
            subKeyBord$1(false);
            $data.position.amount = "";
            setTimeout((() => {
                requestPositionOrder$1();
            }), 1e3);
        }
    } catch (e) {
        console.log(`handle requestPositionMarginChange data error=${e}`);
    }
}

let timerObject$3;

function startTimer$3() {
    clearTimer$3();
    if (null == timerObject$3) {
        timerObject$3 = setInterval(timerCallback$3, 5e3);
    }
}

function refreshPositionData() {
    handlePositionData$1(moduleData$F.positions);
}

function refreshPositionCloseData() {
    if ($data.position.positionClosePopShow == "true") {
        onPositionClose$1(selectionIndex);
    }
}

function clearTimer$3() {
    if (timerObject$3 != null) {
        clearInterval(timerObject$3);
        timerObject$3 = null;
    }
}

async function timerCallback$3() {
    await requestPositionOrder$1();
}

function adjustMargin$1(index) {
    console.log(`adjustMargin = ${index}`);
    selectionIndex = index;
    let item = moduleData$F.list[index];
    requestPositionMargin$1(item.symbol, "0", item.direction, $data.position.adjustMarginType);
}

async function onAppear$f() {
    commonData.curTabType = TabType.tabTypePosition;
    requestPositionOrder$1();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "positions"
    });
}

function onAdjustMargin$1(index) {
    if (index == 0) {
        $data.position.addBackColor = "@color/KBaseColorContentBackground";
        $data.position.reduceBackColor = "@color/KBaseColorInputBackground";
        $data.position.maxMargin = $i18n.n_contract_adjust_position_max_increase;
        $data.position.adjustMarginType = 1;
    } else {
        $data.position.addBackColor = "@color/KBaseColorInputBackground";
        $data.position.reduceBackColor = "@color/KBaseColorContentBackground";
        $data.position.maxMargin = $i18n.n_contract_adjust_position_max_decrease;
        $data.position.adjustMarginType = 2;
    }
    $data.position.amount = "";
    $data.position.available = "-- USDT";
    let item = moduleData$F.list[selectionIndex];
    requestPositionMargin$1(item.symbol, "0", item.direction, $data.position.adjustMarginType);
}

function onMax$1() {
    $data.position.amount = getMaxWithdrawAvailable$1();
}

function getMaxWithdrawAvailable$1() {
    if ($data.position.adjustMarginType == 1 && moduleData$F.positionMarginData.withdrawAvailableIn) {
        return formatPrecision(moduleData$F.positionMarginData.withdrawAvailableIn, 4);
    }
    if ($data.position.adjustMarginType == 2 && moduleData$F.positionMarginData.withdrawAvailableOut) {
        return formatPrecision(moduleData$F.positionMarginData.withdrawAvailableOut, 4);
    }
    return "--";
}

function onTextChange$1(text) {
    console.log(`wp onTextChange text=${text}`);
    if ($data.position.adjustMarginShow == "true") {
        let item = moduleData$F.list[selectionIndex];
        requestPositionMargin$1(item.symbol, $data.position.amount, item.direction, $data.position.adjustMarginType);
    }
}

function onFocusChange$1(text) {
    console.log(`wp onFocusChange text=${text}`);
}

function onConfirm$1() {
    console.log(`wp onConfirm`);
    let item = moduleData$F.list[selectionIndex];
    requestPositionMarginChange$1(item.symbol, $data.position.amount, item.direction, $data.position.adjustMarginType);
}

function subKeyBord$1(sub) {
    if (sub === true) {
        subKeybordSocket("sub");
    } else {
        subKeybordSocket("unsub");
    }
}

moduleEvent$F.closeKeyBoard = function() {
    moduleData$F.amountFocus = "false";
};

moduleEvent$F.shareAction = async function(index) {
    if (index >= moduleData$F.list.length) {
        return;
    }
    let item = moduleData$F.list[index];
    const traderInfo = await sendRequest$2("v1/copytrading/trader-info", {
        userSign: item.userSign
    });
    if (traderInfo != null) {
        moduleData$F.nickName = traderInfo.nickName;
        moduleData$F.imgUrl = traderInfo.imgUrl;
    }
    moduleData$F.symbol = item.symbolDesc;
    moduleData$F.leverDesc = item.leverDesc;
    if (item.direction == "long") {
        moduleData$F.directionColor = getUpDownColor();
        moduleData$F.directionDesc = $i18n.n_exchange_buy_in;
    } else {
        moduleData$F.directionColor = getUpDownColor(false);
        moduleData$F.directionDesc = $i18n.n_exchange_sell_out;
    }
    moduleData$F.profitRateStr = item.openProfitRateStr;
    let profitColor = getUpDownColor();
    if (parseFloat(item.profitRate) >= 0) {
        profitColor = getUpDownColor();
    } else {
        profitColor = getUpDownColor(false);
    }
    moduleData$F.profitColor = profitColor;
    moduleData$F.profitRateTitle = `${$i18n.n_copy_trading_yield}(${$i18n.n_copy_trading_position})`;
    moduleData$F.openPriceTitle = $i18n.n_copytrading_observation_price;
    moduleData$F.openPriceStr = item.openPriceStr;
    moduleData$F.newestPriceTitle = item.priceTitle;
    moduleData$F.newestPriceStr = item.price;
    moduleData$F.time = (new Date).Format("MM/dd/yyyy hh:mm");
    $nativeAPI.shareAbility({
        type: "renderSync",
        template: "trader_position_share",
        waitTime: 2,
        jumpUrl: ""
    });
};

moduleEvent$F.onAdjustMarginClose = onAdjustMarginClose$1;

moduleEvent$F.onPositionClose = onPositionCloseTouch;

moduleEvent$F.onClose = onClose$1;

moduleEvent$F.onTipClose = onTipClose$2;

moduleEvent$F.onSelectionChange = onSelectionChange$1;

moduleEvent$F.popConfirm = popConfirm$1;

moduleEvent$F.tipConfirm = tipConfirm$2;

moduleEvent$F.adjustMargin = adjustMargin$1;

moduleEvent$F.refreshData = requestPositionOrder$1;

moduleEvent$F.onAppear = onAppear$f;

moduleEvent$F.onAdjustMargin = onAdjustMargin$1;

moduleEvent$F.onMax = onMax$1;

moduleEvent$F.onTextChange = onTextChange$1;

moduleEvent$F.onFocusChange = onFocusChange$1;

moduleEvent$F.onConfirm = onConfirm$1;

function refreshTradeData() {
    refreshPositionData();
    refreshOpenOrdersData();
    refreshOrderData();
    if (commonData.curTabType == TabType.tabTypePosition) {
        refreshPositionCloseData();
    } else if (commonData.curTabType == TabType.tabTypeOrders) {
        refreshTradeLimitData();
        refreshTradeCloseData();
    }
    refreshHistoryOrderData();
}

function refreshCurTabbarData() {
    $event.order.refreshData();
    if (commonData.curTabType == TabType.tabTypePosition) {
        $event.position.refreshData();
    } else if (commonData.curTabType == TabType.tabTypeOpenOrders) {
        $event.currentDelegation.refreshData();
    }
}

async function start$F() {}

function defaultData$F() {
    return {
        titleVisibility: "visible",
        oneButtonVisibility: "gone",
        twoButtonVisibility: "visible",
        centerButtonText: $i18n.n_copy_trading_me_know,
        leftButtonText: $i18n.n_cancel,
        rightButtonText: $i18n.n_sure,
        popTitle: $i18n.n_copy_trading_tip,
        popContent: "--",
        popShow: "false"
    };
}

const {moduleData: moduleData$E, moduleEvent: moduleEvent$E} = moduleDefine("commonPop", start$F, defaultData$F);

function popUpContentOfOneButton(title, conetent, centerText, titleVisibility = "visible") {
    moduleData$E.oneButtonVisibility = "visible";
    moduleData$E.twoButtonVisibility = "gone";
    moduleData$E.titleVisibility = titleVisibility;
    if (title && title !== null) {
        moduleData$E.popTitle = title;
    }
    if (conetent && conetent !== null) {
        moduleData$E.popContent = conetent;
    }
    if (centerText && centerText !== null) {
        moduleData$E.centerButtonText = centerText;
    }
    moduleData$E.popShow = "true";
}

moduleEvent$E.popDismiss = function() {
    moduleData$E.popShow = "false";
};

var couponStr = "";

async function start$E() {}

function defaultData$E() {
    return {
        coupons: [],
        tradePopShow: false,
        mePopShow: false,
        homePopShow: false,
        couponCount: $i18n.$intercept.n_exchange_coupon_available_number("--"),
        couponNumber: "--",
        tradeCouponVisibility: "gone",
        meCouponVisibility: "gone",
        pageType: 2,
        backgroundColor: "@color/eColorInputFillDisabled",
        textColor: "@color/KBaseColorSecondaryText",
        curCouponIndex: -1
    };
}

var curCouponList = [];

const {moduleData: moduleData$D, moduleEvent: moduleEvent$D} = moduleDefine("couponPop", start$E, defaultData$E);

async function requestCoupon() {
    var params = {
        types: 14,
        state: 0
    };
    var data = await sendRequest$2("v1/open/voucher/user/list", params);
    try {
        if (!data || data == null || !data.couponList || data.couponList == null || data.couponList == 0) {
            curCouponList = [];
            moduleData$D.couponList = [];
            moduleData$D.tradeCouponVisibility = "gone";
            moduleData$D.meCouponVisibility = "gone";
            return;
        }
        const {couponList: couponList} = data;
        await handleData$8(couponList);
        updateCouponUI();
    } catch (e) {
        console.log(`handle couponList  error=${e}`);
    }
}

async function handleData$8(couponList) {
    curCouponList = [];
    for (let i = 0; i < couponList.length; ++i) {
        let v = couponList[i];
        v.index = i;
        v.type = "normal";
        v.selected = false;
        v.unSelectedImageVisibility = "visible";
        v.selectedImageVisibility = "gone";
        v.baseCurrency = v.baseCurrency.toUpperCase();
        v.image = "@drawable/icon_copytrading_currency_selection_n";
        v.unfold = false;
        v.unfoldVisibility = "gone";
        v.foldVisibility = "visible";
        if (v.validAt > 0) {
            v.time = $i18n.$intercept.n_coupon_time_dealine(new Date(v.validAt).Format("yyyy-MM-dd"));
        } else {
            v.time = "--";
        }
        curCouponList.push(v);
    }
    couponStr = JSON.stringify(curCouponList);
    let tempCouponStr = await read("copyTrading", "coupon");
    if (tempCouponStr == couponStr) {
        moduleData$D.showCouponPoint = "gone";
    } else {
        moduleData$D.showCouponPoint = "visible";
    }
    moduleData$D.coupons = curCouponList;
}

async function convertCoupon(id) {
    var params = {
        ids: [ id ]
    };
    var data = await sendRequest$2("v1/hbg/open/coupon/convert", params, 1, 0, {
        "Content-Type": "application/json"
    });
    if (data) {
        showToast($i18n.n_copytrading_successful_exchange);
        if (moduleData$D.pageType == 0) {
            moduleData$D.homePopShow = false;
        } else if (moduleData$D.pageType == 1) {
            moduleData$D.tradePopShow = false;
        } else if (moduleData$D.pageType == 2) {
            moduleData$D.mePopShow = false;
        }
        requestCoupon();
        $event.couponSelect();
    }
}

async function updateCouponUI() {
    if (curCouponList.length > 0) {
        moduleData$D.meCouponVisibility = "visible";
        moduleData$D.couponNumber = String(curCouponList.length);
        let type = await read("copyTrading", "modeTypeKey");
        if (type == 1) {
            moduleData$D.tradeCouponVisibility = "gone";
        } else {
            moduleData$D.tradeCouponVisibility = "visible";
            moduleData$D.couponCount = $i18n.$intercept.n_exchange_coupon_available_number(String(curCouponList.length));
        }
    } else {
        moduleData$D.tradeCouponVisibility = "gone";
        moduleData$D.meCouponVisibility = "gone";
    }
}

function popUpContentOfCoupon(pageType) {
    moduleData$D.pageType = pageType;
    if (pageType == 0) {
        moduleData$D.homePopShow = true;
    } else if (pageType == 1) {
        moduleData$D.tradePopShow = true;
    } else if (pageType == 2) {
        moduleData$D.mePopShow = true;
    }
    save("copyTrading", "coupon", couponStr);
    moduleData$D.showCouponPoint = "gone";
}

moduleEvent$D.popDismiss = function() {
    console.log(`wp popDismiss moduleData.pageType=${moduleData$D.pageType}`);
    if (moduleData$D.pageType == 0) {
        moduleData$D.homePopShow = false;
    } else if (moduleData$D.pageType == 1) {
        moduleData$D.tradePopShow = false;
    } else if (moduleData$D.pageType == 2) {
        moduleData$D.mePopShow = false;
    }
    resetData$1();
};

function resetData$1() {
    if (curCouponList.length > 0) {
        for (var i = 0; i < curCouponList.length; i++) {
            var item = curCouponList[i];
            item.selected = false;
            item.unSelectedImageVisibility = "visible";
            item.selectedImageVisibility = "gone";
            item.unfold = false;
            item.unfoldVisibility = "gone";
            item.foldVisibility = "visible";
        }
        moduleData$D.backgroundColor = "@color/eColorInputFillDisabled";
        moduleData$D.textColor = "@color/KBaseColorSecondaryText";
        moduleData$D.curCouponIndex = -1;
        moduleData$D.coupons = curCouponList;
    }
}

moduleEvent$D.couponTapAction = function(index) {
    console.log(`wp couponTapAction  index=${index}`);
    var selectedItem;
    for (var i = 0; i < curCouponList.length; i++) {
        var item = curCouponList[i];
        if (i == index) {
            item.selected = !item.selected;
            item.unSelectedImageVisibility = item.selected ? "gone" : "visible";
            item.selectedImageVisibility = item.selected ? "visible" : "gone";
            selectedItem = item;
        } else {
            item.selected = false;
            item.unSelectedImageVisibility = "visible";
            item.selectedImageVisibility = "gone";
        }
    }
    moduleData$D.backgroundColor = selectedItem.selected ? "@color/kColorMajorTheme100" : "@color/eColorInputFillDisabled";
    moduleData$D.textColor = selectedItem.selected ? "@color/KBaseTextColor" : "@color/KBaseColorSecondaryText";
    moduleData$D.curCouponIndex = selectedItem.selected ? index : -1;
    moduleData$D.coupons = curCouponList;
};

moduleEvent$D.unfoldRulesTapAction = function(index) {
    console.log(`wp unfoldRulesTapAction  index=${index}`);
    for (var i = 0; i < curCouponList.length; i++) {
        var item = curCouponList[i];
        if (i == index) {
            item.unfold = !item.unfold;
            item.unfoldVisibility = item.unfold ? "visible" : "gone";
            item.foldVisibility = item.unfold ? "gone" : "visible";
        } else {
            item.unfold = false;
            item.unfoldVisibility = "gone";
            item.foldVisibility = "visible";
        }
    }
    moduleData$D.coupons = curCouponList;
};

moduleEvent$D.convertTapAction = function() {
    console.log(`wp convertTapAction  index=${moduleData$D.curCouponIndex}`);
    if (moduleData$D.curCouponIndex != -1) {
        let coupon = moduleData$D.coupons[moduleData$D.curCouponIndex];
        console.log(`wp convert  =${coupon.id}`);
        convertCoupon(coupon.id);
    }
};

const STR_DEFAULT = "--";

const DEFAULT_PRECISION_PERCENT = "2";

const Edit_Board_SelectColor$4 = "@color/kColorMajorTheme100";

const Edit_Board_NormalColor$1 = "@color/KBaseColorInputBackground";

var OrderPriceType = {
    orderPriceLimit: 1,
    orderPriceLimitOpponent: 2,
    orderPriceLimitOpponent20: 6,
    orderPriceFOK: 8,
    orderPriceOpponent: 13,
    orderPriceOpponent20: 16,
    orderPriceMarket: 17
};

var OrderDirectionType = {
    buy: 1,
    sell: 2
};

var ModeType = {
    superMargin: 2,
    isolateMargin: 1
};

var OpponentType = {
    opponent: 0,
    opponent20: 1
};

var ExchangeType = {
    exchangeTypeFOK: 0,
    exchangeTypeLimit: 1,
    exchangeTypeMarket: 2
};

let typeList = [ $i18n.n_contract_order_type_limit, $i18n.n_contract_intro_market, "FOK" ];

let modeList = [ $i18n.n_contract_super_margin, $i18n.n_contract_trade_margin ];

let opponentList = [ $i18n.n_contract_trade_rival_price, $i18n.n_contract_trade_optimal_twenty ];

var isSocketedPrice = false;

$event.couponSelect = async function() {
    console.log(`wp ======couponSelect`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "coupon"
    });
    requestAssetInfo();
};

$event.orderBookSelect = function(selectPrice) {
    console.log(`wp ======selectPrice:${selectPrice}`);
    moduleData$C.price = scientificToNumber(selectPrice);
    if (moduleData$C.isSelectedOpponent) {
        moduleData$C.isSelectedOpponent = false;
        moduleData$C.opponentUnselected = "visible";
        moduleData$C.opponentSelected = "gone";
        moduleData$C.opponentTextColor = "@color/kColorPrimaryText";
        moduleData$C.opponentBorderColor = "@color/KBaseColorInputBackground";
        if (moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
            orderPriceType = OrderPriceType.orderPriceLimit;
        } else if (moduleData$C.exchangeType == ExchangeType.exchangeTypeMarket) {
            orderPriceType = OrderPriceType.orderPriceMarket;
        } else {
            orderPriceType = OrderPriceType.orderPriceFOK;
        }
    }
    moduleData$C.fiatPrice = calculateLawCurrencyVolume(selectPrice);
    moduleData$C.pricePopShow = moduleData$C.fiatPrice.length > 0 ? "visible" : "gone";
    updateExchangeUI();
};

function updateExchangeUI() {
    updateOpenAvailableUI();
    if (mSliderValue > 0 && moduleData$C.openAvailable != STR_DEFAULT) {
        let curAmount = mSliderValue * Number.parseFloat(moduleData$C.openAvailable);
        moduleData$C.amount = formatPrecision(curAmount, moduleData$C.precisionAmountFloat);
    }
    updateMarginUI(moduleData$C.amount, moduleData$C.isSelectedOpponent);
    if (moduleData$C.amountPopShow == "visible") {
        let currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
        let usdtVolume = calculateUsdtVolume(moduleData$C.amount, getContractSize(currentContractInfo), getOpenPrice(), getOtherAmountPrecision(currentContractInfo));
        moduleData$C.usdtAmount = `${usdtVolume}${commonData.unitType === UnitType.unitTypeUSDT ? moduleData$C.baseCurrency : "USDT"}`;
    }
}

async function start$D() {
    readMode();
    readType();
    startTimer$2();
    resetData();
    moduleData$C.buyTextColor = getUpDownColor();
    moduleData$C.sellTextColor = getUpDownColor(false);
    await requestAssetInfo();
    await requestContractInfoData();
    isSocketedPrice = false;
    await requestUserLeverRate(commonData.currentSymbol);
    await requestTpslRiskRate(commonData.currentSymbol);
    start$K();
    requestCoupon();
    requestBanner$1();
}

function defaultData$D() {
    return {
        markPrice: STR_DEFAULT,
        available: STR_DEFAULT,
        currentLever: STR_DEFAULT,
        currentLeverText: STR_DEFAULT,
        baseCurrency: STR_DEFAULT,
        quoteCurrency: STR_DEFAULT,
        price: "",
        fiatPrice: "",
        isSelectedOpponent: false,
        opponentSelected: "gone",
        opponentUnselected: "visible",
        opponentType: OpponentType.opponent,
        opponentPrice: opponentList[0],
        opponentPrice1: opponentList[0],
        opponentPrice2: opponentList[1],
        opponentTextColor: "@color/kColorPrimaryText",
        opponentBorderColor: "@color/KBaseColorInputBackground",
        modeType: ModeType.superMargin,
        modeTypeStr: modeList[0],
        modeTypeStr1: modeList[0],
        modeTypeStr2: modeList[1],
        modeTypeMenu1BgColor: "@color/KBaseColorInputBackground",
        modeTypeMenu2BgColor: "@color/KBaseColorContentBackground",
        modeTypeMenu1TextColor: "@color/kColorPrimaryText",
        modeTypeMenu2TextColor: "@color/KBaseColorSecondaryText",
        opponentTypeMenu1TextColor: "@color/kColorPrimaryText",
        opponentTypeMenu2TextColor: "@color/KBaseColorSecondaryText",
        buyTextColor: "#F95A50",
        sellTextColor: "#00A171",
        amount: "",
        usdtAmount: "",
        openAvailable: STR_DEFAULT,
        buyMargin: STR_DEFAULT,
        sellMargin: STR_DEFAULT,
        openAvailableStr: STR_DEFAULT,
        buyMarginStr: STR_DEFAULT,
        sellMarginStr: STR_DEFAULT,
        isSelectedTpsl: false,
        tpslTextVisibility: "gone",
        plUnSelected: "visible",
        orderDirection: OrderDirectionType.buy,
        precisionPriceFloat: DEFAULT_PRECISION_PERCENT,
        precisionAmountFloat: DEFAULT_PRECISION_PERCENT,
        amountHint: "",
        popShow: "false",
        progress: 0,
        popContent: "",
        popLeverShow: "false",
        chooseUnitDialogShow: "false",
        hasPosition: false,
        scalePopShow: "false",
        pricePopShow: "gone",
        seekBarTextVisible: "gone",
        amountPopShow: "gone",
        popBuyOrderConfirmShow: "false",
        popSellOrderConfirmShow: "false",
        priceFocus: "false",
        amountFocus: "false",
        spFocus: "false",
        slFocus: "false",
        rightC: "gone",
        rightP: "gone",
        unit: STR_DEFAULT,
        chooseSymbolVisible: "visible",
        chooseCurrencyVisible: "gone",
        chooseSymbolBorder: Edit_Board_SelectColor$4,
        chooseCurrencyBorder: Edit_Board_NormalColor$1,
        exchangeType: ExchangeType.exchangeTypeLimit,
        typeStr: typeList[0],
        typeStr1: typeList[0],
        typeStr2: typeList[1],
        typeStr3: typeList[2],
        typeMenu1TextColor: "@color/kColorPrimaryText",
        typeMenu2TextColor: "@color/KBaseColorSecondaryText",
        typeMenu3TextColor: "@color/KBaseColorSecondaryText",
        priceEditVisible: "visible",
        marketPriceVisible: "gone",
        currentNoticeIndex: "0",
        showNotice: "gone",
        noticeList: [],
        noticeIndicatorList: [],
        noticeIndicatorVisibility: "gone",
        tabInfo: `{"tabs":[{"title":"${$i18n.n_copytrading_current_observation}","template":"position_list","module":"position","onAppear":"position.onAppear"},{"title":"${$i18n.n_trade_open_order}","template":"currentDelegation","module":"currentDelegation","onAppear":"currentDelegation.onAppear"},{"title":"${$i18n.$intercept.n_copy_trading_current_order(String(0))}","template":"order_list","module":"order","onAppear":"order.onAppear","onTitleChange":"order.currentOrderCount"},{"title":"${$i18n.n_copy_trading_histroy_order}","template":"history_order_list","module":"historyOrder","onAppear":"historyOrder.onAppear"}],"history":{"template":"history_icon","module":"historyClick"}}`
    };
}

const {moduleData: moduleData$C, moduleEvent: moduleEvent$C} = moduleDefine("tradePanel", start$D, defaultData$D);

var rawAvailable = "0";

var trailFundBalance = "0";

var highestLever = 200;

var orderPriceType = OrderPriceType.orderPriceLimit;

var mSliderValue = 0;

var timerObject$2;

var closedNoticeSet = new Set;

var noticeExposureMap = new Map;

function startTimer$2() {
    clearTimer$2();
    requestContractInfoData();
    if (null == timerObject$2) {
        timerObject$2 = setInterval(timerCallback$2, 5e3);
    }
}

function clearTimer$2() {
    if (timerObject$2 != null) {
        clearInterval(timerObject$2);
        timerObject$2 = null;
    }
}

function cleanPops() {
    moduleData$C.switchPatternPopShow = "false";
    moduleData$C.popShow = "false";
    moduleData$C.popLeverShow = "false";
    moduleData$C.scalePopShow = "false";
    moduleData$C.opponentPriceShow = "false";
    moduleData$C.popBuyOrderConfirmShow = "false";
    moduleData$C.popSellOrderConfirmShow = "false";
    moduleData$C.chooseUnitDialogShow = "false";
    moduleData$C.switchTypePopShow = "false";
}

function updateAvailable() {
    requestAssetInfo();
}

async function requestBanner$1() {
    var params = {
        pageType: 55,
        showType: 9
    };
    let responseData = await sendRequest$2("v1/config/push/banner/list", params);
    console.log(`wp -- requestBanner=${JSON.stringify(responseData)}`);
    if (responseData && responseData != null && responseData.bannerAdvList != null && responseData.bannerAdvList.length > 0) {
        console.log(`wp -- rrequestBannerInfo=${responseData.bannerAdvList.length}`);
        var dataList = [];
        var i = 0;
        await loadSaveClosedNotice();
        for (let item of responseData.bannerAdvList) {
            console.log("requestNoticeList advId:" + item["advId"] + " has：" + closedNoticeSet.has(item["advId"]));
            if (closedNoticeSet.has(item["advId"])) {
                continue;
            }
            item.index = i++;
            item.type = "1";
            item.currentImageURL = commonData.colorMode === 1 ? item.nightImageUrl : item.imageUrl;
            dataList.push(item);
        }
        moduleData$C.noticeList = dataList;
        console.log(`wp -- bannerAdvList=${JSON.stringify(dataList)}`);
        moduleData$C.showNotice = dataList.length > 0 ? "visible" : "gone";
        noticeExposure$1();
    } else {
        moduleData$C.noticeList = [];
        moduleData$C.showNotice = "gone";
    }
    handleSliderIndicatorView();
}

async function loadSaveClosedNotice() {
    var noticeClosed = await read("contractNotice", "contractNoticeExposure");
    if (noticeClosed && noticeClosed.length > 0) {
        for (let item of noticeClosed) {
            closedNoticeSet.add(item);
        }
    }
}

function handleSliderIndicatorView() {
    let indicatorList = [];
    let noticeDataList = moduleData$C.noticeList;
    for (let index = 0; index < noticeDataList.length; index++) {
        if (moduleData$C.currentNoticeIndex == String(index)) {
            indicatorList.push({
                type: "1"
            });
        } else {
            indicatorList.push({
                type: "2"
            });
        }
    }
    moduleData$C.noticeIndicatorVisibility = indicatorList.length > 1 ? "visible" : "gone";
    moduleData$C.noticeIndicatorList = indicatorList;
}

moduleEvent$C.selectedNoticeIndex = async function(index) {
    console.log(`selectedNoticeIndex index =${index}`);
    moduleData$C.currentNoticeIndex = String(index);
    handleSliderIndicatorView();
    await noticeExposure$1();
};

moduleEvent$C.clickNoticeItem = async function() {
    var index = parseInt(moduleData$C.currentNoticeIndex);
    console.log(`clickNoticeItem index =${index}`);
    if (index >= moduleData$C.noticeList.length) {
        return;
    }
    var obj = moduleData$C.noticeList[index];
    console.log(`clickNoticeItem index =${JSON.stringify(obj)}`);
    if (obj.jumpTo != null) {
        console.log("clickNotice" + obj.jumpTo);
        await openURL(encodeURI(obj.jumpTo));
    }
    await analytics$1("appclick_copytrading", {
        business_category: "contracts_app",
        button_name: "banner",
        button_location: String(obj["advId"])
    });
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "waist_notification"
    });
};

moduleEvent$C.clickNoticeClose = async function() {
    moduleData$C.showNotice = "gone";
    var saveData = [];
    for (let i = 0; i < moduleData$C.noticeList.length; ++i) {
        var item = moduleData$C.noticeList[i];
        closedNoticeSet.add(item["advId"]);
    }
    closedNoticeSet.forEach((function(value) {
        saveData.push(value);
    }));
    moduleData$C.noticeList = [];
    console.log("requestNoticeList clickNoticeClose saveData:" + JSON.stringify(saveData));
    await save("contractNotice", "contractNoticeExposure", saveData);
};

async function noticeExposure$1() {
    var index = parseInt(moduleData$C.currentNoticeIndex);
    if (index >= moduleData$C.noticeList.length) {
        return;
    }
    var obj = moduleData$C.noticeList[index];
    if (!noticeExposureMap.has(obj["advId"])) {
        try {
            await analytics$1("pageview_copytrading", {
                business_category: "contracts_app",
                button_name: "banner",
                button_location: String(obj["advId"])
            });
            noticeExposureMap.set(obj["advId"], true);
        } catch (e) {
            console.log(`notice noticeExposureMap error, error=${e}`);
        }
    }
}

async function timerCallback$2() {
    await requestContractInfoData();
    await requestAssetInfo();
}

async function updatePositionInfo() {
    var params = {
        userSign: commonData.userSign,
        pageSize: 2
    };
    let symbol = commonData.currentSymbol;
    params["symbol"] = symbol;
    showLoading(1);
    const data = await sendRequest$2("v1/copytrading/trader/positions", params);
    showLoading(0);
    try {
        if (data) {
            const {positions: positions} = data;
            if (positions.length) {
                for (let i = 0; i < positions.length; ++i) {
                    let position = positions[i];
                    if (position.modeType == moduleData$C.modeType) {
                        return true;
                    }
                }
                return false;
            }
        }
        return false;
    } catch (e) {
        return false;
    }
}

async function requestMarkPrice(contractCode) {
    console.log(`request mark price`);
    var params = {
        contract_code: contractCode
    };
    var respData = await sendRequest$2("linear-swap-order/x/v1/linear_swap_mark_price", params, 0, 8);
    if (respData) {
        var contractInfo = getModelByContractCode(contractCode);
        let precision = getPriceTickPrecision(contractInfo);
        moduleData$C.markPrice = formatPrecision(respData, precision);
        $data.orderBook.markPrice = moduleData$C.markPrice;
        console.log(`respData is ${respData}, precision is ${precision}, markPrice is ${moduleData$C.markPrice}`);
    }
}

async function requestContractInfoData() {
    console.log("requestContractInfoData");
    var params = {
        business_type: "all",
        trade_partition: "all"
    };
    var respData = await sendRequest$2("linear-swap-order/x/v1/linear_swap_contract_info", params, 0, 8);
    if (respData) {
        commonData.contractInfoData = respData;
        commonData.currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
        moduleData$C.precisionPriceFloat = getPriceTickPrecision(commonData.currentContractInfo);
        let precisionAmount = commonData.unitType === UnitType.unitTypeUSDT ? 4 : getContractSizePrecision(commonData.currentContractInfo);
        moduleData$C.precisionAmountFloat = precisionAmount;
        let contractInfo = commonData.currentContractInfo;
        if (null != contractInfo && null != contractInfo.contract_code) {
            requestMarkPrice(contractInfo.contract_code);
        }
        $event.orderBook.updateOrderBook(commonData);
    } else {
        showToast($i18n.n_check_network);
    }
}

async function requestUserLeverRate(contractShortType) {
    console.log("requestUserLeverRate");
    var params = {
        symbol: contractShortType,
        modeType: moduleData$C.modeType
    };
    var respData = await sendRequest$2("v1/copytrading/contract-account/lever-rate", params);
    if (respData) {
        moduleData$C.currentLever = respData.currentLeverRate.toString();
        moduleData$C.currentLeverText = `${moduleData$C.currentLever}X`;
        respData.leverRateRange[0];
        highestLever = respData.leverRateRange[1];
        updateOpenAvailableUI();
    }
}

async function updateUserLeverRate(contractShortType, newLeverRate) {
    console.log("updateUserLeverRate");
    var params = {
        symbol: contractShortType,
        leverRate: newLeverRate,
        modeType: moduleData$C.modeType
    };
    var respData = await sendRequest$2("v1/copytrading/contract-account/lever-rate-update", params, 1, 0, {
        "Content-Type": "application/json"
    });
    if (respData) {
        moduleData$C.currentLever = respData.toString();
        moduleData$C.currentLeverText = `${moduleData$C.currentLever}X`;
        updateExchangeUI();
    }
}

async function requestAssetInfo() {
    console.log("requestAssetInfo");
    var params = {
        accountType: 2,
        currency: "USDT"
    };
    var respData = await sendRequest$2("v1/copytrading/contract-account/asset-info", params);
    if (respData) {
        let detailsArray = respData.contractDetail;
        let isUnionAccount = respData.isUnionAccount;
        trailFundBalance = respData.trailFundBalance;
        for (let i = 0; i < detailsArray.length; i++) {
            if (detailsArray[i].contractCode == commonData.currentSymbol) {
                if (isUnionAccount && moduleData$C.modeType == ModeType.superMargin) {
                    rawAvailable = detailsArray[i].crossMaxAvailable;
                } else {
                    rawAvailable = detailsArray[i].marginAvailable;
                }
                break;
            }
        }
        var formatted = formatPrecision(rawAvailable, 4);
        moduleData$C.available = `${formatted} USDT`;
        updateOpenAvailableUI();
    }
}

async function requestTpslRiskRate(contractShortType) {
    console.log("requestTpslRiskRate");
    var params = {
        symbol: contractShortType
    };
    var respData = await sendRequest$2("v1/copytrading/trader/risk-tpsl-rate", params);
    if (respData) {
        respData.riskRate.toString();
    }
}

async function placeOrder(symbol, price, marketPrice, amount, orderPriceType, orderDirection, leverRate, modelType, profitRate, lossRate) {
    console.log("placeOrder");
    var params = {};
    params.symbol = symbol;
    params.price = price;
    if (!isEmpty(marketPrice)) {
        params.marketPrice = marketPrice;
    }
    params.amount = amount;
    params.orderPriceType = parseInt(orderPriceType);
    params.orderDirection = parseInt(orderDirection);
    params.leverRate = parseInt(leverRate);
    params.modeType = parseInt(modelType);
    if (!isEmpty(profitRate)) {
        let tpRatioParam = divide(profitRate, 100);
        params.profitRate = tpRatioParam;
    }
    if (!isEmpty(lossRate)) {
        let slRatioParam = divide(lossRate, 100);
        params.lossRate = slRatioParam;
    }
    var respCode = await sendRequestReturnCode("v2/copytrading/trader/place-contract-order", params, 1, 0, {
        "Content-Type": "application/json"
    });
    if (respCode == 200) {
        console.log(`place order success, order id is ${respCode}`);
        showToast($i18n.n_copy_trading_submit_success);
        updateClearPanelData();
        requestAssetInfo();
        refreshCurTabbarData();
    } else if (respCode == 1096) {
        popUpContentOfOneButton($i18n.n_contract_trade_reminder_text, $i18n.n_trail_fund_above_60_toast);
    } else {
        console.log("place order faile");
    }
}

function updateCurrency() {
    var strArray = commonData.currentSymbol.split("-");
    moduleData$C.baseCurrency = strArray[0].toUpperCase();
    moduleData$C.quoteCurrency = strArray[1].toUpperCase();
    moduleData$C.baseCurrencyTitle = $i18n.n_contract_trade_input_amount + " " + strArray[0].toUpperCase();
    moduleData$C.quoteCurrencyTitle = $i18n.n_contract_unit_amount + " " + strArray[1].toUpperCase();
}

function updateUnit() {
    moduleData$C.unit = commonData.unitType === UnitType.unitTypeUSDT ? "USDT" : moduleData$C.baseCurrency;
    updateUnitChooseDialogStatus(commonData.unitType === UnitType.unitTypeUSDT ? 2 : 1);
    moduleData$C.amountHint = commonData.unitType === UnitType.unitTypeUSDT ? $i18n.n_contract_unit_amount : $i18n.n_otc_item_merchant_num;
}

function updateUnitChooseDialogStatus(key) {
    switch (key) {
      case 1:
        moduleData$C.chooseSymbolBorder = Edit_Board_SelectColor$4;
        moduleData$C.chooseCurrencyBorder = Edit_Board_NormalColor$1;
        moduleData$C.chooseSymbolVisible = "visible";
        moduleData$C.chooseCurrencyVisible = "gone";
        commonData.unitType = UnitType.unitTypeSymbol;
        save("copyTrading", "LINEAR_SWAP", "symbol");
        break;

      case 2:
        moduleData$C.chooseSymbolBorder = Edit_Board_NormalColor$1;
        moduleData$C.chooseCurrencyBorder = Edit_Board_SelectColor$4;
        moduleData$C.chooseSymbolVisible = "gone";
        moduleData$C.chooseCurrencyVisible = "visible";
        commonData.unitType = UnitType.unitTypeUSDT;
        save("copyTrading", "LINEAR_SWAP", "usdt");
        break;
    }
}

moduleEvent$C.chooseUnit = async function(key) {
    if (moduleData$C.chooseSymbolVisible == "visible" && key == 1 || moduleData$C.chooseCurrencyVisible == "visible" && key == 2) {
        moduleData$C.chooseUnitDialogShow = false;
        return;
    }
    updateUnitChooseDialogStatus(key);
    updateUnitData();
    refreshTradeData();
    $event.orderBook.updateOrderBook(commonData);
    if (key == 1) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "amount_coins"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "amount_usdt"
        });
    }
};

function updateUnitData() {
    moduleData$C.precisionAmountFloat = commonData.unitType === UnitType.unitTypeUSDT ? 4 : getContractSizePrecision(commonData.currentContractInfo);
    updateClearPanelData();
    updateUnit();
}

function updateClearPanelData() {
    moduleData$C.amount = "";
    moduleData$C.progress = 0;
    moduleData$C.popShow = false;
    moduleData$C.progress = 0;
    moduleData$C.popContent = "";
    moduleData$C.popLeverShow = false;
    moduleData$C.chooseUnitDialogShow = false;
    moduleData$C.amountPopShow = "gone";
    mSliderValue = 0;
    updateOpenAvailableUI();
    updateMarginUI(moduleData$C.amount, moduleData$C.isSelectedOpponent);
}

function resetData() {
    if (commonData.language.toLocaleLowerCase().search("zh-cn") == 0) {
        moduleData$C.rightC = "visible";
        moduleData$C.rightP = "visible";
    } else {
        moduleData$C.rightC = "gone";
        moduleData$C.rightP = "gone";
    }
    if (moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
        changedExChangeLimit();
    } else if (moduleData$C.exchangeType == ExchangeType.exchangeTypeMarket) {
        changedExChangeMarket();
    } else {
        changedExChangeFokOpponent();
    }
    moduleData$C.amount = "";
    moduleData$C.progress = 0;
    moduleData$C.tpRatio = "";
    moduleData$C.slRatio = "";
    moduleData$C.isSelectedTpsl = false;
    moduleData$C.tpslTextVisibility = "gone";
    moduleData$C.plUnSelected = "visible";
    moduleData$C.popShow = false;
    moduleData$C.progress = 0;
    moduleData$C.popContent = "";
    moduleData$C.popLeverShow = false;
    moduleData$C.chooseUnitDialogShow = false;
    moduleData$C.amountPopShow = "gone";
    mSliderValue = 0;
    updateCurrency();
    updateUnit();
    updateOpenAvailableUI();
    updateMarginUI(moduleData$C.amount, moduleData$C.isSelectedOpponent);
    refreshCurTabbarData();
}

async function onAppear$e() {
    console.log("tradePanel onAppear");
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_USDT-M"
    });
}

async function readType() {
    let type = await read("copyTrading", "exchangeType");
    console.log(`wp readType=${type}`);
    if (type) {
        orderPriceType = type == 0 ? OrderPriceType.orderPriceLimit : OrderPriceType.orderPriceOpponent;
        typeSelect(type);
    }
}

async function readMode() {
    let type = await read("copyTrading", "modeTypeKey");
    console.log(`wp readMode=${type}`);
    if (type) {
        moduleData$C.modeType = type == 0 ? ModeType.superMargin : ModeType.isolateMargin;
        moduleData$C.modeTypeStr = modeList[type];
        patternSelect(type);
    }
}

moduleEvent$C.transferTapAction = async function() {
    await openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/balance/transfer?coin=USDT&account=13`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "transfer"
    });
};

moduleEvent$C.typeTipsTapAction = async function() {
    if (moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
        moduleEvent$C.popTipsTapAction(2);
    } else if (moduleData$C.exchangeType == ExchangeType.exchangeTypeFOK) {
        moduleEvent$C.popTipsTapAction(0);
    } else {
        moduleEvent$C.popTipsTapAction(3);
    }
};

moduleEvent$C.popTipsTapAction = async function(type) {
    let content = getPopInfo(type);
    moduleData$C.popContent = content;
    if (moduleData$C.popShow == "true") {
        moduleData$C.popShow = "false";
    } else {
        moduleData$C.popShow = "true";
    }
};

moduleEvent$C.switchPatternPopDismiss = function() {
    moduleData$C.switchPatternPopShow = "false";
};

moduleEvent$C.clickSwitchPattern = function() {
    console.log("wp--------clickSwitchPattern");
    moduleData$C.switchPatternPopShow = "true";
};

moduleEvent$C.switchTypePopDismiss = function() {
    moduleData$C.switchTypePopShow = "false";
};

moduleEvent$C.clickSwitchType = function() {
    moduleData$C.switchTypePopShow = "true";
};

moduleEvent$C.leverPopClose = function() {
    moduleData$C.popLeverShow = "false";
};

moduleEvent$C.openChooseUnit = function() {
    closeKeyBoard();
    moduleData$C.chooseUnitDialogShow = "true";
};

moduleEvent$C.closeChooseUnit = function() {
    moduleData$C.chooseUnitDialogShow = "false";
};

moduleEvent$C.opponentTapAction = async function() {
    moduleData$C.pricePopShow = "gone";
    moduleData$C.isSelectedOpponent = !moduleData$C.isSelectedOpponent;
    if (moduleData$C.isSelectedOpponent) {
        moduleData$C.opponentSelected = "visible";
        moduleData$C.opponentUnselected = "gone";
        moduleData$C.opponentTextColor = "#0173E5";
        moduleData$C.opponentBorderColor = "#0173E5";
        moduleData$C.opponentPrice = opponentList[0];
        moduleData$C.opponentTypeMenu1TextColor = "@color/kColorPrimaryText";
        moduleData$C.opponentTypeMenu2TextColor = "@color/KBaseColorSecondaryText";
        if (moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
            orderPriceType = OrderPriceType.orderPriceLimitOpponent;
        } else {
            orderPriceType = OrderPriceType.orderPriceOpponent;
        }
    } else {
        moduleData$C.amountPopShow = "gone";
        moduleData$C.opponentUnselected = "visible";
        moduleData$C.opponentSelected = "gone";
        moduleData$C.opponentTextColor = "@color/kColorPrimaryText";
        moduleData$C.opponentBorderColor = "@color/KBaseColorInputBackground";
        moduleData$C.price = "";
        moduleData$C.amount = "";
        if (moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
            orderPriceType = OrderPriceType.orderPriceLimit;
        } else {
            orderPriceType = OrderPriceType.orderPriceFOK;
        }
    }
    updateExchangeUI();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "counterparty_price"
    });
};

moduleEvent$C.opponentMenuClick = function() {
    moduleData$C.opponentPriceShow = "true";
};

async function typeSelect(index) {
    moduleData$C.switchTypePopShow = "false";
    moduleData$C.typeStr = typeList[index];
    if (index == 0) {
        moduleData$C.exchangeType = ExchangeType.exchangeTypeLimit;
        moduleData$C.typeMenu1TextColor = "@color/kColorPrimaryText";
        moduleData$C.typeMenu2TextColor = "@color/KBaseColorSecondaryText";
        moduleData$C.typeMenu3TextColor = "@color/KBaseColorSecondaryText";
    } else if (index == 1) {
        moduleData$C.exchangeType = ExchangeType.exchangeTypeMarket;
        moduleData$C.typeMenu2TextColor = "@color/kColorPrimaryText";
        moduleData$C.typeMenu1TextColor = "@color/KBaseColorSecondaryText";
        moduleData$C.typeMenu3TextColor = "@color/KBaseColorSecondaryText";
    } else {
        moduleData$C.exchangeType = ExchangeType.exchangeTypeFOK;
        moduleData$C.typeMenu3TextColor = "@color/kColorPrimaryText";
        moduleData$C.typeMenu1TextColor = "@color/KBaseColorSecondaryText";
        moduleData$C.typeMenu2TextColor = "@color/KBaseColorSecondaryText";
    }
    if (moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
        changedExChangeLimit();
    } else if (moduleData$C.exchangeType == ExchangeType.exchangeTypeMarket) {
        changedExChangeMarket();
    } else {
        changedExChangeFokOpponent();
    }
    save("copyTrading", "exchangeType", index);
    updateClearPanelData();
}

moduleEvent$C.onClickTypeSelect = async function(index) {
    typeSelect(index);
    if (index == 0) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "limit_order"
        });
    } else if (index == 1) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "market_order"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "fok_order"
        });
    }
};

function changedExChangeLimit() {
    orderPriceType = OrderPriceType.orderPriceLimit;
    moduleData$C.isSelectedOpponent = false;
    moduleData$C.opponentUnselected = "visible";
    moduleData$C.opponentSelected = "gone";
    moduleData$C.opponentTextColor = "@color/kColorPrimaryText";
    moduleData$C.opponentBorderColor = "@color/KBaseColorInputBackground";
    moduleData$C.price = scientificToNumber($data.orderBook.latestPrice);
    moduleData$C.priceEditVisible = "visible";
    moduleData$C.marketPriceVisible = "gone";
    priceChange($data.orderBook.latestPrice);
}

function changedExChangeMarket() {
    orderPriceType = OrderPriceType.orderPriceMarket;
    moduleData$C.isSelectedOpponent = false;
    moduleData$C.opponentUnselected = "visible";
    moduleData$C.opponentSelected = "gone";
    moduleData$C.opponentTextColor = "@color/kColorPrimaryText";
    moduleData$C.opponentBorderColor = "@color/KBaseColorInputBackground";
    moduleData$C.price = "";
    moduleData$C.pricePopShow = "gone";
    moduleData$C.priceEditVisible = "gone";
    moduleData$C.marketPriceVisible = "visible";
    updateExchangeUI();
}

function changedExChangeFokOpponent() {
    orderPriceType = OrderPriceType.orderPriceOpponent;
    moduleData$C.isSelectedOpponent = true;
    moduleData$C.opponentUnselected = "gone";
    moduleData$C.opponentSelected = "visible";
    moduleData$C.opponentTextColor = "#0173E5";
    moduleData$C.opponentBorderColor = "#0173E5";
    moduleData$C.price = "";
    moduleData$C.pricePopShow = "gone";
    moduleData$C.priceEditVisible = "visible";
    moduleData$C.marketPriceVisible = "gone";
    onOpponentChange(moduleData$C.opponentType);
}

async function patternSelect(index) {
    let lastModeType = moduleData$C.modeType;
    moduleData$C.modeType = index == 0 ? ModeType.superMargin : ModeType.isolateMargin;
    moduleData$C.modeTypeStr = modeList[index];
    moduleData$C.switchPatternPopShow = "false";
    console.log(`wp onClickPatternSelect index: ${index} modeTypeStr: ${moduleData$C.modeTypeStr}`);
    if (moduleData$C.modeType != lastModeType) {
        requestUserLeverRate(commonData.currentSymbol);
        requestAssetInfo();
        resetData();
    }
    if (index == 0) {
        moduleData$C.modeTypeMenu1BgColor = "@color/KBaseColorInputBackground";
        moduleData$C.modeTypeMenu1TextColor = "@color/kColorPrimaryText";
        moduleData$C.modeTypeMenu2BgColor = "@color/KBaseColorContentBackground";
        moduleData$C.modeTypeMenu2TextColor = "@color/KBaseColorSecondaryText";
    } else {
        moduleData$C.modeTypeMenu2BgColor = "@color/KBaseColorInputBackground";
        moduleData$C.modeTypeMenu2TextColor = "@color/kColorPrimaryText";
        moduleData$C.modeTypeMenu1BgColor = "@color/KBaseColorContentBackground";
        moduleData$C.modeTypeMenu1TextColor = "@color/KBaseColorSecondaryText";
    }
    save("copyTrading", "modeTypeKey", index);
    updateCouponUI();
}

moduleEvent$C.onClickPatternSelect = async function(index) {
    patternSelect(index);
    if (index == 0) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "cross"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "isolated"
        });
    }
};

async function onOpponentChangeTouch(type) {
    if (type == 0) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "BBO"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "best20"
        });
    }
    onOpponentChange(type);
}

async function onOpponentChange(type) {
    moduleData$C.opponentType = type == 0 ? OpponentType.opponent : OpponentType.opponent20;
    moduleData$C.opponentPrice = opponentList[type];
    moduleData$C.opponentPriceShow = "false";
    if (moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
        orderPriceType = type == 0 ? OrderPriceType.orderPriceLimitOpponent : OrderPriceType.orderPriceLimitOpponent20;
    } else {
        orderPriceType = type == 0 ? OrderPriceType.orderPriceOpponent : OrderPriceType.orderPriceOpponent20;
    }
    if (type == 0) {
        moduleData$C.opponentTypeMenu1TextColor = "@color/kColorPrimaryText";
        moduleData$C.opponentTypeMenu2TextColor = "@color/KBaseColorSecondaryText";
    } else {
        moduleData$C.opponentTypeMenu2TextColor = "@color/kColorPrimaryText";
        moduleData$C.opponentTypeMenu1TextColor = "@color/KBaseColorSecondaryText";
    }
}

moduleEvent$C.seekBarValueChange = async function(progress) {
    let value = Number.parseFloat(moduleData$C.progress);
    if (value <= 0) {
        mSliderValue = 0;
    } else if (value > 100) {
        mSliderValue = 100;
    } else {
        mSliderValue = Number.parseFloat(value / 100).toFixed(2);
    }
    if (!(moduleData$C.openAvailable == "--")) {
        let curAmount = mSliderValue * Number.parseFloat(moduleData$C.openAvailable);
        let currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
        if (mSliderValue > 0) {
            moduleData$C.amount = formatPrecision(curAmount, moduleData$C.precisionAmountFloat);
        } else {
            moduleData$C.amount = "";
        }
        let usdtVolume = calculateUsdtVolume(moduleData$C.amount, getContractSize(currentContractInfo), getOpenPrice(), getOtherAmountPrecision(currentContractInfo));
        moduleData$C.usdtAmount = `${usdtVolume}${commonData.unitType === UnitType.unitTypeUSDT ? moduleData$C.baseCurrency : "USDT"}`;
        moduleData$C.amountPopShow = getOpenPrice() > 0 && usdtVolume.length > 0 ? "visible" : "gone";
        updateMarginUI(moduleData$C.amount, moduleData$C.isSelectedOpponent);
    }
    moduleData$C.seekBarTextVisible = moduleData$C.amount.length > 0 ? "visible" : "gone";
    if (moduleData$C.amount.length > 0) {
        moduleData$C.amountFocus = "false";
    }
    setTimeout((async function() {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "slider"
        });
    }), 1e3);
};

moduleEvent$C.seekBarTextViewClicked = function() {
    moduleData$C.seekBarTextVisible = "gone";
    moduleData$C.amountFocus = "true";
};

moduleEvent$C.tpslTapAction = async function() {
    if (moduleData$C.tpslTextVisibility == "gone") {
        moduleData$C.isSelectedTpsl = true;
        $event.orderBook.tpslSelected(true);
        moduleData$C.tpslTextVisibility = "visible";
        moduleData$C.plUnSelected = "gone";
    } else {
        moduleData$C.isSelectedTpsl = false;
        $event.orderBook.tpslSelected(false);
        moduleData$C.tpslTextVisibility = "gone";
        moduleData$C.plUnSelected = "visible";
        moduleData$C.tpRatio = "";
        moduleData$C.slRatio = "";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "tp/sl"
    });
};

moduleEvent$C.popDismiss = function() {
    moduleData$C.popShow = "false";
    moduleData$C.scalePopShow = "false";
};

moduleEvent$C.availableTapAction = function() {
    var available = formatPrecision(rawAvailable, 4);
    if (notNull(trailFundBalance)) {
        var trailFund = formatPrecision(trailFundBalance, 4);
        const conetent = $i18n.$intercept.n_contract_canuse_alert_explain_tips(available, trailFund);
        popUpContentOfOneButton($i18n.n_exchange_balance_notice_title, conetent);
    }
};

moduleEvent$C.couponTapAction = function() {
    popUpContentOfCoupon(1);
};

moduleEvent$C.startEditing = async function(type, isFocus) {
    console.log(`wp startEditing isFocus ${isFocus} type ${type} `);
    switch (type) {
      case 2:
        if (isFocus) {
            if (mSliderValue > 0) {
                moduleData$C.progress = 0;
                mSliderValue = 0;
            }
        }
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "quantity"
        });
        break;

      case 3:
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "take_profit"
        });
        break;

      case 4:
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "stop_loss"
        });
        break;
    }
};

moduleEvent$C.onTextChange = async function(key, text) {
    console.log(`wp onTextChange, key = ${key}, text = ${text}`);
    switch (key) {
      case 1:
        priceChange(text);
        break;

      case 2:
        amountChange(text);
        break;
    }
};

function priceChange(price) {
    moduleData$C.fiatPrice = calculateLawCurrencyVolume(`${convertNum(price.toString())}`);
    moduleData$C.pricePopShow = moduleData$C.fiatPrice.length > 0 ? "visible" : "gone";
    updateExchangeUI();
}

function amountChange(amount) {
    let currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
    let usdtVolume = calculateUsdtVolume(moduleData$C.amount, getContractSize(currentContractInfo), getOpenPrice(), getOtherAmountPrecision(currentContractInfo));
    moduleData$C.usdtAmount = `${usdtVolume}${commonData.unitType === UnitType.unitTypeUSDT ? moduleData$C.baseCurrency : "USDT"}`;
    updateMarginUI(amount, moduleData$C.isSelectedOpponent);
    moduleData$C.amountPopShow = getOpenPrice() > 0 && usdtVolume.length > 0 ? "visible" : "gone";
}

function updateOpenAvailableUI() {
    if (!isSocketedPrice && !isEmpty($data.orderBook.latestPrice) && Number.parseFloat($data.orderBook.latestPrice) != 0 && moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
        isSocketedPrice = true;
        moduleData$C.price = scientificToNumber($data.orderBook.latestPrice);
        priceChange($data.orderBook.latestPrice);
    }
    let price = getOpenPrice();
    console.log(`wp updateOpenAvailableUI price=${price}`);
    if (isEmpty(price) || isEmpty(moduleData$C.currentLever)) {
        moduleData$C.openAvailable = STR_DEFAULT;
        moduleData$C.openAvailableStr = `--`;
        return;
    }
    let currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
    let precision = getContractSizePrecision(currentContractInfo);
    let otherAmountPrecision = getOtherAmountPrecision(currentContractInfo);
    moduleData$C.openAvailable = calculateOpenAvailable(rawAvailable, moduleData$C.currentLever, price, precision, otherAmountPrecision);
    if (isEmpty(moduleData$C.openAvailable)) {
        moduleData$C.openAvailableStr = `--`;
    } else {
        moduleData$C.openAvailableStr = `${moduleData$C.openAvailable}`;
    }
}

function updateMarginUI(coinVolume, isOpponentPrice) {
    if (isEmpty(getOpenPrice()) || isEmpty(coinVolume)) {
        moduleData$C.buyMargin = STR_DEFAULT;
        moduleData$C.buyMarginStr = `-- ${moduleData$C.quoteCurrency}`;
        moduleData$C.sellMargin = STR_DEFAULT;
        moduleData$C.sellMarginStr = `-- ${moduleData$C.quoteCurrency}`;
        return;
    }
    if (Number.parseFloat(coinVolume) >= 0) {
        let currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
        let buyPrice = chooseBuyPrice(getOpenPrice(), $data.orderBook.latestPrice, isOpponentPrice, $data.orderBook.sellFirstPrice);
        moduleData$C.buyMargin = calcuateMargin(coinVolume, getContractSize(currentContractInfo), moduleData$C.currentLever, buyPrice, getOtherAmountPrecision(currentContractInfo));
        if (isEmpty(moduleData$C.buyMargin)) {
            moduleData$C.buyMarginStr = `-- ${moduleData$C.quoteCurrency}`;
        } else {
            moduleData$C.buyMarginStr = `${moduleData$C.buyMargin} ${moduleData$C.quoteCurrency}`;
        }
        let sellPrice = chooseSellPrice(getOpenPrice(), $data.orderBook.latestPrice, isOpponentPrice, $data.orderBook.buyFirstPrice);
        moduleData$C.sellMargin = calcuateMargin(coinVolume, getContractSize(currentContractInfo), moduleData$C.currentLever, sellPrice, getOtherAmountPrecision(currentContractInfo));
        if (isEmpty(moduleData$C.sellMargin)) {
            moduleData$C.sellMarginStr = `-- ${moduleData$C.quoteCurrency}`;
        } else {
            moduleData$C.sellMarginStr = `${moduleData$C.sellMargin} ${moduleData$C.quoteCurrency}`;
        }
    }
}

async function popLeverTapAction() {
    moduleEvent$C.closeKeyBoard();
    let hasPos = await updatePositionInfo();
    if (hasPos) {
        let content = getPopInfo(1);
        moduleData$C.popContent = content;
        moduleData$C.scalePopShow = "true";
        moduleData$C.popLeverShow = "false";
    } else {
        if (moduleData$C.currentLever !== STR_DEFAULT) {
            sendData({
                contractShortType: commonData.currentSymbol,
                positionMode: moduleData$C.modeType,
                currentLever: moduleData$C.currentLever,
                highestLever: highestLever
            });
            moduleData$C.popLeverShow = "true";
        }
        moduleData$C.scalePopShow = "false";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "leverage"
    });
}

moduleEvent$C.popLeverTapAction = popLeverTapAction;

moduleEvent$C.leverPopDismiss = function() {
    moduleData$C.scalePopShow = "false";
};

moduleEvent$C.opponentPricePopDismiss = function() {
    moduleData$C.opponentPriceShow = "false";
};

moduleEvent$C.popOrderConfirmClose = function() {
    moduleData$C.popBuyOrderConfirmShow = "false";
    moduleData$C.popSellOrderConfirmShow = "false";
};

moduleEvent$C.tradeTapAction = async function(type) {
    moduleEvent$C.closeKeyBoard();
    moduleData$C.orderDirection = type == 0 ? OrderDirectionType.buy : OrderDirectionType.sell;
    if (type == 0) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "open_long"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_USDT-M",
            button_name: "open_short"
        });
    }
    if (moduleData$C.exchangeType != ExchangeType.exchangeTypeMarket && !moduleData$C.isSelectedOpponent && (isEmpty(moduleData$C.price) || Number.parseFloat(moduleData$C.price) <= 0)) {
        showToast($i18n.n_copy_trading_enter_price);
        return;
    }
    if (moduleData$C.isSelectedOpponent) {
        let openPrice = getOpenPrice();
        console.log(`isSelectedOpponent = ${moduleData$C.isSelectedOpponent}, openPrice = ${openPrice}, isEmpty(openPrice) = ${isEmpty(openPrice)}`);
        if (isEmpty(openPrice) || openPrice == "0.0") {
            showToast($i18n.n_copy_trading_no_latest_price);
            return;
        }
    } else {
        console.log("moduleData.isSelectedOpponent is false");
    }
    if (isEmpty(moduleData$C.amount) || Number.parseFloat(moduleData$C.amount) <= 0) {
        showToast($i18n.n_copy_trading_enter_amount);
        return;
    }
    if (Number.parseFloat(moduleData$C.openAvailable) < Number.parseFloat(moduleData$C.amount)) {
        showToast($i18n.n_copy_trading_not_enough_assets_available);
        return;
    }
    let currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
    let minAmount = getMinVolume($data.orderBook.latestPrice, getContractSize(currentContractInfo), commonData.unitType);
    if (Number.parseFloat(moduleData$C.amount) < Number.parseFloat(minAmount)) {
        let toast = $i18n.$intercept.n_copy_trading_minimum_trade_volume(minAmount, moduleData$C.unit);
        showToast(toast);
        return;
    }
    if (moduleData$C.isSelectedTpsl) {
        let maxRatio = subtract(multiply(moduleData$C.currentLever, 100), .01);
        if (!isEmpty(moduleData$C.tpRatio)) {
            if (Number.parseFloat(moduleData$C.tpRatio) > Number.parseFloat(maxRatio)) {
                if (commonData.OS === 0 || commonData.OS === "0") {
                    showToast($i18n.$intercept.n_copy_trading_tp_max_ratio(maxRatio));
                } else {
                    showToast($i18n.$intercept.n_copy_trading_tp_max_ratio2(maxRatio));
                }
                return;
            }
            if (Number.parseFloat(moduleData$C.tpRatio) < .01) {
                if (commonData.OS === 0 || commonData.OS === "0") {
                    showToast($i18n.n_copy_trading_tp_set_min_ratio);
                } else {
                    showToast($i18n.n_copy_trading_tp_set_min_ratio2);
                }
                return;
            }
        }
        if (!isEmpty(moduleData$C.slRatio)) {
            if (Number.parseFloat(moduleData$C.slRatio) > Number.parseFloat(maxRatio)) {
                if (commonData.OS === 0 || commonData.OS === "0") {
                    showToast($i18n.$intercept.n_copy_trading_sl_max_ratio(maxRatio));
                } else {
                    showToast($i18n.$intercept.n_copy_trading_sl_max_ratio2(maxRatio));
                }
                return;
            }
            if (Number.parseFloat(moduleData$C.slRatio) < .01) {
                if (commonData.OS === 0 || commonData.OS === "0") {
                    showToast($i18n.n_copy_trading_sl_set_min_ratio);
                } else {
                    showToast($i18n.n_copy_trading_sl_set_min_ratio2);
                }
                return;
            }
        }
    }
    if (type == 0 && (moduleData$C.popBuyOrderConfirmShow == "false" || !moduleData$C.popBuyOrderConfirmShow)) {
        getTradeConfirmData();
        moduleData$C.popBuyOrderConfirmShow = "true";
    } else if (type == 1 && (moduleData$C.popSellOrderConfirmShow == "false" || !moduleData$C.popSellOrderConfirmShow)) {
        getTradeConfirmData();
        moduleData$C.popSellOrderConfirmShow = "true";
    }
};

moduleEvent$C.confirmOrder = async function() {
    moduleData$C.popBuyOrderConfirmShow = "false";
    moduleData$C.popSellOrderConfirmShow = "false";
    if (!clickThrottle(2e3)) return;
    let currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
    let volume = getCoinVolume(moduleData$C.amount, getOpenPrice(), getContractSizePrecision(currentContractInfo), commonData.unitType);
    await placeOrder(commonData.currentSymbol, getOpenPrice(), $data.orderBook.latestPrice, volume, orderPriceType, moduleData$C.orderDirection, moduleData$C.currentLever, moduleData$C.modeType, moduleData$C.tpRatio, moduleData$C.slRatio);
};

moduleEvent$C.updateLever = async function() {
    let lever = getCurrentLever();
    updateUserLeverRate(commonData.currentSymbol, lever.toString());
    moduleData$C.popLeverShow = "false";
};

function getTradeConfirmData() {
    moduleData$C.disPalyDirection = moduleData$C.orderDirection == OrderDirectionType.buy ? $i18n.n_contract_position_buy_label : $i18n.n_contract_position_sell_label;
    moduleData$C.disPalyDirectionColor = moduleData$C.orderDirection == OrderDirectionType.buy ? moduleData$C.buyTextColor : moduleData$C.sellTextColor;
    var strArray = commonData.currentSymbol.split("-");
    var baseCurrency = strArray[0].toUpperCase();
    var quoteCurrency = strArray[1].toUpperCase();
    var swap = $i18n.n_market_contract_swap_trade_name;
    moduleData$C.disPalyTitle = `${baseCurrency}${quoteCurrency} ${swap}`;
    moduleData$C.disPalyMode = moduleData$C.modeTypeStr;
    moduleData$C.disPalyLever = `${moduleData$C.currentLever} X`;
    var disPalyTypeStr = "--";
    var disPalyOpenPriceStr = "--";
    if (moduleData$C.exchangeType == ExchangeType.exchangeTypeLimit) {
        disPalyTypeStr = $i18n.n_contract_order_type_limit;
        disPalyOpenPriceStr = moduleData$C.isSelectedOpponent ? moduleData$C.opponentPrice : `${scientificToNumber(moduleData$C.price)} ${quoteCurrency}`;
    } else if (moduleData$C.exchangeType == ExchangeType.exchangeTypeMarket) {
        disPalyTypeStr = $i18n.n_contract_intro_market;
        disPalyOpenPriceStr = $i18n.n_copy_trading_market_price;
    } else {
        disPalyTypeStr = $i18n.n_copy_trading_limit_fok;
        disPalyOpenPriceStr = moduleData$C.isSelectedOpponent ? moduleData$C.opponentPrice : `${scientificToNumber(moduleData$C.price)} ${quoteCurrency}`;
    }
    moduleData$C.disPalyType = disPalyTypeStr;
    moduleData$C.disPalyOpenDirection = getOrderDirectionStr();
    moduleData$C.disPalyOpenPrice = disPalyOpenPriceStr;
    moduleData$C.disPalyOpenAmont = `${moduleData$C.amount} ${moduleData$C.unit}`;
    let currentContractInfo = getModelByContractShortType(commonData.currentSymbol);
    let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
    if (!isEmpty(moduleData$C.tpRatio)) {
        moduleData$C.tpShow = "visible";
        moduleData$C.disPalyTpRatio = `${moduleData$C.tpRatio}%`;
        moduleData$C.disPalyTpTriggerPrice = `${getTriggerPrice(getOpenPrice(), moduleData$C.orderDirection, 1, moduleData$C.tpRatio, moduleData$C.currentLever, priceTickPrecision)} ${quoteCurrency}`;
        moduleData$C.disPalyTpIncome = `${getExpectedIncome(moduleData$C.amount, getOpenPrice(), moduleData$C.tpRatio, moduleData$C.currentLever)} ${quoteCurrency}`;
    } else {
        moduleData$C.tpShow = "gone";
    }
    if (!isEmpty(moduleData$C.slRatio)) {
        moduleData$C.slShow = "visible";
        moduleData$C.disPalySlRatio = `${moduleData$C.slRatio}%`;
        moduleData$C.disPalySlTriggerPrice = `${getTriggerPrice(getOpenPrice(), moduleData$C.orderDirection, 2, moduleData$C.slRatio, moduleData$C.currentLever, priceTickPrecision)} ${quoteCurrency}`;
        moduleData$C.disPalySlIncome = `-${getExpectedIncome(moduleData$C.amount, getOpenPrice(), moduleData$C.slRatio, moduleData$C.currentLever)} ${quoteCurrency}`;
    } else {
        moduleData$C.slShow = "gone";
    }
}

function closeKeyBoard() {
    moduleData$C.priceFocus = "false";
    moduleData$C.amountFocus = "false";
    moduleData$C.spFocus = "false";
    moduleData$C.slFocus = "false";
}

moduleEvent$C.closeKeyBoard = closeKeyBoard;

function getOrderDirectionStr() {
    if (moduleData$C.orderDirection == OrderDirectionType.sell) {
        return $i18n.n_contract_trade_open_low;
    }
    return $i18n.n_contract_trade_open_more;
}

function getOpenPrice() {
    if (moduleData$C.exchangeType == ExchangeType.exchangeTypeMarket) {
        return $data.orderBook.latestPrice;
    } else {
        if (moduleData$C.isSelectedOpponent) {
            return $data.orderBook.latestPrice;
        } else {
            return moduleData$C.price;
        }
    }
}

function getPopInfo(type) {
    if (type == 0) {
        return $i18n.n_copy_trading_fok_explanation;
    } else if (type == 1) {
        return $i18n.n_copy_trading_cannot_adjust_lever;
    } else if (type == 2) {
        return $i18n.n_contract_intro_limit_c1;
    } else if (type == 3) {
        return $i18n.n_contract_intro_market_c1;
    }
    return "";
}

function isEmpty(obj) {
    if (!obj || obj === "" || obj.trim().length === 0) {
        return true;
    }
    return false;
}

moduleEvent$C.onOpponentChange = onOpponentChangeTouch;

moduleEvent$C.onAppear = onAppear$e;

var contractInfoModel = {
    contractCode: "",
    contractShortType: "",
    unitType: UnitType.unitTypeSymbol,
    contractSize: "",
    isModifiedUnit: false
};

$data.orderBook = {
    contractInfo: null,
    markPrice: "--",
    cellCount: "5",
    buyFirstPrice: "",
    sellFirstPrice: "",
    latestPrice: "",
    scrollRates: [],
    isAppear: true
};

$event.orderBook = {
    tpslSelected(selected) {
        $data.orderBook.cellCount = selected ? "6" : "5";
    },
    updateOrderBook(commonData) {
        const contractShortType = commonData.currentSymbol;
        var contractCode = "";
        var contractSize = "";
        contractInfoModel.unitType = commonData.unitType;
        if (commonData.currentContractInfo && commonData.currentContractInfo != null) {
            contractCode = commonData.currentContractInfo.contract_code;
            contractSize = commonData.currentContractInfo.contract_size;
        }
        if (contractShortType != contractInfoModel.contractShortType || contractCode != contractInfoModel.contractCode || contractSize != contractInfoModel.contractSize) {
            contractInfoModel.contractShortType = contractShortType;
            contractInfoModel.contractCode = contractCode;
            contractInfoModel.contractSize = contractSize;
            $data.orderBook.contractInfo = JSON.stringify(contractInfoModel);
            requestScrollRateData();
        }
        if (commonData.unitType != commonData.lastUnitType) {
            commonData.lastUnitType = commonData.unitType;
            contractInfoModel.isModifiedUnit = true;
            $data.orderBook.contractInfo = JSON.stringify(contractInfoModel);
        }
    },
    buySellFirstPrice(buyFirstPrice, sellFirstPrice) {
        console.log(`buySellFirstPrice:${buyFirstPrice},${sellFirstPrice}`);
        $data.orderBook.buyFirstPrice = buyFirstPrice;
        $data.orderBook.sellFirstPrice = sellFirstPrice;
    },
    updateLatestPrice(latestPrice) {
        console.log(`updateLatestPrice:${latestPrice}`);
        $data.orderBook.latestPrice = latestPrice;
        updateOpenAvailableUI();
    }
};

async function requestScrollRateData() {
    if ($data.orderBook.scrollRates.length == 0) {
        defaultScrollData();
    }
    const contract_code = contractInfoModel.contractCode;
    if (!contract_code || contract_code == null || contract_code.length == 0) {
        return;
    }
    const data = await sendRequest$2("linear-swap-order/x/v1/linear_swap_funding_rate", {
        contract_code: contract_code
    }, 0, 8);
    if (data && data != null) {
        var current = {
            type: "cell"
        };
        const funding_time = fundingTime(data.funding_time);
        const mulFinalRate = multiply(data.final_funding_rate, "100");
        const final_funding_rate = formatPrecision(mulFinalRate, 6);
        current.title = `${funding_time} ${$i18n.n_contract_swap_current_fee_rate}`;
        current.rate = `${final_funding_rate}%`;
        var next = {
            type: "cell"
        };
        const next_funding_time = fundingTime(data.next_funding_time);
        const mulRate = multiply(data.funding_rate, "100");
        const funding_rate = formatPrecision(mulRate, 6);
        next.title = `${next_funding_time} ${$i18n.n_contract_swap_next_fee_rate}`;
        next.rate = `${funding_rate}%`;
        $data.orderBook.scrollRates = [ current, next ];
    }
}

function defaultScrollData(currentRate = "--", nextRate = "--") {
    var current = {
        type: "cell"
    };
    current.title = `${$i18n.n_contract_swap_current_fee_rate}`;
    current.rate = `${currentRate}`;
    var next = {
        type: "cell"
    };
    next.title = `${$i18n.n_contract_swap_next_fee_rate}`;
    next.rate = `${nextRate}`;
    $data.orderBook.scrollRates = [ current, next ];
}

function fundingTime(date) {
    if (date && date > 0) {
        const newDate = new Date(parseInt(date));
        const hour = newDate.getHours() < 10 ? `0${newDate.getHours()}` : newDate.getHours();
        const minute = newDate.getMinutes() < 10 ? `0${newDate.getMinutes()}` : newDate.getMinutes();
        return `${hour}:${minute}`;
    }
    return "";
}

function defaultData$C() {
    return {
        header: {},
        taglist: [],
        girdToplist: [],
        girdBottomlist: [],
        list: [],
        emptyVisible: "gone",
        listVisible: "gone",
        isTrader: 0,
        statusBarConfig: {
            statusBarMode: "true",
            adStatusBarColor: "KBaseColorContentBackground"
        },
        navConfig: `{"left":{"icon":"edge_engine_top_bar_back_normal","action":{"type":"back","parameter":""},"text":null},"titleKey":"n_copy_trading_order_detail","backgroundColor":"KBaseColorContentBackground"}`
    };
}

const {moduleData: moduleData$B, moduleEvent: moduleEvent$B} = moduleDefine("orderDetail", start$C, defaultData$C);

async function start$C() {}

moduleEvent$B.onCreate = async function(eventParams) {
    console.log("orderDetail - onCreate:%o", eventParams);
    if (!eventParams || eventParams == null) {
        showDetailEmpty$2(true);
        return;
    }
    const params = JSON.parse(eventParams);
    const id = params.orderId;
    $data.orderDetail.isTrader = params.isTrader;
    if (!id || id == null) {
        showDetailEmpty$2(true);
        return;
    }
    showLoading(true);
    const data = await sendRequest$2("v1/copytrading/order", {
        id: id
    });
    showLoading(false);
    try {
        if (!data || data == null) {
            showDetailEmpty$2(true);
            return;
        }
        handleDetailData$1(data);
        showDetailEmpty$2(false);
    } catch (e) {
        console.log(`handle order error=${e}`);
    }
    await analytics$1("pageview_contracts_copytrading", {
        business_category: "copytrading_app_order_details"
    });
};

function handleDetailData$1(data) {
    let {coin: coin, unit: unit} = coinUnit(data.symbol);
    var header = {};
    if (data.direction == "long") {
        header.label = $i18n.n_contract_position_buy_label;
        header.labelColor = getUpDownColor();
    } else {
        header.label = $i18n.n_contract_position_sell_label;
        header.labelColor = getUpDownColor(false);
    }
    header.symbol = symbolDesc(data.symbol);
    if (data.status == 2) {
        header.orderStatus = $i18n.n_copy_trading_order_fail;
        header.orderStatusColor = "#F95A50";
    } else if (data.status == 3) {
        header.orderStatus = $i18n.n_copy_trading_closing_position;
        header.orderStatusColor = "@color/kColorSecondaryText";
    } else {
        header.orderStatus = $i18n.n_copy_trading_order_success;
        header.orderStatusColor = "#00A171";
    }
    moduleData$B.header = header;
    var positionModel = $i18n.n_copy_trading_isolated;
    if (data.positionModel == 2) {
        positionModel = $i18n.n_contract_super_margin;
    } else if (data.positionModel == 3) {
        positionModel = $i18n.n_contract_trade_margin;
    }
    const direction = data.direction == "long" ? $i18n.n_contract_trade_open_more : $i18n.n_contract_trade_open_low;
    moduleData$B.taglist = [ {
        title: positionModel,
        type: "normal"
    }, {
        title: `${data.lever}X`,
        type: "normal"
    }, {
        title: direction,
        type: "normal"
    } ];
    let currentContractInfo = getModelByContractShortType(data.symbol);
    let precision = getContractSizePrecision(currentContractInfo);
    let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
    let feePrecision = getFeeAmountPrecision(currentContractInfo);
    const profitRate = formatPrecision(multiply(data.profitRate, "100"), 2);
    const profitColor = getColorByNumber$3(data.profit);
    const followTakesColor = getColorByNumber$3(data.benefit);
    let openAmountVolume = "";
    try {
        openAmountVolume = getVolume(data.openAmount, data.openPrice, getContractSizePrecision(currentContractInfo), commonData.unitType);
    } catch (e) {
        console.log(`orderItem--e = ${e}`);
    }
    moduleData$B.girdToplist = [ {
        title: `${$i18n.n_contract_avg_position_price}(${unit})`,
        value: `${formatPrecision(data.openPrice, priceTickPrecision)}`,
        color: "@color/kColorPrimaryText",
        type: "normal",
        gravity: "left"
    }, {
        title: `${$i18n.n_copy_trading_position_open_number}(${commonData.unitType === UnitType.unitTypeUSDT ? unit : coin})`,
        value: `${formatPrecision(openAmountVolume, commonData.unitType === UnitType.unitTypeUSDT ? 4 : precision)}`,
        color: "@color/kColorPrimaryText",
        type: "normal",
        gravity: "left"
    }, {
        title: `${$i18n.n_copy_trading_profit}(${unit})`,
        value: `${formatPrecision(data.profit, 4)}(${profitRate}%)`,
        color: profitColor,
        type: "right"
    } ];
    moduleData$B.girdBottomlist = [ {
        title: `${$i18n.n_contract_share_history_position_close_price}(${unit})`,
        value: `${formatPrecision(data.closePrice, priceTickPrecision)}`,
        color: "@color/kColorPrimaryText",
        type: "normal",
        gravity: "left"
    }, {
        title: `${$data.orderDetail.isTrader == 1 ? $i18n.n_copytrading_share_withholding : $i18n.n_copytrading_share_expenses}(${unit})`,
        value: `${data.benefit}`,
        color: followTakesColor,
        type: "normal",
        gravity: "left"
    } ];
    console.log("moduleData.girdToplist " + JSON.stringify(moduleData$B.girdToplist.rawArray()));
    const takeProfit = `${$i18n.n_grid_trade_zhiying}(${unit})`;
    const openFee = `${$i18n.n_copy_trading_open_fee}(${unit})`;
    const closeFee = `${$i18n.n_copy_trading_close_fee}(${unit})`;
    const tradingNumber = $i18n.n_copy_trading_number;
    const openTime = $i18n.n_copy_trading_open_time;
    const closeMethod = $i18n.n_copy_trading_close_method;
    const closeTime = $i18n.n_copy_trading_close_time;
    const orderNo = $i18n.n_copy_trading_order_no;
    const openTimeValue = new Date(data.openTime).Format("yyyy-MM-dd hh:mm:ss");
    var closeTimeValue = "";
    if (data.closeTime && data.closeTime != null && data.closeTime > 0) {
        closeTimeValue = new Date(data.closeTime).Format("yyyy-MM-dd hh:mm:ss");
    }
    const closeTypeName = getCloseTypeName$1(data.closeType);
    moduleData$B.list = [ {
        title: takeProfit,
        value: `${data.profitPrice ? formatPrecision(data.profitPrice, priceTickPrecision) : "--"}`,
        type: "normal",
        copy: "gone"
    }, {
        title: openFee,
        value: `${formatPrecision(data.openFee, feePrecision)}`,
        type: "normal",
        copy: "gone"
    }, {
        title: closeFee,
        value: `${formatPrecision(data.closeFee, feePrecision)}`,
        type: "normal",
        copy: "gone"
    }, {
        title: tradingNumber,
        value: `${data.followerCounts}`,
        type: "normal",
        copy: "gone"
    }, {
        title: closeMethod,
        value: `${closeTypeName}`,
        type: "normal",
        copy: "gone"
    }, {
        title: openTime,
        value: `${openTimeValue}`,
        type: "normal",
        copy: "gone"
    }, {
        title: closeTime,
        value: `${closeTimeValue}`,
        type: "normal",
        copy: "gone"
    }, {
        title: orderNo,
        value: `${data.orderIdShow}`,
        type: "normal",
        copy: "visible"
    } ];
}

function getColorByNumber$3(number) {
    let profit = parseFloat(number);
    if (isNaN(profit)) {
        return "@color/kColorSecondaryText";
    } else if (profit >= 0) {
        return getUpDownColor();
    } else {
        return getUpDownColor(false);
    }
}

function getCloseTypeName$1(closeType) {
    var closeTypeName = "";
    switch (closeType) {
      case 1:
        closeTypeName = $i18n.n_copy_trading_closeType_1;
        break;

      case 2:
        closeTypeName = $i18n.n_copy_trading_closeType_2;
        break;

      case 3:
        closeTypeName = $i18n.n_copy_trading_closeType_3;
        break;

      case 4:
        closeTypeName = $i18n.n_copy_trading_closeType_4;
        break;

      case 11:
        closeTypeName = $i18n.n_copy_trading_closeType_11;
        break;

      case 12:
        closeTypeName = $i18n.n_copy_trading_closeType_12;
        break;

      case 13:
        closeTypeName = $i18n.n_copy_trading_closeType_13;
        break;

      case 14:
        closeTypeName = $i18n.n_copy_trading_closeType_14;
        break;

      case 15:
        closeTypeName = $i18n.n_copy_trading_closeType_15;
        break;

      case -1:
        closeTypeName = $i18n.n_copy_trading_closeType_0_1;
        break;

      case -2:
        closeTypeName = $i18n.n_copy_trading_closeType_0_2;
        break;
    }
    return closeTypeName;
}

function showDetailEmpty$2(isEmpty) {
    if (isEmpty) {
        moduleData$B.emptyVisible = "visible";
        moduleData$B.listVisible = "gone";
    } else {
        moduleData$B.emptyVisible = "gone";
        moduleData$B.listVisible = "visible";
    }
}

async function copyOrderNo(orderNo, copy) {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_order_details",
        button_name: "copy_order_id"
    });
    if (copy != "visible") {
        return;
    }
    try {
        await $nativeAPI.clipBoard(JSON.stringify({
            label: "",
            content: orderNo,
            toast: $i18n.n_replicated
        }));
    } catch (error) {
        console.log(`copy clipboard error:${error}`);
    }
}

moduleEvent$B.copyOrderNo = copyOrderNo;

const Edit_Board_SelectColor$3 = "@color/kColorMajorTheme100";

const Edit_Board_NormalColor = "@color/KBaseColorInputBackground";

function defaultData$B() {
    return {
        statusBarConfig: {
            statusBarMode: "false",
            adStatusBarColor: "kColor161616",
            isNight: "true"
        },
        navConfig: "",
        errorVisible: "invisible",
        contentVisible: "invisible",
        fixedMarginErrorVisible: "gone",
        marginLimitErrorVisible: "gone",
        fixedMarginNum: "",
        fixedMarginHint: "",
        fixedMarginFocus: "false",
        marginLimitNum: "",
        marginLimitHint: "",
        marginLimitFocus: "false",
        copyAmount: "",
        copyAmountHint: "",
        copyAmountFocus: "false",
        currentLeverText1: "0%",
        currentProgress1: 0,
        currentProgress2: 0,
        currentProgress3: 0,
        minLever1: 0,
        maxLever1: 200,
        minLever2: 0,
        maxLever2: 200,
        minLever3: 0,
        maxLever3: 5,
        leverTitlesStart1: "0%",
        leverTitlesEnd1: "200%",
        leverTitlesStart2: "0%",
        leverTitlesEnd2: "200%",
        contentTipsPopShow: "false",
        popBuyOrderConfirmShow: "false",
        allTextVisible: "visible",
        checkAgreement: false,
        checkAgreementBtn: "@drawable/icon_copytrading_currency_selection_n",
        editErrorTips: $i18n.n_copy_trading_copy_insufficient_funds_please_transfer,
        isAllSymbols: true,
        higherMarginList: [],
        showAgreement: "visible",
        showHigherConfig: "gone",
        fixedMarginEditFocus: false,
        marginLimitEditFocus: false,
        stopProfitRatio: "0",
        stopLossRatio: "0",
        openUnit: "",
        copyRatio: "",
        navbarHeight: 44,
        statusBarHeight: 44,
        highlevelVisibility: "gone",
        updownImage: "@drawable/edge_engine_copy_trading_down",
        closingPositionPopShow: false,
        closingPositionType: 1,
        closingPositionTypeString: [ $i18n.n_copy_trading_leversetting_surplus_type1, $i18n.n_copy_trading_leversetting_surplus_type2, $i18n.n_copy_trading_leversetting_surplus_type3 ],
        closingPosition1Visible: "visible",
        closingPosition1Title: $i18n.n_copy_trading_leversetting_surplus_type1,
        closingPosition1TextColor: "@color/kColorMajorTheme100",
        closingPosition2Visible: "gone",
        closingPosition2Title: $i18n.n_copy_trading_leversetting_surplus_type2,
        closingPosition2TextColor: "@color/kColorPrimaryText",
        closingPosition3Visible: "gone",
        closingPosition3Title: $i18n.n_copy_trading_leversetting_surplus_type3,
        closingPosition3TextColor: "@color/kColorPrimaryText",
        closingPositionTitle: $i18n.n_copy_trading_leversetting_surplus_type1,
        chooseModelPopShow: false,
        chooseModelType: 1,
        chooseModelType1Image: "@drawable/edge_engine_copytrading_selection_s",
        chooseModelType2Image: "@drawable/edge_engine_copytrading_selection_n",
        modelString: $i18n.n_copy_trading_fixed_margin,
        amountUint: "USDT",
        inputType: "number",
        levers: [],
        settingTag: "0",
        maxLines: "2",
        introduction: "",
        arrowImage: "@drawable/edge_engine_copytrading_arrow_down",
        settingGuide1PopShow: false,
        settingGuide2PopShow: false,
        showIntroduction: "gone",
        copyTraderLimit: false,
        stoplossVisibility: "gone",
        oriProgress1: 0,
        oriProgress2: 0,
        oriProgress3: 0
    };
}

async function start$B() {}

const {moduleData: moduleData$A, moduleEvent: moduleEvent$A} = moduleDefine("copySetting", start$B, defaultData$B);

moduleEvent$A.onCreate = async function(eventParams) {
    const params = JSON.parse(eventParams);
    const userSign = params.userSign;
    moduleData$A.userSign = userSign;
    moduleData$A.isEdit = params.isEdit;
    moduleData$A.navbarHeight = commonData.navbarHeight;
    moduleData$A.statusBarHeight = commonData.statusBarHeight;
    moduleData$A.confirmText = moduleData$A.isEdit == "true" ? $i18n.n_copy_trading_confirm_modify : $i18n.copy_trading_text;
    moduleData$A.showAgreement = moduleData$A.isEdit == "true" ? "gone" : "visible";
    var right = moduleData$A.isEdit == "true" ? "" : `,"right":{"icon":"edge_engine_copy_trading_support","action":{"type":"evalJS","parameter":"jump2Support"},"text":null}`;
    moduleData$A.navConfig = `{"left":{"icon":"edge_engine_top_bar_back_normal","action":{"type":"back","parameter":""},"text":null}${right},"titleKey":"n_copy_trading_copy_setting"}`, 
    moduleData$A.link = '"' + commonData.webUrl + "/support/" + commonData.language + '/detail/24916796169686?invite_code=9kuj6223&inviter_id=11353960"';
    moduleData$A.richTextData = `{"content":"n_copy_trading_license_hint","textColor":"kColorPrimaryText","textSize":12,"highlight":[{"content":"n_copy_trading_license_title","link":${moduleData$A.link},"textColor":"kColorMajorTheme100","textSize":12}]}`;
    moduleData$A.linkUrl = "1";
    moduleData$A.stoplossRichTextData = `{"content":"n_copy_trading_copysetting_tips","textColor":"kColorPrimaryText","textSize":12,"highlight":[{"content":"n_copy_trading_copysetting_tips_stoploss","link":${moduleData$A.linkUrl},"textColor":"kColorMajorTheme100","textSize":12}]}`;
    moduleData$A.settingTag = "0";
    moduleData$A.highlevelVisibility = "gone";
    moduleData$A.marginLimitNum = "";
    await getCopySetting(userSign);
    await analytics$1("pageview_contracts_copytrading", {
        business_category: "copytrading_app_trade_settings"
    });
    let guideShow = await read("copyTrading", "setting_guide_show");
    if ((guideShow == null || guideShow == "") && commonData.isFollower == 0 && commonData.hasTraderRight == 0) {
        moduleData$A.settingGuide1PopShow = true;
        save("copyTrading", "setting_guide_show", "1");
    }
    console.log("copySetting start analytics");
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_trade_settings"
    });
};

moduleEvent$A.onResume = async function() {
    const accountType = 2;
    const currency = "USDT";
    const assetInfo = await sendRequest$2("v1/copytrading/contract-account/asset-info", {
        accountType: accountType,
        currency: currency
    });
    initAssetInfo(assetInfo);
};

moduleEvent$A.onDestroy = async function() {
    moduleData$A.errorVisible = "invisible";
    moduleData$A.contentVisible = "invisible";
    moduleData$A.fixedMarginErrorVisible = "gone";
    moduleData$A.marginLimitErrorVisible = "gone";
    moduleData$A.fixedMarginNum = "";
    moduleData$A.fixedMarginFocus = "false";
    moduleData$A.marginLimitNum = "";
    moduleData$A.marginLimitHint = "";
    moduleData$A.copyAmount = "";
    moduleData$A.copyAmountHint = "";
    moduleData$A.currentProgress1 = 0;
    moduleData$A.currentProgress2 = 0;
    moduleData$A.minLever1 = 0;
    moduleData$A.maxLever1 = 200;
    moduleData$A.minLever2 = 0;
    moduleData$A.maxLever2 = 200;
    moduleData$A.minLever3 = 0;
    moduleData$A.maxLever3 = 5;
    moduleData$A.contentTipsPopShow = "false";
    moduleData$A.popBuyOrderConfirmShow = "false";
    moduleData$A.allTextVisible = "visible";
    moduleData$A.checkAgreement = false;
    moduleData$A.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_n";
    moduleData$A.editErrorTips = $i18n.n_copy_trading_copy_insufficient_funds_please_transfer;
    moduleData$A.isAllSymbols = true;
    moduleData$A.higherMarginList = [];
    moduleData$A.stopProfitRatio = "0";
    moduleData$A.stopLossRatio = "0";
    moduleData$A.showAgreement = "visible";
    moduleData$A.allTextVisible = "visible";
    moduleData$A.iconVisible0 = "gone";
    moduleData$A.iconVisible1 = "gone";
    moduleData$A.iconVisible2 = "gone";
    moduleData$A.iconVisible3 = "gone";
    moduleData$A.iconVisible4 = "gone";
    moduleData$A.showHigherConfig = "gone";
    moduleData$A.fixedMarginEditFocus = false;
    moduleData$A.marginLimitEditFocus = false;
    moduleData$A.fixedMarginEditFocusLastTime = false;
    moduleData$A.navConfig = "";
    moduleData$A.allSymbols = null;
    moduleData$A.followSymbols = null;
    moduleData$A.copyCustomMargins = null;
    moduleData$A.highlevelVisibility = "gone";
    moduleData$A.introduction = "";
    moduleData$A.showIntroduction = "gone";
    moduleData$A.stoplossVisibility = "gone";
    moduleData$A.copyTraderLimit = false;
    moduleData$A.nickName = "";
    moduleData$A.avatar = "";
    moduleData$A.stopLossRatio = "";
    moduleData$A.currentProgress1 = 0;
    moduleData$A.currentProgress2 = 0;
    moduleData$A.currentProgress3 = 0;
    moduleData$A.arrowImage = "@drawable/edge_engine_copytrading_arrow_down";
    moduleData$A.updownImage = "@drawable/edge_engine_copy_trading_down";
    moduleData$A.slidingPointRatio = "";
    moduleData$A.stopLossNum = "";
    moduleData$A.copyAmount = "";
    var cacheKey = "v1/copytrading/symbol-levers" + moduleData$A.userSign;
    await clear("apiCache", cacheKey);
};

moduleEvent$A.containerBack = async function() {
    var cacheKey = "v1/copytrading/symbol-levers" + moduleData$A.userSign;
    await clear("apiCache", cacheKey);
    $nativeAPI.containerBack();
};

moduleEvent$A.updownTapped = async function() {
    if (moduleData$A.maxLines == "2") {
        moduleData$A.maxLines = "0";
        moduleData$A.arrowImage = "@drawable/edge_engine_copytrading_arrow_up";
    } else {
        moduleData$A.maxLines = "2";
        moduleData$A.arrowImage = "@drawable/edge_engine_copytrading_arrow_down";
    }
};

moduleEvent$A.support = async function() {
    openURL(`${commonData.webUrl}/support/${commonData.language}/detail/104918827613976`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "help"
    });
};

moduleEvent$A.updateHighlevelSetting = async function() {
    if (moduleData$A.highlevelVisibility == "gone") {
        moduleData$A.highlevelVisibility = "visible";
        moduleData$A.updownImage = "@drawable/edge_engine_copy_trading_up";
        moduleData$A.settingTag = "10000";
    } else {
        moduleData$A.highlevelVisibility = "gone";
        moduleData$A.updownImage = "@drawable/edge_engine_copy_trading_down";
        moduleData$A.settingTag = "0";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "advanced"
    });
};

moduleEvent$A.closingPositionPopDismiss = async function() {
    moduleData$A.closingPositionPopShow = false;
};

moduleEvent$A.closingPositionTapped = async function() {
    moduleData$A.closingPositionPopShow = true;
};

moduleEvent$A.closingPositionPopSelected = async function(index) {
    moduleData$A.closingPositionTitle = moduleData$A.closingPositionTypeString[index - 1];
    moduleData$A.closingPositionType = index;
    moduleData$A.closingPositionPopShow = false;
    updateClosingPosition(index);
};

moduleEvent$A.stoplossTapped = async function() {
    moduleData$A.highlevelVisibility = "visible";
    moduleData$A.updownImage = "@drawable/edge_engine_copy_trading_up";
    moduleData$A.settingTag = "20000";
};

moduleEvent$A.chooseModelTapped = async function() {
    closeAllKeyBoard();
    moduleData$A.chooseModelPopShow = true;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "select_mode"
    });
};

moduleEvent$A.chooseModelPopDismiss = async function() {
    moduleData$A.chooseModelPopShow = false;
};

moduleEvent$A.closeChooseModel = async function() {
    moduleData$A.chooseModelPopShow = false;
};

moduleEvent$A.chooseModel = async function(index) {
    moduleData$A.chooseModelPopShow = false;
    moduleData$A.chooseModelType = index;
    if (index == 1) {
        moduleData$A.modelString = $i18n.n_copy_trading_fixed_margin;
        moduleData$A.chooseModelType1Image = "@drawable/edge_engine_copytrading_selection_s";
        moduleData$A.chooseModelType2Image = "@drawable/edge_engine_copytrading_selection_n";
        moduleData$A.amountUint = "USDT";
        moduleData$A.inputType = "number";
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings",
            button_name: "fixed_margin"
        });
    } else {
        moduleData$A.modelString = $i18n.n_copy_trading_leversetting_mulriple;
        moduleData$A.chooseModelType1Image = "@drawable/edge_engine_copytrading_selection_n";
        moduleData$A.chooseModelType2Image = "@drawable/edge_engine_copytrading_selection_s";
        moduleData$A.amountUint = $i18n.n_copy_trading_leversetting_unit_mulriple;
        moduleData$A.inputType = "numberDecimal";
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings",
            button_name: "multiplier"
        });
    }
    updateCopyAmountHint();
};

async function updateClosingPosition(index) {
    var button_name = "";
    if (index == 1) {
        moduleData$A.closingPosition1Visible = "visible";
        moduleData$A.closingPosition1TextColor = "@color/kColorMajorTheme100";
        moduleData$A.closingPosition2Visible = "gone";
        moduleData$A.closingPosition2TextColor = "@color/kColorPrimaryText";
        moduleData$A.closingPosition3Visible = "gone";
        moduleData$A.closingPosition3TextColor = "@color/kColorPrimaryText";
        button_name = "market_price_close";
    } else if (index == 2) {
        moduleData$A.closingPosition1Visible = "gone";
        moduleData$A.closingPosition1TextColor = "@color/kColorPrimaryText";
        moduleData$A.closingPosition2Visible = "visible";
        moduleData$A.closingPosition2TextColor = "@color/kColorMajorTheme100";
        moduleData$A.closingPosition3Visible = "gone";
        moduleData$A.closingPosition3TextColor = "@color/kColorPrimaryText";
        button_name = "follow_trader_close";
    } else if (index == 3) {
        moduleData$A.closingPosition1Visible = "gone";
        moduleData$A.closingPosition1TextColor = "@color/kColorPrimaryText";
        moduleData$A.closingPosition2Visible = "gone";
        moduleData$A.closingPosition2TextColor = "@color/kColorPrimaryText";
        moduleData$A.closingPosition3Visible = "visible";
        moduleData$A.closingPosition3TextColor = "@color/kColorMajorTheme100";
        button_name = "manual_close";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: button_name
    });
}

moduleEvent$A.leverSettingTapped = async function() {
    closeAllKeyBoard();
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=leverSetting&xml=leverSetting&navConfig=native&userSign=${moduleData$A.userSign}`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "leverage"
    });
};

async function getCopySetting(userSign) {
    console.log("copySetting - start:%o", userSign);
    moduleData$A.userSign = userSign;
    showLoading(true);
    const accountType = 2;
    const currency = "USDT";
    const assetInfo = await sendRequest$2("v1/copytrading/contract-account/asset-info", {
        accountType: accountType,
        currency: currency
    });
    const traderInfo = await sendRequest$2("v1/copytrading/trader-info", {
        userSign: userSign
    });
    const configInfo = await sendRequest$2("v1/copytrading/margin/config-info");
    showLoading(false);
    try {
        if ((!assetInfo || assetInfo == null) && (!traderInfo || traderInfo == null) && (!configInfo || configInfo == null)) {
            showDetailEmpty$1(true);
            return;
        }
        if (moduleData$A.isEdit == "true") {
            const copyData = await sendRequest$2("v1/copytrading/follower/my-copy", {
                userSign: userSign
            });
            if (!copyData || copyData == null) {
                showDetailEmpty$1(true);
                return;
            }
            console.log(`leversetting initCopyData copyData=${JSON.stringify(copyData)}`);
            initCopyData(copyData);
        }
        initConfigInfo(configInfo);
        initAssetInfo(assetInfo);
        initTraderInfo(traderInfo);
        chekDoneButtonEnable();
        showDetailEmpty$1(false);
    } catch (e) {
        console.log(`handle copySetting error=${e}`);
    }
    configInputBorderColors();
}

function initConfigInfo(configInfo) {
    try {
        console.log(`handle configInfo =${JSON.stringify(configInfo)}`);
        moduleData$A.configInfo = configInfo;
        moduleData$A.fixedMarginStart = parseInt(configInfo.marginMin);
        moduleData$A.fixedMarginEnd = parseInt(configInfo.marginMax);
        moduleData$A.marginLimitStart = parseInt(configInfo.marginLimitMin);
        moduleData$A.marginLimitEnd = parseInt(configInfo.marginLimitMax);
        moduleData$A.fixedMarginHint = parseInt(configInfo.marginMin) + "-" + parseInt(configInfo.marginMax);
        moduleData$A.marginLimitHint = parseInt(configInfo.marginLimitMin) + "-" + parseInt(configInfo.marginLimitMax);
        var tpMin = parseInt(multiply(parseFloat(configInfo.tpMin), 100));
        var tpMax = parseInt(multiply(parseFloat(configInfo.tpMax), 100));
        var slMin = parseInt(multiply(parseFloat(configInfo.slMin), 100));
        var slMax = parseInt(multiply(parseFloat(configInfo.slMax), 100));
        moduleData$A.minLever1 = tpMin;
        moduleData$A.maxLever1 = tpMax;
        moduleData$A.minLever2 = slMin;
        moduleData$A.maxLever2 = slMax;
        moduleData$A.stopProfitRatioHint = `${tpMin} - ${tpMax}`;
        moduleData$A.stopLossRatioHint = `${slMin} - ${slMax}`;
        moduleData$A.leverTitlesStart1 = String(tpMin) + "%";
        moduleData$A.leverTitlesEnd1 = String(tpMax) + "%";
        moduleData$A.leverTitlesStart2 = String(slMin) + "%";
        moduleData$A.leverTitlesEnd2 = String(slMax) + "%";
        moduleData$A.settingGuideTips = $i18n.$intercept.n_copy_trading_setting_guide_step1(String(configInfo.marginMin));
        if (configInfo.copyRatios.length >= 2) {
            moduleData$A.copyRatiosMin = configInfo.copyRatios[0];
            moduleData$A.copyRatiosMax = configInfo.copyRatios[1];
            moduleData$A.copyAmountHint = `${moduleData$A.copyRatiosMin} - ${moduleData$A.copyRatiosMax}`;
        }
        let step1 = parseFloat((tpMax - tpMin) / 4);
        moduleData$A.stopProfitTitle1 = String(tpMin) + "%";
        moduleData$A.stopProfitTitle2 = String(step1) + "%";
        moduleData$A.stopProfitTitle3 = String(multiply(step1, 2)) + "%";
        moduleData$A.stopProfitTitle4 = String(multiply(step1, 3)) + "%";
        moduleData$A.stopProfitTitle5 = String(tpMax) + "%";
        let step2 = parseFloat((slMax - slMin) / 4);
        moduleData$A.stopLossTitle1 = String(slMin) + "%";
        moduleData$A.stopLossTitle2 = String(step2) + "%";
        moduleData$A.stopLossTitle3 = String(multiply(step2, 2)) + "%";
        moduleData$A.stopLossTitle4 = String(multiply(step2, 3)) + "%";
        moduleData$A.stopLossTitle5 = String(slMax) + "%";
        moduleData$A.allSymbols = configInfo.allSymbol;
        for (var i = 0; i < configInfo.marginRangeList.length; i++) {
            let item = configInfo.marginRangeList[i];
            if (parseInt(item.marginMax) > parseInt(configInfo.marginMax)) {
                moduleData$A.showHigherConfig = "visible";
                break;
            }
        }
        if (configInfo.priceRateRange.length >= 2) {
            var spMin = parseFloat(multiply(parseFloat(configInfo.priceRateRange[0]), 100));
            var spMax = parseFloat(multiply(parseFloat(configInfo.priceRateRange[1]), 100));
            moduleData$A.slidingPointHint = `${spMin} - ${spMax}`;
            moduleData$A.minLever3 = spMin;
            moduleData$A.maxLever3 = spMax;
            let step = parseFloat((spMax - spMin) / 4);
            moduleData$A.slidingPointTitle1 = String(spMin) + "%";
            moduleData$A.slidingPointTitle2 = String(step) + "%";
            moduleData$A.slidingPointTitle3 = String(multiply(step, 2)) + "%";
            moduleData$A.slidingPointTitle4 = String(multiply(step, 3)) + "%";
            moduleData$A.slidingPointTitle5 = String(spMax) + "%";
        }
        if (moduleData$A.fixedMarginNum == null || moduleData$A.fixedMarginNum == "" || moduleData$A.fixedMarginNum == "undefined") {
            moduleData$A.fixedMarginNum = String(moduleData$A.fixedMarginStart);
        }
        if (moduleData$A.fixedMarginNum == null || moduleData$A.fixedMarginNum == "" || moduleData$A.fixedMarginNum == "undefined") {
            moduleData$A.fixedMarginNum = String(moduleData$A.fixedMarginStart);
        }
        if (moduleData$A.marginLimitNum == null || moduleData$A.marginLimitNum == "" || moduleData$A.marginLimitNum == "undefined") {
            moduleData$A.marginLimitNum = String(parseInt(moduleData$A.marginLimitEnd));
            moduleData$A.marginLimitNumTipsCheck = String(parseInt(moduleData$A.marginLimitEnd)) + " USDT";
        }
        var copyTraderLimit = 0;
        var copyTraderNum = 0;
        if (configInfo.copyTraderNum != null && configInfo.copyTraderNum != "undefined") {
            copyTraderNum = parseInt(configInfo.copyTraderNum);
        }
        if (configInfo.copyTraderLimit != null && configInfo.copyTraderLimit != "undefined") {
            copyTraderLimit = parseInt(configInfo.copyTraderLimit);
        }
        if (moduleData$A.isEdit == "false") {
            if (copyTraderLimit > 0 && copyTraderNum >= copyTraderLimit) {
                moduleData$A.copyTraderLimit = true;
            }
            moduleData$A.stoplossVisibility = copyTraderNum > 0 ? "visible" : "gone";
        }
        updateCopyAmountHint();
    } catch (e) {
        console.log(`copySetting configInfo error=${e}`);
    }
}

function updateCopyAmountHint() {
    if (moduleData$A.chooseModelType == 1) {
        moduleData$A.copyAmountHint = `${moduleData$A.fixedMarginStart} - ${moduleData$A.fixedMarginEnd}`;
        moduleData$A.copyAmount = moduleData$A.openUnit;
    } else {
        moduleData$A.copyAmountHint = `${moduleData$A.copyRatiosMin} - ${moduleData$A.copyRatiosMax}`;
        moduleData$A.copyAmount = moduleData$A.copyRatio;
    }
    initSubTitle();
}

function initCopyData(copyData) {
    try {
        if (copyData.openUnit != null && copyData.openUnit != "" && copyData.openUnit != "undefined") {
            let openUnit = parseInt(copyData.openUnit);
            if (openUnit > 0) {
                moduleData$A.copyAmount = String(openUnit);
                initSubTitle();
                moduleData$A.chooseModelType = 1;
                moduleData$A.inputType = "number";
                moduleData$A.modelString = $i18n.n_copy_trading_fixed_margin;
                moduleData$A.chooseModelType1Image = "@drawable/edge_engine_copytrading_selection_s";
                moduleData$A.chooseModelType2Image = "@drawable/edge_engine_copytrading_selection_n";
                moduleData$A.amountUint = "USDT";
                moduleData$A.openUnit = moduleData$A.copyAmount;
                updateCopyAmountHint();
            }
        }
        if (copyData.copyRatio != null && copyData.copyRatio != "" && copyData.copyRatio != "undefined") {
            let copyRatio = parseFloat(copyData.copyRatio).toFixed(2);
            if (copyRatio > 0) {
                moduleData$A.copyAmount = String(copyRatio);
                initSubTitle();
                moduleData$A.chooseModelType = 2;
                moduleData$A.inputType = "numberDecimal";
                moduleData$A.modelString = $i18n.n_copy_trading_leversetting_mulriple;
                moduleData$A.chooseModelType1Image = "@drawable/edge_engine_copytrading_selection_n";
                moduleData$A.chooseModelType2Image = "@drawable/edge_engine_copytrading_selection_s";
                moduleData$A.amountUint = $i18n.n_copy_trading_leversetting_unit_mulriple;
                moduleData$A.copyRatio = moduleData$A.copyAmount;
                updateCopyAmountHint();
            }
        }
        if (copyData.marginLimit != null && copyData.marginLimit != "" && copyData.marginLimit != "undefined") {
            moduleData$A.marginLimitNum = String(parseInt(copyData.marginLimit));
            moduleData$A.marginLimitNumTipsCheck = moduleData$A.marginLimitNum + " USDT";
        }
        if (copyData.stopProfitRate != null && copyData.stopProfitRate != "" && copyData.stopProfitRate != "undefined") {
            moduleData$A.currentProgress2 = parseFloat(copyData.stopProfitRate) * 100;
            moduleData$A.stopProfitRatio = `${parseInt(moduleData$A.currentProgress2)}`;
        } else {
            moduleData$A.currentProgress2 = 0;
        }
        moduleData$A.oriProgress2 = moduleData$A.currentProgress2;
        if (copyData.stopLossRate != null && copyData.stopLossRate != "" && copyData.stopLossRate != "undefined") {
            moduleData$A.currentProgress1 = parseFloat(copyData.stopLossRate) * 100;
            moduleData$A.stopLossRatio = `${parseInt(moduleData$A.currentProgress1)}`;
        } else {
            moduleData$A.currentProgress1 = 0;
        }
        moduleData$A.oriProgress1 = moduleData$A.currentProgress1;
        if (copyData.priceRateStatus == 1) {
            if (copyData.priceRate != null && copyData.priceRate != "" && copyData.priceRate != "undefined") {
                moduleData$A.currentProgress3 = parseFloat(copyData.priceRate) * 100;
                moduleData$A.slidingPointRatio = `${moduleData$A.currentProgress3}`;
            }
        } else {
            moduleData$A.currentProgress3 = 0;
        }
        moduleData$A.oriProgress3 = moduleData$A.currentProgress3;
        if (copyData.lossLimitStatus == 1) {
            moduleData$A.stopLossNum = String(parseInt(copyData.lossLimit));
            let lossLimitType = parseInt(copyData.lossLimitType);
            if (lossLimitType >= 0 && lossLimitType <= 2) {
                moduleData$A.closingPositionType = lossLimitType + 1;
                moduleData$A.closingPositionTitle = moduleData$A.closingPositionTypeString[lossLimitType];
                updateClosingPosition(lossLimitType + 1);
            }
        }
        moduleData$A.followSymbols = copyData.followSymbols;
        if (copyData.followSymbols != null && copyData.followSymbols.length > 0) {
            refreshChooseCurrency(false, copyData.followSymbols.split(","));
        }
        moduleData$A.copyCustomMargins = copyData.customMargins;
        var customMargins = [];
        try {
            for (var i = 0; i < copyData.customMargins.length; i++) {
                let item = copyData.customMargins[i];
                customMargins.push({
                    symbol: item.symbol,
                    marginFixed: item.openUnit
                });
            }
        } catch (e) {
            console.log(`copySetting customMargins foreach error = ${e}`);
        }
        moduleData$A.higherMarginList = customMargins;
    } catch (e) {
        console.log(`copySetting copyData error=${e}`);
    }
}

function initAssetInfo(assetInfo) {
    try {
        if (!assetInfo || assetInfo == null) {
            return;
        }
        moduleData$A.availableTransfer = parseFloat(assetInfo.marginBalance);
        moduleData$A.availableTransferStr = String(parseFloat(assetInfo.marginBalance).toFixed(4)) + "USDT";
        if (parseFloat(moduleData$A.fixedMarginNum) > parseFloat(moduleData$A.availableTransfer)) {
            moduleData$A.fixedMarginErrorVisible = "visible";
            moduleData$A.fixedMarginBoardColor = Edit_Board_ErrorColor$1;
            moduleData$A.editErrorTips = $i18n.n_copy_trading_copy_insufficient_funds_please_transfer;
        } else {
            moduleData$A.fixedMarginErrorVisible = "gone";
            moduleData$A.fixedMarginFocus = "false";
            moduleData$A.fixedMarginBoardColor = Edit_Board_NormalColor;
        }
    } catch (e) {
        console.log(`copySetting assetInfo error=${e}`);
    }
}

function initTraderInfo(traderInfo) {
    try {
        if (traderInfo != null) {
            moduleData$A.introduction = traderInfo.info;
            if (traderInfo.info != null && traderInfo.info.length > 0) {
                moduleData$A.showIntroduction = "visible";
            }
            moduleData$A.nickName = traderInfo.nickName;
            moduleData$A.avatar = traderInfo.imgUrl;
            moduleData$A.copyUserNum = String(parseInt(traderInfo.copyUserNum));
            moduleData$A.profitSharingRatio = String(parseInt(parseFloat(traderInfo.takeRate) * 100)) + "%";
            moduleData$A.totalRate = String((parseFloat(traderInfo.profitRate) * 100).toFixed(2)) + "%";
        }
    } catch (e) {
        console.log(`copySetting traderInfo error=${e}`);
    }
}

function checkInput(key) {
    switch (key) {
      case 1:
        if (moduleData$A.fixedMarginEditFocusLastTime && (moduleData$A.fixedMarginNum == null || moduleData$A.fixedMarginNum == "" || moduleData$A.fixedMarginNum == "undefined")) {
            moduleData$A.fixedMarginErrorVisible = "visible";
            moduleData$A.fixedMarginBoardColor = Edit_Board_ErrorColor$1;
            moduleData$A.editErrorTips = $i18n.n_copy_trading_please_input_fixed_margin;
        } else if (parseInt(moduleData$A.fixedMarginNum) > parseInt(moduleData$A.availableTransfer)) {
            moduleData$A.fixedMarginErrorVisible = "visible";
            moduleData$A.fixedMarginBoardColor = Edit_Board_ErrorColor$1;
            moduleData$A.editErrorTips = $i18n.n_copy_trading_copy_insufficient_funds_please_transfer;
        } else if (moduleData$A.fixedMarginEditFocus && parseInt(moduleData$A.fixedMarginNum) > parseInt(moduleData$A.marginLimitNum)) {
            moduleData$A.fixedMarginErrorVisible = "visible";
            moduleData$A.fixedMarginBoardColor = Edit_Board_ErrorColor$1;
            moduleData$A.editErrorTips = $i18n.$intercept.n_copy_trading_fixed_less_margin_limit(String(parseInt(moduleData$A.marginLimitNum)));
        } else {
            moduleData$A.fixedMarginErrorVisible = "gone";
            configItemFocus(1, moduleData$A.fixedMarginEditFocus);
        }
        break;

      case 2:
        if (moduleData$A.marginLimitEditFocus && parseInt(moduleData$A.fixedMarginNum) > parseInt(moduleData$A.marginLimitNum)) {
            moduleData$A.marginLimitErrorVisible = "visible";
            moduleData$A.marginLimitBoardColor = Edit_Board_ErrorColor$1;
            moduleData$A.editErrorTips2 = $i18n.$intercept.n_copy_trading_fixed_less_margin_limit2(String(parseInt(moduleData$A.fixedMarginNum)));
        } else {
            moduleData$A.marginLimitErrorVisible = "gone";
            configItemFocus(2, moduleData$A.marginLimitEditFocus);
        }
        break;
    }
}

function configInputBorderColors() {
    moduleData$A.fixedMarginBoardColor = Edit_Board_NormalColor;
    moduleData$A.marginLimitBoardColor = Edit_Board_NormalColor;
    moduleData$A.copyAmountBoardColor = Edit_Board_NormalColor;
    moduleData$A.stopLossBoardColor = Edit_Board_NormalColor;
    moduleData$A.confirmBackground = "@color/eButtonUnenabledBgColor";
}

moduleEvent$A.closeKeyBoard = function() {
    closeAllKeyBoard();
};

function closeAllKeyBoard() {
    moduleData$A.fixedMarginFocus = "false";
    moduleData$A.marginLimitFocus = "false";
    moduleData$A.stopProfitRatioFocus = "false";
    moduleData$A.stopLossRatioFocus = "false";
    moduleData$A.copyAmountFocus = "false";
    moduleData$A.stopLossFocus = "false";
    moduleData$A.slidingPointRatioFocus = "false";
}

function showDetailEmpty$1(isEmpty) {
    if (isEmpty) {
        moduleData$A.errorVisible = "visible";
        moduleData$A.contentVisible = "gone";
    } else {
        moduleData$A.errorVisible = "gone";
        moduleData$A.contentVisible = "visible";
    }
}

function currentBoardColor(isFocus) {
    return isFocus ? Edit_Board_SelectColor$3 : Edit_Board_NormalColor;
}

function configItemFocus(index, isFocus) {
    let color = currentBoardColor(isFocus);
    switch (index) {
      case 1:
        moduleData$A.copyAmountBoardColor = color;
        break;

      case 2:
        moduleData$A.marginLimitBoardColor = color;
        break;

      case 3:
        moduleData$A.stopLossBoardColor = color;
        break;
    }
}

moduleEvent$A.onFocusChange = async function(key, isFocus) {
    console.log(`onFocusChange = ${key}, ${isFocus}`);
    checkInput(isFocus);
    if (key === 1) {
        configItemFocus(key, isFocus);
        if (moduleData$A.chooseModelType == 1) {
            if (!isFocus) {
                if (parseInt(moduleData$A.copyAmount) < parseInt(moduleData$A.fixedMarginStart)) {
                    let fixedMargin = String(parseInt(moduleData$A.fixedMarginStart));
                    moduleData$A.openUnit = fixedMargin;
                    moduleData$A.copyAmount = fixedMargin;
                    initSubTitle();
                }
            }
        } else {
            if (!isFocus) {
                if (parseFloat(moduleData$A.copyAmount) < parseFloat(moduleData$A.copyRatiosMin)) {
                    let copyRatios = String(parseFloat(moduleData$A.copyRatiosMin));
                    moduleData$A.openUnit = copyRatios;
                    moduleData$A.copyAmount = copyRatios;
                    initSubTitle();
                }
            }
        }
    } else if (key === 2) {
        moduleData$A.marginLimitEditFocus = isFocus;
        if (!isFocus) {
            if (parseInt(moduleData$A.marginLimitNum) < parseInt(moduleData$A.marginLimitStart)) {
                moduleData$A.marginLimitNum = String(parseInt(moduleData$A.marginLimitStart));
                moduleData$A.marginLimitNumTipsCheck = String(parseInt(moduleData$A.marginLimitNum)) + " USDT";
            }
        }
        if (moduleData$A.marginLimitErrorVisible !== "visible") {
            configItemFocus(key, isFocus);
        }
        if (isFocus) {
            await analytics$1("appclick_copytrading", {
                business_category: "copytrading_app_trade_settings",
                button_name: "margin_limit"
            });
        }
    } else if (key === 3) {
        configItemFocus(key, isFocus);
        if (!isFocus) {
            await analytics$1("appclick_copytrading", {
                business_category: "copytrading_app_trade_settings",
                stop_loss_amount: `${moduleData$A.stopLossNum}`
            });
        }
    }
    moduleData$A.currentFocusIndex = key;
};

moduleEvent$A.onTextChange = async function(key, text) {
    console.log(`onTextChange = ${key}, ${text}`);
    console.log(`moduleData.fixedMarginNum = ${moduleData$A.fixedMarginNum},  moduleData.marginLimitNum = ${moduleData$A.marginLimitNum}`);
    switch (key) {
      case 1:
        configItemFocus(key, true);
        if (text === "") {
            moduleData$A.copyAmount = "";
            if (moduleData$A.chooseModelType == 1) {
                moduleData$A.openUnit = "";
            } else {
                moduleData$A.copyRatio = "";
            }
        } else {
            if (moduleData$A.chooseModelType == 1) {
                var fixedMargin = "";
                if (parseInt(text) > parseInt(moduleData$A.fixedMarginEnd)) {
                    fixedMargin = String(parseInt(moduleData$A.fixedMarginEnd));
                    moduleData$A.openUnit = fixedMargin;
                    moduleData$A.copyAmount = fixedMargin;
                } else if (text.indexOf(".") >= 0) {
                    fixedMargin = String(parseInt(text));
                    moduleData$A.openUnit = fixedMargin;
                    moduleData$A.copyAmount = fixedMargin;
                }
            } else {
                var copyRatio = "";
                console.log(`onTextChange copyRatio: 1 ${moduleData$A.copyRatiosMax}, ${text}`);
                if (parseFloat(text) > moduleData$A.copyRatiosMax) {
                    copyRatio = String(moduleData$A.copyRatiosMax);
                    moduleData$A.openUnit = copyRatio;
                    moduleData$A.copyAmount = copyRatio;
                } else if (text.indexOf(".") >= 0 && text.length == 4 && parseFloat(text) < parseFloat(moduleData$A.copyRatiosMin)) {
                    copyRatio = String(moduleData$A.copyRatiosMin);
                    moduleData$A.openUnit = copyRatio;
                    moduleData$A.copyAmount = copyRatio;
                }
            }
            initSubTitle();
        }
        break;

      case 2:
        if (text === "") {
            moduleData$A.marginLimitNum = "";
            configItemFocus(1, false);
            moduleData$A.marginLimitNumTipsCheck = String(parseInt(moduleData$A.marginLimitEnd)) + " USDT";
        } else {
            if (parseInt(text) > parseInt(moduleData$A.marginLimitEnd)) {
                moduleData$A.marginLimitNum = String(parseInt(moduleData$A.marginLimitEnd));
            } else if (text.indexOf(".") >= 0) {
                moduleData$A.marginLimitNum = String(parseInt(text));
            }
            moduleData$A.marginLimitNumTipsCheck = String(parseInt(moduleData$A.marginLimitNum)) + " USDT";
        }
        break;

      case 3:
        if (text != "") {
            if (parseInt(moduleData$A.minLever1) > parseInt(text)) {
                moduleData$A.stopProfitRatio = String(parseInt(moduleData$A.minLever1));
            } else if (parseInt(text) > parseInt(moduleData$A.maxLever1)) {
                moduleData$A.stopProfitRatio = String(parseInt(moduleData$A.maxLever1));
            } else if (text.indexOf(".") >= 0) {
                moduleData$A.stopProfitRatio = String(parseInt(text));
            }
            initFixedAndLimit();
        }
        break;

      case 11:
        if (text != "") {
            if (parseInt(moduleData$A.minLever1) > parseInt(text)) {
                moduleData$A.stopLossRatio = String(parseInt(moduleData$A.minLever1));
            } else if (parseInt(text) > parseInt(moduleData$A.maxLever1)) {
                moduleData$A.stopLossRatio = String(parseInt(moduleData$A.maxLever1));
            } else if (text.indexOf(".") >= 0) {
                moduleData$A.stopLossRatio = String(parseInt(text));
            }
            initFixedAndLimit();
        }
        break;

      case 12:
        if (text != "") {
            if (parseInt(moduleData$A.minLever2) > parseInt(text)) {
                moduleData$A.stopProfitRatio = String(parseInt(moduleData$A.minLever2));
            } else if (parseInt(text) > parseInt(moduleData$A.maxLever2)) {
                moduleData$A.stopProfitRatio = String(parseInt(moduleData$A.maxLever2));
            } else if (text.indexOf(".") >= 0) {
                moduleData$A.stopProfitRatio = String(parseInt(text));
            }
            initFixedAndLimit();
        }
        break;

      case 13:
        if (text != "") {
            if (parseFloat(moduleData$A.minLever3) > parseFloat(text)) {
                moduleData$A.slidingPointRatio = String(parseFloat(moduleData$A.minLever3));
            }
        }
        break;
    }
    chekDoneButtonEnable();
};

function initFixedAndLimit() {
    var left = moduleData$A.stopProfitRatio == null || moduleData$A.stopProfitRatio == "" || moduleData$A.stopProfitRatio == "undefined" ? "--" : String(parseInt(moduleData$A.stopProfitRatio)) + "%";
    var right = moduleData$A.stopLossRatio == null || moduleData$A.stopLossRatio == "" || moduleData$A.stopLossRatio == "undefined" ? "--" : String(parseInt(moduleData$A.stopLossRatio)) + "%";
    moduleData$A.fixedAndLimit = `${left} / ${right}`;
}

function chekDoneButtonEnable() {
    if (moduleData$A.copyTraderLimit == true) {
        moduleData$A.confirmBackground = "@color/kColorEBEBEB";
        moduleData$A.confirmTextColor = "@color/KBaseColorSecondaryText";
        moduleData$A.confirmText = $i18n.n_copy_trading_copysetting_trader_limit;
        return;
    }
    if (!moduleData$A.checkAgreement && moduleData$A.isEdit == "false" || moduleData$A.fixedMarginNum == "" || moduleData$A.fixedMarginNum == null || moduleData$A.fixedMarginNum == "undefined" || moduleData$A.fixedMarginErrorVisible == "visible" || moduleData$A.marginLimitErrorVisible == "visible") {
        moduleData$A.confirmBackground = "@color/kColorEBEBEB";
        moduleData$A.confirmTextColor = "@color/KBaseColorSecondaryText";
        return false;
    } else {
        moduleData$A.confirmBackground = "@color/kColorMajorTheme100";
        moduleData$A.confirmTextColor = "@color/KBaseTextColor";
        return true;
    }
}

moduleEvent$A.checkAgreementChange = async function() {
    if (moduleData$A.copyTraderLimit == true) {
        return;
    }
    if (moduleData$A.checkAgreement) {
        moduleData$A.checkAgreement = false;
        moduleData$A.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_n";
    } else {
        moduleData$A.checkAgreement = true;
        moduleData$A.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_s";
    }
    chekDoneButtonEnable();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "user_agreement"
    });
};

moduleEvent$A.sliderValueChanged = async function(key, progress) {
    console.log(`sliderValueChanged = ${key}, ${progress}`);
    switch (key) {
      case 1:
        var intProgress = parseFloat(progress);
        if (intProgress < 0) return;
        moduleData$A.stopLossRatio = progress > 0 ? `${intProgress}` : "";
        initFixedAndLimit();
        break;

      case 2:
        var intProgress = parseFloat(progress);
        if (intProgress < 0) return;
        moduleData$A.stopProfitRatio = progress > 0 ? `${intProgress}` : "";
        initFixedAndLimit();
        break;

      case 3:
        var intProgress = parseFloat(progress);
        if (intProgress < 0) return;
        moduleData$A.slidingPointRatio = progress > 0 ? `${intProgress}` : "";
        initFixedAndLimit();
        break;
    }
    chekDoneButtonEnable();
};

async function sliderValueChangedAnalytics$1() {
    if (moduleData$A.oriProgress1 != moduleData$A.currentProgress1) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings",
            stop_loss: `${moduleData$A.currentProgress1}`
        });
    }
    if (moduleData$A.oriProgress2 != moduleData$A.currentProgress2) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings",
            take_profit: `${moduleData$A.currentProgress2}`
        });
    }
    if (moduleData$A.oriProgress3 != moduleData$A.currentProgress3) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings",
            slippage: `${moduleData$A.currentProgress3}`
        });
    }
}

moduleEvent$A.setHigherFixedMargin = async function() {
    if (!clickThrottle(2e3)) return;
    moduleData$A.chooseModelPopShow = false;
    var limitNum = "";
    if (moduleData$A.marginLimitNum == null || moduleData$A.marginLimitNum == "" || moduleData$A.marginLimitNum == "undefined") {
        limitNum = String(parseInt(moduleData$A.marginLimitEnd));
    } else {
        limitNum = String(parseInt(moduleData$A.marginLimitNum));
    }
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=setHigherMargin&navConfig=native&marginLimit=${limitNum}`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "increase_fixed_margin"
    });
};

moduleEvent$A.recharge = async function() {
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/balance/deposit?coin=usdt`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "deposit"
    });
};

moduleEvent$A.transfer = async function() {
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/balance/transfer?coin=usdt&account=13`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "transfer"
    });
};

moduleEvent$A.chooseCurrency = async function() {
    try {
        if (!clickThrottle(2e3)) return;
        openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=currencySelection&navConfig=native`);
    } catch (e) {
        console.log(`copySetting chooseCurrency error=${e}`);
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "trading_pairs"
    });
};

moduleEvent$A.jump2Support = async function() {
    openURL(`${commonData.webUrl}/support/${commonData.language}/detail/104918827613976`);
};

moduleEvent$A.showFixedMarginAlert = async function() {
    if (moduleData$A.chooseModelType == 1) {
        moduleData$A.popContent = $i18n.n_copy_trading_fixed_margin_alert1 + "\n" + $i18n.n_copy_trading_fixed_margin_alert2;
    } else {
        let alert2 = $i18n.$intercept.n_copy_trading_leversetting_amount_alert2(`${moduleData$A.fixedMarginStart}`, `${moduleData$A.fixedMarginEnd}`);
        moduleData$A.popContent = $i18n.n_copy_trading_leversetting_amount_alert1 + "\n" + alert2;
    }
    moduleData$A.contentTipsPopShow1 = "true";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "order_amount_assistance"
    });
};

moduleEvent$A.showLeverAlert = async function() {
    moduleData$A.popContent = $i18n.n_copy_trading_leversetting_lever_alert;
    moduleData$A.contentTipsPopShow2 = "true";
};

moduleEvent$A.showStopSurplusAlert = async function() {
    moduleData$A.popContent = $i18n.n_copy_trading_leversetting_stoploss_alert2;
    moduleData$A.contentTipsPopShow2 = "true";
};

moduleEvent$A.showStopLossAlert = async function() {
    moduleData$A.popContent = $i18n.n_copy_trading_leversetting_stoploss_alert2;
    moduleData$A.contentTipsPopShow2 = "true";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "stop_loss_assistance"
    });
};

moduleEvent$A.showSlidingPointAlert = async function() {
    moduleData$A.popContent = $i18n.n_copy_trading_leversetting_slidingPoint_alert;
    moduleData$A.contentTipsPopShow2 = "true";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "slippage_assistance"
    });
};

moduleEvent$A.showMarginLimitAlert = async function() {
    moduleData$A.popContent = $i18n.n_copy_trading_margin_limit_alert;
    moduleData$A.contentTipsPopShow2 = "true";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "margin_limit_assistance"
    });
};

moduleEvent$A.popOrderConfirmClose = async function() {
    moduleData$A.popBuyOrderConfirmShow = "false";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "cancel"
    });
};

moduleEvent$A.showOrderConfirm = async function() {
    closeAllKeyBoard();
    sliderValueChangedAnalytics$1();
    try {
        if (chekDoneButtonEnable()) {
            if (parseInt(moduleData$A.copyAmount) < parseInt(moduleData$A.fixedMarginStart)) {
                moduleData$A.fixedMarginNum = String(parseInt(moduleData$A.fixedMarginStart));
            }
            if (moduleData$A.higherMarginList != null && moduleData$A.higherMarginList.length > 0) {
                moduleData$A.confirmDialogFixMarginTips = $i18n.n_copytrading_setting_regular_follow;
            } else {
                moduleData$A.confirmDialogFixMarginTips = String(parseInt(moduleData$A.fixedMarginNum)) + " USDT";
            }
            moduleData$A.modelType = moduleData$A.modelString;
            if (moduleData$A.chooseModelType == 1) {
                moduleData$A.modeleTypeTitle = $i18n.n_copy_trading_fixed_margin;
                moduleData$A.modeleTypeSubtitle = moduleData$A.copyAmount + " USDT";
            } else {
                moduleData$A.modeleTypeTitle = $i18n.n_copy_trading_leversetting_mulriple;
                moduleData$A.modeleTypeSubtitle = `${moduleData$A.copyAmount}` + $i18n.n_copy_trading_leversetting_unit_mulriple;
            }
            let slidingPointRatio = parseFloat(moduleData$A.slidingPointRatio);
            if (slidingPointRatio > 0) {
                moduleData$A.slidingPoint = `${moduleData$A.slidingPointRatio}` + "%";
            } else {
                moduleData$A.slidingPoint = "--";
            }
            let stopLossNum = parseInt(moduleData$A.stopLossNum);
            if (stopLossNum > 0) {
                moduleData$A.stoploss = moduleData$A.closingPositionTitle;
            } else {
                moduleData$A.stoploss = "--";
            }
            var canCopy = true;
            try {
                for (var i = 0; i < moduleData$A.higherMarginList.length; i++) {
                    let item = moduleData$A.higherMarginList[i];
                    if (parseFloat(item.marginFixed) > parseFloat(moduleData$A.availableTransfer)) {
                        canCopy = false;
                        break;
                    }
                }
            } catch (e) {
                console.log(`copySetting customMargins error=${e}`);
            }
            if (canCopy) {
                moduleData$A.popBuyOrderConfirmShow = "true";
            } else {
                showToast($i18n.n_copy_trading_copy_insufficient_funds_please_transfer);
            }
        }
    } catch (e) {
        console.log(`copySetting - showOrderConfirm error = ${e}`);
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "follow"
    });
};

moduleEvent$A.popTipsDismiss = function() {
    moduleData$A.contentTipsPopShow1 = "false";
    moduleData$A.contentTipsPopShow2 = "false";
};

moduleEvent$A.copy = async function() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings",
        button_name: "confirm"
    });
    try {
        moduleData$A.popBuyOrderConfirmShow = "false";
        showLoading(true);
        var params = {
            userSign: moduleData$A.userSign
        };
        if (moduleData$A.chooseModelType == 1) {
            params["openUnit"] = moduleData$A.copyAmount;
        } else {
            params["copyRatio"] = moduleData$A.copyAmount;
        }
        var marginLimit = "";
        if (moduleData$A.marginLimitNum == null || moduleData$A.marginLimitNum == "" || moduleData$A.marginLimitNum == "undefined") {
            marginLimit = String(parseInt(moduleData$A.marginLimitEnd));
        } else {
            marginLimit = moduleData$A.marginLimitNum;
        }
        params["marginLimit"] = marginLimit;
        var stop;
        const stopProfitRate = moduleData$A.stopProfitRatio == null || moduleData$A.stopProfitRatio == "" || moduleData$A.stopProfitRatio == "undefined" ? "0" : divide(moduleData$A.stopProfitRatio, 100);
        const stopLossRate = moduleData$A.stopLossRatio == null || moduleData$A.stopLossRatio == "" || moduleData$A.stopLossRatio == "undefined" ? "0" : divide(moduleData$A.stopLossRatio, 100);
        params["stopProfitRate"] = stopProfitRate;
        params["stopLossRate"] = stopLossRate;
        const customMargins = [];
        try {
            for (var i = 0; i < moduleData$A.higherMarginList.length; i++) {
                let item = moduleData$A.higherMarginList[i];
                customMargins.push({
                    symbol: item.symbol,
                    openUnit: item.marginFixed
                });
            }
        } catch (e) {
            console.log(`copySetting customMargins error=${e}`);
        }
        params["customMargins"] = customMargins;
        params["followSymbols"] = moduleData$A.followSymbols;
        let slidingPointRatio = parseFloat(moduleData$A.slidingPointRatio);
        if (slidingPointRatio > 0) {
            params["priceRate"] = String((slidingPointRatio / 100).toFixed(4));
            params["priceRateStatus"] = 1;
        } else {
            params["priceRate"] = "";
            params["priceRateStatus"] = 2;
        }
        params["followSymbols"] = moduleData$A.followSymbols;
        let stopLossNum = parseInt(moduleData$A.stopLossNum);
        if (stopLossNum > 0) {
            params["lossLimit"] = stopLossNum;
            params["lossLimitStatus"] = 1;
            params["lossLimitType"] = moduleData$A.closingPositionType - 1;
        } else {
            params["lossLimit"] = 0;
            params["lossLimitStatus"] = 0;
        }
        if (moduleData$A.levers.length > 0) {
            if (moduleData$A.levers.length > 0) {
                const symbolLevers = [];
                try {
                    for (var i = 0; i < moduleData$A.levers.length; i++) {
                        let item = moduleData$A.levers[i];
                        symbolLevers.push({
                            symbol: item.symbol,
                            lever: item.lever,
                            modeType: item.modeType
                        });
                    }
                } catch (e) {
                    console.log(`copySetting symbolLevers error=${e}`);
                }
                params["symbolLevers"] = symbolLevers;
            }
        }
        console.log(`copySetting copy acton params=${params}`);
        const path = moduleData$A.isEdit == "true" ? "new-copy-edit" : "copy";
        const copyCode = await sendRequestReturnCode("v1/copytrading/follower/" + path, params, 1, 0, {
            "Content-Type": "application/json"
        });
        showLoading(false);
        if (!copyCode || copyCode == null || copyCode != 200) {
            return;
        }
        showToast($i18n.n_copy_trading_copy_setting_success);
        var cacheKey = "v1/copytrading/symbol-levers" + moduleData$A.userSign;
        await clear("apiCache", cacheKey);
        $nativeAPI.containerBack();
    } catch (e) {
        showLoading(false);
        console.log(`copySetting copy error=${e}`);
    }
};

async function updateSymbolLevers(levers) {
    moduleData$A.levers = levers;
    console.log(`copySetting, updateSymbolLevers=${JSON.stringify(levers)}`);
}

async function setHigherMarginList(list) {
    try {
        var newList = [];
        for (var i = 0; i < list.length; i++) {
            newList.push({
                symbol: list[i].symbol,
                openUnit: list[i].marginFixed
            });
        }
        moduleData$A.copyCustomMargins = newList;
        moduleData$A.higherMarginList = list;
    } catch (e) {
        console.log(`copySetting setHigherMarginList error=${e}`);
    }
}

async function refreshChooseCurrency(isAll, currencys) {
    console.log(`copySetting - refreshChooseCurrency isAll = ${isAll}, currencysLenght = ${currencys.length}`);
    moduleData$A.iconVisible0 = "gone";
    moduleData$A.iconVisible1 = "gone";
    moduleData$A.iconVisible2 = "gone";
    moduleData$A.iconVisible3 = "gone";
    moduleData$A.iconVisible4 = "gone";
    var chooseCurrency = "";
    if (isAll) {
        moduleData$A.allTextVisible = "visible";
        chooseCurrency = null;
    } else {
        const size = currencys.length;
        moduleData$A.allTextVisible = "gone";
        for (var i = 0; i < currencys.length; i++) {
            var currency = currencys[i];
            chooseCurrency += `${currency}`;
            if (i < currencys.length - 1) {
                chooseCurrency += ",";
            }
            switch (i) {
              case 0:
                moduleData$A.iconVisible0 = "visible";
                if (size > 4) {
                    moduleData$A.moreNum = `+${size - 4}`;
                    moduleData$A.moreVisible = "visible";
                } else {
                    moduleData$A.icon0 = getPNGIconURLByCurrency(currency.split("-")[0]);
                    moduleData$A.moreVisible = "gone";
                }
                break;

              case 1:
                moduleData$A.iconVisible1 = "visible";
                if (size > 4) {
                    moduleData$A.icon1 = getPNGIconURLByCurrency(currencys[0].split("-")[0]);
                } else {
                    moduleData$A.icon1 = getPNGIconURLByCurrency(currency.split("-")[0]);
                }
                break;

              case 2:
                moduleData$A.iconVisible2 = "visible";
                if (size > 4) {
                    moduleData$A.icon2 = getPNGIconURLByCurrency(currencys[1].split("-")[0]);
                } else {
                    moduleData$A.icon2 = getPNGIconURLByCurrency(currency.split("-")[0]);
                }
                break;

              case 3:
                moduleData$A.iconVisible3 = "visible";
                if (size > 4) {
                    moduleData$A.icon3 = getPNGIconURLByCurrency(currencys[2].split("-")[0]);
                } else {
                    moduleData$A.icon3 = getPNGIconURLByCurrency(currency.split("-")[0]);
                }
                break;

              case 4:
                moduleData$A.iconVisible4 = "visible";
                moduleData$A.icon4 = getPNGIconURLByCurrency(currencys[3].split("-")[0]);
                break;
            }
        }
    }
    moduleData$A.followSymbols = chooseCurrency;
}

function initSubTitle() {
    if (moduleData$A.chooseModelType == 1) {
        moduleData$A.modeleTypeTitle = $i18n.n_copy_trading_fixed_margin;
        moduleData$A.modeleTypeSubtitle = moduleData$A.copyAmount + " USDT";
    } else {
        moduleData$A.modeleTypeTitle = $i18n.n_copy_trading_leversetting_mulriple;
        moduleData$A.modeleTypeSubtitle = `${moduleData$A.copyAmount}` + $i18n.n_copy_trading_leversetting_unit_mulriple;
    }
}

moduleEvent$A.hidePop = function() {
    moduleData$A.settingGuide1PopShow = false;
};

moduleEvent$A.nextPop = function(type) {
    if (type == 1) {
        moduleData$A.settingGuide1PopShow = false;
        moduleData$A.settingGuide2PopShow = true;
    } else {
        moduleData$A.settingGuide2PopShow = false;
    }
};

moduleEvent$A.guideLast = function() {
    moduleData$A.settingGuide2PopShow = false;
    moduleData$A.settingGuide1PopShow = true;
};

const Edit_Board_SelectColor$2 = "@color/kColorMajorTheme100";

const Edit_Board_NomalColor$2 = "@color/KBaseColorInputBackground";

const Edit_Board_ErrorColor = "#F95A50";

var marginLimit = "10001";

var dataList = [];

function defaultData$A() {
    return {
        currentFocusIndex: -1,
        list: [],
        emptyVisible: "gone",
        listVisible: "visible"
    };
}

const {moduleData: moduleData$z, moduleEvent: moduleEvent$z} = moduleDefine("setHigherMargin", start$A, defaultData$A);

async function start$A() {}

async function handleHigherMarginData(data) {
    const list = await Promise.all(data.marginRangeList.map((async (item, index) => {
        var strArray = item.symbol.split("-");
        let baseCurrency = strArray[0].toUpperCase();
        let quoteCurrency = strArray[1].toUpperCase();
        var marginFixed = "";
        var borderColor = Edit_Board_NomalColor$2;
        var errorVisible = "gone";
        var errorText = "";
        try {
            for (var i = 0; i < $data.copySetting.copyCustomMargins.length; i++) {
                let copyItem = $data.copySetting.copyCustomMargins[i];
                if (item.symbol === copyItem.rawObject().symbol) {
                    marginFixed = String(parseInt(copyItem.rawObject().openUnit));
                    if (marginFixed.length > 0 && Number.parseFloat(marginLimit) < Number.parseFloat(marginFixed)) {
                        borderColor = Edit_Board_ErrorColor;
                        errorVisible = "visible";
                        errorText = $i18n.$intercept.n_copy_trading_fixed_less_margin_limit(marginLimit);
                    }
                    break;
                }
            }
        } catch (e) {
            console.log(`setHigherMargin - handleHigherMarginData error = ${e}`);
        }
        return {
            type: "normal",
            hint: `${item.marginMin}-${item.marginMax}`,
            symbol: item.symbol,
            marginMin: item.marginMin.toString(),
            marginMax: item.marginMax.toString(),
            quoteCurrency: quoteCurrency,
            disPlaySymbol: `${baseCurrency}${quoteCurrency}`,
            icon: getPNGIconURLByCurrency(baseCurrency.toLowerCase()),
            marginFixed: marginFixed,
            errorVisible: errorVisible,
            errorText: errorText,
            index: index,
            isFocus: false,
            borderColor: borderColor
        };
    })));
    moduleData$z.list = list;
}

function showHigherMarginEmpty(isEmpty) {
    if (isEmpty) {
        moduleData$z.emptyVisible = "visible";
        moduleData$z.listVisible = "gone";
    } else {
        moduleData$z.emptyVisible = "gone";
        moduleData$z.listVisible = "visible";
    }
}

function showErrorBorderColor(index) {
    var item = moduleData$z.list[index];
    console.log(`wp showErrorBorderColor borderColor=${item.borderColor}`);
    item.borderColor = Edit_Board_ErrorColor;
    item.errorVisible = "visible";
    item.errorText = $i18n.$intercept.n_copy_trading_fixed_less_margin_limit(marginLimit);
}

function cleanErrorBoarderColor(index) {
    var item = moduleData$z.list[index];
    if (item.borderColor === Edit_Board_ErrorColor) {
        item.borderColor = currentBoarderColor$2(moduleData$z.currentFocusIndex === index);
        item.errorVisible = "gone";
    }
}

function currentBoarderColor$2(isFocus) {
    return isFocus ? Edit_Board_SelectColor$2 : Edit_Board_NomalColor$2;
}

moduleEvent$z.onFocusChange = async function(index, isFocus) {
    console.log(`wp onFocusChange index=${index} isFocus=${isFocus}`);
    var item = moduleData$z.list[index];
    if (item.errorVisible !== "visible") {
        item.borderColor = currentBoarderColor$2(isFocus);
    }
    if (!isFocus) {
        console.log(`wp onFocusChange item.marginMin=${item.marginMin}  item.marginMax=${item.marginMax} item.marginFixed=${item.marginFixed}`);
        if (item.marginFixed.length > 0) {
            if (Number.parseFloat(item.marginMin) > Number.parseFloat(item.marginFixed)) {
                item.marginFixed = item.marginMin;
            }
            if (Number.parseFloat(item.marginMax) < Number.parseFloat(item.marginFixed)) {
                item.marginFixed = item.marginMax;
            }
        }
    }
    moduleData$z.currentFocusIndex = index;
};

moduleEvent$z.onTextChange = async function(index, text) {
    console.log(`wp onTextChange text=${text}`);
    var item = moduleData$z.list[index];
    if (item.marginFixed !== text) {
        if (Number.parseFloat(item.marginMax) < Number.parseFloat(text)) {
            item.marginFixed = item.marginMax;
        } else {
            item.marginFixed = text;
        }
    }
    if (Number.parseFloat(marginLimit) < Number.parseFloat(item.marginMax)) {
        console.log(`wp onTextChange marginLimit < item.marginMax`);
        if (Number.parseFloat(marginLimit) < Number.parseFloat(text)) {
            showErrorBorderColor(index);
        } else {
            cleanErrorBoarderColor(index);
        }
    }
};

moduleEvent$z.closeKeyBoard = function() {
    if (moduleData$z.currentFocusIndex !== -1) {
        var item = moduleData$z.list[moduleData$z.currentFocusIndex];
        item.isFocus = false;
    }
};

moduleEvent$z.onConfirm = async function() {
    dataList = moduleData$z.list;
    console.log(`wp onConfirm size = ${moduleData$z.list.length}`);
    var higherMarginList = [];
    for (var i = 0; i < dataList.length; i++) {
        let item = dataList[i];
        console.log(`wp onConfirm item = ${JSON.stringify(item)} item.marginFixed=${item.marginFixed}`);
        if (item.marginFixed.length > 0) {
            higherMarginList.push({
                symbol: item.symbol,
                marginFixed: item.marginFixed
            });
        }
    }
    setHigherMarginList(higherMarginList);
    console.log(`wp onConfirm higherMarginList=${higherMarginList}`);
    $nativeAPI.containerBack();
    console.log(`wp onConfirm containerBack`);
    var higherMargin = "";
    for (var i = 0; i < higherMarginList.length; i++) {
        let item = higherMarginList[i];
        higherMargin += `${item.symbol}_amount:${item.marginFixed}`;
        if (i < higherMarginList.length - 1) {
            higherMargin += ",";
        }
    }
    let button_name = `confirm(${higherMargin})`;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings_increse_fixed_margin",
        button_name: button_name
    });
};

moduleEvent$z.onCreate = async function(eventParams) {
    console.log(`wp onCreate`);
    console.log("wp setHigherMargin - onCreate:%o", eventParams);
    if (!eventParams || eventParams == null) {
        showHigherMarginEmpty(true);
        return;
    }
    const params = JSON.parse(eventParams);
    if (params.marginLimit != null) {
        marginLimit = params.marginLimit.toString();
    }
    moduleData$z.navConfig = getNavConfigString();
    moduleData$z.emptyVisible = "gone";
    moduleData$z.listVisible = "visible";
    try {
        if (!$data.copySetting.configInfo || $data.copySetting.configInfo == null) {
            showHigherMarginEmpty(true);
            return;
        }
        handleHigherMarginData($data.copySetting.configInfo);
        showHigherMarginEmpty(false);
    } catch (e) {
        console.log(`wp handle order error=${e}`);
    }
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_trade_settings_increse_fixed_margin"
    });
};

function getNavConfigString() {
    let nav = {
        titleKey: "n_copy_trading_set_higher_margin",
        left: {
            action: {
                type: "back",
                parameter: ""
            },
            icon: "edge_engine_top_bar_back_normal"
        }
    };
    return nav;
}

moduleEvent$z.onDestroy = async function() {};

moduleEvent$z.onResume = async function() {};

moduleEvent$z.onPause = async function() {};

moduleEvent$z.onStart = async function() {};

moduleEvent$z.onStop = async function() {};

var rankTypeList = [];

var rankListParams = {};

var isRequest$8 = false;

async function start$z() {
    console.log(`wp  -- TraderList onSelectedIndex traderListData start=${$data.traderListData.rankType}`);
    if (!isRequest$8) {
        await requestTraderList$1(false);
        isRequest$8 = true;
    }
}

function defaultData$z() {
    return {
        searchWord: "",
        rankType: 0,
        pageNo: 1,
        pageSize: 6,
        isMore: false,
        pageNo: 1,
        traderList: [],
        emptyVisible: "invisible",
        listVisible: "invisible",
        refreshStatus: 0,
        loadMoreStatus: 0,
        followedUserSign: "",
        curSelectedIndex: null,
        homeGuidePopShow: false,
        firstTraderInfo: {}
    };
}

const {moduleData: moduleData$y, moduleEvent: moduleEvent$y} = moduleDefine("traderListData", start$z, defaultData$z);

function setupRankListType(typeList) {
    if (typeList != null || typeList != undefined) {
        rankTypeList = typeList;
        console.log(`tl -- setupRankListType==${rankTypeList}`);
    }
}

function setupRankListParams(params) {
    rankListParams = params;
}

async function requestTraderList$1(isMore) {
    console.log("tl -- 11111");
    if (!isMore) {
        $data.traderListData.pageNo = 1;
    } else {
        $data.traderListData.pageNo += 1;
    }
    var params = {
        rankType: $data.traderListData.rankType,
        pageSize: $data.traderListData.pageSize,
        pageNo: $data.traderListData.pageNo
    };
    if ($data.traderListData.searchWord.length > 0) {
        params["search"] = $data.traderListData.searchWord;
    }
    const mergedDict = Object.assign({}, params, rankListParams);
    console.log(`tl -- 列表请求参数==${mergedDict}`);
    let listData = await sendRequest$2("v1/copytrading/rank", mergedDict);
    console.log(`tl  -- TraderList onSelectedIndex traderListData requestTraderList=${$data.traderListData.rankType}`);
    console.log(`tl  -- TraderList listData=${listData}`);
    if (!isMore) {
        console.log("tl -- 交易员列表下拉刷新完成");
        $data.traderListData.refreshStatus = "2";
        console.log("tl -- 44444-!!! isMore");
    } else {
        $data.traderListData.loadMoreStatus = "2";
        console.log("tl -- 交易员列表加载更多完成");
        console.log("tl -- 44444-isMore");
    }
    if (listData != null) {
        $data.traderListData.followedUserSign = listData["currentUser"].followedUserSign;
        console.log("tl -- 555555");
        if ((listData.itemList == null || listData.itemList.length == 0) && !isMore) {
            $data.traderListData.emptyVisible = "visible";
            $data.traderListData.listVisible = "invisible";
            console.log("tl -- 66666-1 展示空视图");
            $data.traderListData.pageNo -= 1;
            return;
        }
        $data.traderListData.emptyVisible = "gone";
        $data.traderListData.listVisible = "visible";
        console.log("tl -- 77777 展示列表");
        listDataConfig$1(listData.itemList, isMore);
        return;
    } else {
        $data.traderListData.emptyVisible = "visible";
        $data.traderListData.listVisible = "invisible";
        console.log("tl -- 66666-2 展示空视图");
        $data.traderListData.pageNo -= 1;
        return;
    }
}

async function listDataConfig$1(list, isMore) {
    console.log(`tl -- 77777-1 展示列表,list=${list}`);
    list.forEach((function(item, index) {
        item.index = item.no - 1;
        if (item.index == 0) {
            item.showNoText = "gone";
            item.showNoPic = "visible";
            item.noPic = "@drawable/copy_trading_num_1";
        } else if (item.index == 1) {
            item.showNoText = "gone";
            item.showNoPic = "visible";
            item.noPic = "@drawable/copy_trading_num_2";
        } else if (item.index == 2) {
            item.showNoText = "gone";
            item.showNoPic = "visible";
            item.noPic = "@drawable/copy_trading_num_3";
        } else {
            item.showNoText = "visible";
            item.showNoPic = "gone";
        }
        item.noText = item.no.toString();
        item.traderListType = "1";
        item.apyTextColor = getPriceColor(item.profitRate90);
        item.winRateFontSize = commonData.language.toLocaleLowerCase().search("zh-cn") == 0 || commonData.language.toLocaleLowerCase().search("english") == 0 ? 12 : 11;
        console.log(`tl -- 77777-2-language==${commonData.language},winRateFontSize==${item.winRateFontSize}`);
        let apyValue = parseFloat(item.profitRate90);
        if (apyValue > 0) {
            item.profitRate90 = "+" + String((parseFloat(item.profitRate90) * 100).toFixed(2)) + "%";
        } else {
            item.profitRate90 = String((parseFloat(item.profitRate90) * 100).toFixed(2)) + "%";
        }
        item.copyUserNum = parseInt(item.copyUserNum).toFixed(0);
        item.fullUserNum = parseInt(item.fullUserNum).toFixed(0);
        item.winRate = String((parseFloat(item.winRate) * 100).toFixed(2)) + "%";
        item.mdd = String((parseFloat(item.mdd) * 100).toFixed(2)) + "%";
        item.aum = "$" + String(parseFloat(item.aum).toFixed(2));
        item.showTags = item.tags != null && item.tags.length > 0 ? "visible" : "gone";
        item.followed = item.copyStatus == 2 && !$data.traderData.userInfo.isTrader ? "visible" : "gone";
        item.followText = $i18n.copy_trading_text;
        item.fullText = $i18n.copy_trading_full;
        item.checkText = $i18n.copy_trading_check;
        item.followedText = $i18n.n_im_group_noti_edit;
        item.profits = JSON.stringify(item.profitList);
        if (item.copyStatus == 1) {
            item.showCheckText = "gone";
            item.showFullText = "gone";
            item.showFollowText = "gone";
            item.showFollowedText = "visible";
        } else if (item.full == 1) {
            item.showFullText = "visible";
            item.showCheckText = "gone";
            item.showFollowText = "gone";
            item.showFollowedText = "gone";
        } else if ($data.traderData.userInfo.isTrader) {
            item.showCheckText = "visible";
            item.showFullText = "gone";
            item.showFollowText = "gone";
            item.showFollowedText = "gone";
        } else {
            item.showFollowText = "visible";
            item.showFullText = "gone";
            item.showCheckText = "gone";
            item.showFollowedText = "gone";
        }
        if (isMore) {
            $data.traderListData.traderList.push(item);
            console.log("tl -- 88888 加载更多添加item");
        }
    }));
    if (!isMore) {
        $data.traderListData.traderList = list;
        showLoading(false);
        console.log(`tl -- 9999 下拉刷新，重置 list==${list}`);
    }
    let guideShow = await read("copyTrading", "home_guide_show");
    if ((guideShow == null || guideShow == "") && commonData.isFollower == 0 && commonData.hasTraderRight == 0) {
        $data.traderListData.firstTraderInfo = list[0];
        $data.traderListData.homeGuidePopShow = true;
        await analytics$1("pageview_copytrading", {
            business_category: "copytrading_app_home_follower_guidance"
        });
        save("copyTrading", "home_guide_show", "1");
    }
}

async function clickedItem$3(index) {
    if (index >= $data.traderListData.traderList.length) {
        return;
    }
    let item = $data.traderListData.traderList[index];
    let userSign = item.userSign;
    openURL(`holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${userSign}`);
    console.log(`tl -- copytrading 点击第 ${index} 个 item，跳转链接==${url}`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: "trader_details"
    });
}

async function clickedCopyTrading$1(index) {
    if (index >= $data.traderListData.traderList.length) {
        return;
    }
    var item = $data.traderListData.traderList[index];
    if (item.showFollowText === "visible") {
        if ($data.traderData.userInfo.isTrader == 1) {
            clickedItem$3(index);
        } else {
            {
                clickedFollowedMargin$1(index, false);
                await analytics$1("appclick_copytrading", {
                    business_category: "copytrading_app_home",
                    button_name: "follow"
                });
            }
        }
    } else if (item.showFullText === "visible") {
        clickedItem$3(index);
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_home",
            button_name: "full"
        });
        console.log(`点击了第 ${index} 个的满员按钮`);
    } else if (item.showCheckText === "visible") {
        clickedItem$3(index);
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_home",
            button_name: "view"
        });
        console.log(`点击了第 ${index} 个的查看按钮`);
    } else if (item.showFollowedText === "visible") {
        {
            clickedFollowedMargin$1(index, true);
        }
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_home",
            button_name: "edit"
        });
        console.log(`点击了第 ${index} 个的已跟单按钮`);
    }
}

function clickedFollowedMargin$1(index, isEdit) {
    if (parseBoolean(commonData.isChild)) {
        $data.homePage.childAccountShow = "true";
    } else {
        let item = $data.traderListData.traderList[index];
        openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=copySetting&navConfig=full&userSign=${item.userSign}&imgUrl=${item.imgUrl}&isEdit=${isEdit}`);
    }
}

function clickedShare$1(index) {
    if (index >= $data.traderListData.traderList.length) {
        return;
    }
    console.log(`点击了第 ${index} 个的分享按钮`);
}

async function onRefresh$3(searchWord = null, rankType = null) {
    if (searchWord != undefined && searchWord != null) {
        $data.traderListData.searchWord = searchWord;
    }
    if (rankType != undefined && rankType != null) {
        $data.traderListData.rankType = rankType;
    }
    await requestTraderList$1(false);
}

async function onLoadMore$8(searchWord = null, rankType = null) {
    console.log("tl -- 交易员列表开始加载更多");
    if (searchWord != undefined) {
        $data.traderListData.searchWord = searchWord;
    }
    if (rankType != undefined) {
        $data.traderListData.rankType = rankType;
    }
    await requestTraderList$1(true);
}

async function onSelectedIndex(index) {
    var idx = index;
    if (typeof index === "string") {
        idx = parseInt(index);
    }
    console.log(`wp  -- TraderList onSelectedIndex traderListData index=${idx} $data.traderListData.curSelectedIndex=${$data.traderListData.curSelectedIndex}`);
    if ($data.traderListData.curSelectedIndex !== idx) {
        $data.traderListData.curSelectedIndex = idx;
        $data.traderListData.rankType = rankTypeList[idx];
        console.log(`tl  -- TraderList onSelectedIndex traderListData rankTypeList=${rankTypeList}`);
        requestTraderList$1(false);
    }
    var buttonName = "";
    if (idx == 0) {
        buttonName = "leaderboard";
    } else if (idx == 1) {
        buttonName = "pnl_ratio";
    } else if (idx == 2) {
        buttonName = "pnl";
    } else if (idx == 3) {
        buttonName = "follower_total_pnl";
    } else if (idx == 4) {
        buttonName = " follower_count";
    } else if (idx == 5) {
        buttonName = "new_expert_trader";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: buttonName
    });
}

moduleEvent$y.hidePop = async function() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_follower_guidance",
        button_name: "confirm"
    });
    moduleData$y.homeGuidePopShow = false;
};

moduleEvent$y.clickedCopyTrading = clickedCopyTrading$1;

moduleEvent$y.clickedItem = clickedItem$3;

moduleEvent$y.clickedShare = clickedShare$1;

moduleEvent$y.onRefresh = onRefresh$3;

moduleEvent$y.onLoadMore = onLoadMore$8;

moduleEvent$y.requestTraderList = requestTraderList$1;

moduleEvent$y.onSelectedIndex = onSelectedIndex;

moduleEvent$y.setupRankListType = setupRankListType;

async function start$y() {
    initUserInfo();
    requestCoupon();
    requestTraderData$1();
}

function defaultData$y() {
    return {
        totalAssetsTitle: $i18n.$intercept.n_all_asset("USDT"),
        isTraderShow: "gone",
        traderInfo: {},
        showTraderTags: "gone",
        commonTags: [],
        icShowHide: "@drawable/edge_engine_copy_account_show",
        userProfitData: {},
        available: $i18n.n_otc_available + "(USDT)",
        hasTraderRight: 0,
        showSetting: "gone",
        showSelfSetting: false,
        popTraderShow: "gone",
        totalRevenue: "--",
        todayEarnings: "--",
        historicalReturn: "--",
        totalRevenueTitle: $i18n.$intercept.n_grid_strategy_profit("USDT"),
        todayEarningsTitle: $i18n.n_today_profit + "(USDT)",
        listVisible: "visible",
        emptyVisible: "gone",
        orderList: [],
        loadMoreStatus: 0,
        pageNo: 1,
        totalProfitShow: false,
        isIncomeArrayShow: "gone",
        nickData: {}
    };
}

const {moduleData: moduleData$x, moduleEvent: moduleEvent$x} = moduleDefine("meTopPage", start$y, defaultData$y);

async function initUserInfo() {
    if ($data.traderData.userInfo.isTrader) {
        moduleData$x.isTraderShow = "visible";
        moduleData$x.isIncomeArrayShow = "gone";
        moduleData$x.userType = $i18n.n_copy_trading_trader;
        moduleData$x.tabInfo = `{"tabs":[{"title":"${$i18n.n_copy_trading_order_profit}","template":"profitSharing","module":"profitSharing","onAppear":"profitSharing.onAppear"},{"title":"${$i18n.n_copytrading_orders_performance}","template":"myOrdersPerformance","module":"myOrdersPerformance","onAppear":"myOrdersPerformance.onAppear"},{"title":"${$i18n.n_copy_trading_my_follower}","template":"myFollower","module":"myFollower","onAppear":"myFollower.onAppear"}],"actionBar":{"title":"${$data.traderData.userInfo.nickName}","icon":"${$data.traderData.userInfo.imgUrl}"}, "hasTraderRight":${$data.traderData.userInfo.hasTraderRight}}`;
        await getTraderInfo();
    } else {
        moduleData$x.showTraderTags = "gone";
        moduleData$x.isTraderShow = "gone";
        moduleData$x.isIncomeArrayShow = "visible";
        moduleData$x.userType = $i18n.n_copy_trading_follower;
        moduleData$x.tabInfo = `{"tabs":[{"title":"${$i18n.n_copy_trading_now_follower}","template":"follow_orders","module":"followOrders","onAppear":"followOrders.onAppear","onTitleChange":"followOrders.currentOrderCount"},{"title":"${$i18n.n_copytrading_current_observation}","template":"followerPosition","module":"followerPosition","onAppear":"followerPosition.onAppear"},{"title":"${$i18n.n_copy_trading_historical_follower}","template":"history_follow_orders","module":"historyFollowOrders","onAppear":"historyFollowOrders.onAppear"},{"title":"${$i18n.n_copy_trading_my_trader}","template":"my_trader_list","module":"myTrader","onAppear":"myTrader.onAppear"}],"actionBar":{"title":"${$data.traderData.userInfo.nickName}","icon":"${$data.traderData.userInfo.imgUrl}"}, "hasTraderRight":${$data.traderData.userInfo.hasTraderRight}}`;
    }
    if ($data.traderData.userInfo.hasTraderRight) {
        moduleData$x.popTraderShow = "visible";
    } else {
        moduleData$x.popTraderShow = "gone";
    }
    refreshAccountShowHide();
}

async function onAppear$d() {
    console.log("meTopPage onAppear");
    analytics();
}

async function analytics() {
    if ($data.traderData.userInfo.isTrader) {
        await analytics$1("pageview_copytrading", {
            business_category: "copytrading_app_trader_me"
        });
    } else {
        await analytics$1("pageview_copytrading", {
            business_category: "copytrading_app_follower_me"
        });
    }
}

function showAccount() {
    var data = moduleData$x.userProfitData;
    moduleData$x.totalAsset = `${format(data.totalAsset, 4)}`;
    moduleData$x.availableTransfer = `${format(data.availableAsset, 4)}`;
    let tempTotalProfit = 0;
    let tempTodayProfit = 0;
    if (data.isTrader) {
        tempTotalProfit = parseFloat(moduleData$x.traderInfo.totalProfit);
        tempTodayProfit = parseFloat(moduleData$x.traderInfo.todayProfit);
        moduleData$x.totalProfit = `${tempTotalProfit >= 0 ? "+" : ""}${tempTotalProfit.toFixed(4)}`;
        moduleData$x.todayProfit = `${tempTodayProfit >= 0 ? "+" : ""}${tempTodayProfit.toFixed(4)}`;
    } else {
        tempTotalProfit = parseFloat(moduleData$x.userProfitData.totalProfit);
        tempTodayProfit = parseFloat(moduleData$x.userProfitData.todayProfit);
        moduleData$x.totalProfit = `${tempTotalProfit >= 0 ? "+" : ""}${parseFloat(moduleData$x.userProfitData.totalProfit).toFixed(4)}`;
        moduleData$x.todayProfit = `${tempTodayProfit >= 0 ? "+" : ""}${parseFloat(moduleData$x.userProfitData.todayProfit).toFixed(4)}`;
    }
}

async function getTraderInfo() {
    const traderInfo = await sendRequest$2("v1/copytrading/trader-info");
    if (!traderInfo || traderInfo == null) {
        showToast($i18n.n_check_network);
        return;
    }
    const traderData = await sendRequest$2("v1/copytrading/trader/trader-data", {
        userSign: traderInfo.userSign
    });
    moduleData$x.traderInfo = traderInfo;
    const tagMappings = traderInfo.tagMappings;
    if (!tagMappings || tagMappings == null || tagMappings.length == 0) {
        moduleData$x.showTraderTags = "gone";
    } else {
        var tagsArr = tagMappings.split(",");
        var tags = [];
        for (let i = 0; i < tagsArr.length; i++) {
            tags.push({
                tag: tagsArr[i],
                type: "normal",
                isShowCell: "visible"
            });
        }
        moduleData$x.commonTags = tags;
        moduleData$x.showTraderTags = "visible";
    }
    moduleData$x.copyNum = `${traderInfo.copyUserNum}/${traderInfo.fullUserNum}`;
    moduleData$x.joinDay = `${Math.ceil((traderInfo.ts - traderInfo.firstSignUp) / 1e3 / 3600 / 24)}`;
    let profitColor = getUpDownColor();
    if (parseFloat(traderInfo.profitRate) >= 0) {
        profitColor = getUpDownColor();
        moduleData$x.profitRate = `+${format(traderInfo.profitRate * 100, 2)}%`;
    } else {
        profitColor = getUpDownColor(false);
        moduleData$x.profitRate = `${format(traderInfo.profitRate * 100, 2)}%`;
    }
    moduleData$x.profitColor = profitColor;
    moduleData$x.totalProfitString = await formatDecimal(traderInfo.totalProfit, 2, true);
    moduleData$x.totalProfitTitle = `${$i18n.n_copy_trading_total_revenue}(USDT)`;
    if (traderData != null) {
        traderDataProcessing$1(traderData);
        moduleData$x.traderData = traderData;
        moduleData$x.copyOrderNum = $i18n.$intercept.n_person_number_unit(String(traderData.totalCopyUserNum));
    }
    moduleData$x.winRate = `${format(traderInfo.winRate * 100, 2)}%`;
    moduleData$x.time = (new Date).Format("MM/dd/yyyy hh:mm");
}

function traderDataProcessing$1(traderData) {
    try {
        traderData.upColor = getUpDownColor();
        traderData.downColor = getUpDownColor(false);
        traderData.totalCopyUserNum = `${parseInt(traderData.totalCopyUserNum)}`;
        traderData.copyNumStr = `${parseInt(traderData.copyNum)}`;
        if (isNaN(parseFloat(traderData.totalProfit))) {
            traderData.totalProfitColor = "@color/kColorSecondaryText";
            traderData.totalProfitStr = "--";
        } else if (parseFloat(traderData.totalProfit) >= 0) {
            traderData.totalProfitColor = getUpDownColor();
            traderData.totalProfitStr = `+${traderData.totalProfit}`;
        } else {
            traderData.totalProfitColor = getUpDownColor(false);
            traderData.totalProfitStr = `${traderData.totalProfit}`;
        }
        if (isNaN(parseFloat(traderData.copyTotalProfit))) {
            traderData.copyTotalProfitColor = "@color/kColorSecondaryText";
            traderData.copyTotalProfitStr = "--";
        } else if (parseFloat(traderData.copyTotalProfit) >= 0) {
            traderData.copyTotalProfitColor = getUpDownColor();
            traderData.copyTotalProfitStr = `+${traderData.copyTotalProfit}`;
        } else {
            traderData.copyTotalProfitColor = getUpDownColor(false);
            traderData.copyTotalProfitStr = `${traderData.copyTotalProfit}`;
        }
        traderData.apyStr = percentProcessing$1(traderData.apy);
        traderData.winRateStr = percentProcessing$1(traderData.winRate);
        traderData.mddStr = percentProcessing$1(traderData.mdd);
        traderData.aumStr = `$${traderData.aum}`;
        traderData.takeRateStr = percentProcessing$1(traderData.takeRate);
        if (traderData.profitLost == null || traderData.profitLost.length == 0) {
            traderData.profitLostStr = "--";
        } else {
            traderData.profitLostStr = `${traderData.profitLost[0]}:${traderData.profitLost[1]}`;
        }
        let win = parseInt(traderData.winNum);
        let loss = parseInt(traderData.lossNum);
        traderData.showOneWinLoss = "gone";
        traderData.showTwoWinLoss = "visible";
        if (win == 0 && loss == 0) {
            traderData.winNWeight = 1;
            traderData.lossNWeight = 1;
        } else {
            if (win == 0) {
                traderData.showOneWinLoss = "visible";
                traderData.showTwoWinLoss = "gone";
                traderData.winLossBg = "#E94359";
            } else if (loss == 0) {
                traderData.showOneWinLoss = "visible";
                traderData.showTwoWinLoss = "gone";
                traderData.winLossBg = "#00A171";
            }
            traderData.winNWeight = `${parseInt(win)}`;
            traderData.lossNWeight = `${parseInt(loss)}`;
        }
        traderData.winN = `${parseInt(win)}`;
        traderData.lossN = `${parseInt(loss)}`;
        traderData.avgProfitStr = `${traderData.avgProfit[0]}(${percentProcessing$1(traderData.avgProfit[1])})`;
        traderData.avgLostStr = `${traderData.avgLost[0]}(${percentProcessing$1(traderData.avgLost[1])})`;
        if (isNaN(parseFloat(traderData.avgHoldTime))) {
            traderData.avgHoldTimeStr = "--";
        } else {
            let holdTime = parseFloat(traderData.avgHoldTime);
            if (holdTime < 6e4) {
                traderData.avgHoldTimeStr = `${parseInt(holdTime / 1e3)}${$i18n.n_exchange_timing_second}`;
            } else if (holdTime < 36e5) {
                traderData.avgHoldTimeStr = `${(holdTime / 6e4).toFixed(2)}${$i18n.n_minute}`;
            } else if (holdTime < 24 * 36e5) {
                traderData.avgHoldTimeStr = `${(holdTime / 36e5).toFixed(2)}${$i18n.n_hour}`;
            } else {
                traderData.avgHoldTimeStr = `${(holdTime / (24 * 36e5)).toFixed(2)}${$i18n.n_day}`;
            }
        }
        traderData.weekTradeNumStr = `${traderData.weekTradeNum}${$i18n.n_otc_merchant_info_count}`;
        traderData.daysOfEntry = `${Math.ceil((parseInt(traderData.ts) - parseInt(traderData.firstSignUp)) / 1e3 / 60 / 60 / 24 + 1)}${$i18n.n_day}`;
        if (traderData.symbolRates == null || traderData.symbolRates.length == 0) {
            traderData.likeSymbol = "--";
        } else {
            traderData.likeSymbol = JSON.parse(traderData.symbolRates[0]).s.replace("-", "");
        }
        traderData.lastTradeStr = `${new Date(traderData.lastTrade).Format("yyyy-MM-dd hh:mm:ss")}`;
    } catch (e) {
        console.log(`meTopPage traderDataProcessing error = ${e}`);
    }
}

function percentProcessing$1(numStr) {
    let num = parseFloat(numStr);
    if (isNaN(num)) {
        return "--";
    }
    return String((num * 100).toFixed(2)) + "%";
}

moduleEvent$x.shareAction = async function() {
    moduleData$x.showSelfSetting = false;
    console.log("meTopPage shareAction");
    $nativeAPI.shareAbility({
        type: "renderSync",
        template: "trader_share",
        waitTime: 2,
        jumpUrl: ""
    });
};

async function refreshPageData() {
    moduleData$x.nickData = `{"actionBar":{"title":"${$data.traderData.userInfo.nickName}","icon":"${$data.traderData.userInfo.imgUrl}"}}`;
    if ($data.traderData.userInfo.isTrader) {
        await getTraderInfo();
    }
    requestTraderData$1();
}

moduleEvent$x.showHide = async function() {
    let isShowAccount = await read("copyTrading", "showAccount");
    await save("copyTrading", "showAccount", !isShowAccount);
    refreshAccountShowHide();
    if ($data.traderData.userInfo.isTrader) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me",
            button_name: "account_overview"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "account_overview"
        });
    }
};

async function refreshAccountShowHide() {
    let isShowAccount = await read("copyTrading", "showAccount");
    if (isShowAccount == null || isShowAccount) {
        moduleData$x.icShowHide = "@drawable/edge_engine_copy_account_show";
        showAccount();
    } else {
        moduleData$x.icShowHide = "@drawable/edge_engine_copy_account_hide";
        moduleData$x.totalAsset = "******";
        moduleData$x.availableTransfer = "******";
        moduleData$x.totalProfit = "******";
        moduleData$x.todayProfit = "******";
    }
    let tempTodayProfit = 0;
    if (moduleData$x.userProfitData.isTrader) {
        tempTodayProfit = parseFloat(moduleData$x.traderInfo.todayProfit);
    } else {
        tempTodayProfit = parseFloat(moduleData$x.userProfitData.todayProfit);
    }
    moduleData$x.todayProfitColor = tempTodayProfit >= 0 ? getUpDownColor(true) : getUpDownColor(false);
}

moduleEvent$x.toSetting = async function() {
    moduleData$x.showSelfSetting = false;
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=followSetting&xml=followSetting&navConfig=native`);
    if ($data.traderData.userInfo.isTrader) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me",
            button_name: "settings"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "settings"
        });
    }
};

moduleEvent$x.toTransfer = async function() {
    openURL("holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/balance/transfer?coin=usdt&account=13");
    if ($data.traderData.userInfo.isTrader) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me",
            button_name: "transfer"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "transfer"
        });
    }
};

moduleEvent$x.toTransferHistory = async function() {
    moduleData$x.showSelfSetting = false;
    openURL("holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/balance/copyTradingTransferRecord");
    if ($data.traderData.userInfo.isTrader) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me",
            button_name: "transfer_history"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "transfer_history"
        });
    }
};

moduleEvent$x.toCapitalFlow = async function() {
    if ($data.traderData.userInfo.isTrader) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me",
            button_name: "statement"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "statement"
        });
    }
    moduleData$x.showSelfSetting = false;
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=capitalFlow&xml=capitalFlow&start=capitalFlow.start`);
};

moduleEvent$x.availableTapAction = function() {
    const content = $i18n.$intercept.n_contract_canuse_alert_explain_tips(moduleData$x.availableTransferTips, moduleData$x.trailFundBalance);
    console.log(`availableTapAction--\x3e> availableTransfer = ${moduleData$x.availableTransferTips}, trailFundBalance = ${moduleData$x.trailFundBalance}, content = ${content}`);
    popUpContentOfOneButton($i18n.n_exchange_balance_notice_title, content);
};

moduleEvent$x.couponTapAction = async function() {
    if ($data.traderData.userInfo.isTrader) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me",
            button_name: "coupon"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "coupon"
        });
    }
    popUpContentOfCoupon(2);
};

async function requestTraderData$1() {
    let data = await sendRequest$2("v1/copytrading/user-profit", null);
    if (data != null) {
        moduleData$x.userProfitData = data;
        moduleData$x.availableTransferTips = `${format(data.availableAsset, 4)}`;
        moduleData$x.trailFundBalance = `${format(data.trailFundBalance, 4)}`;
        moduleData$x.hasTraderRight = data.hasTraderRight;
        if ($data.traderData.userInfo.isTrader || moduleData$x.hasTraderRight == 1) {
            moduleData$x.showSetting = "visible";
        }
        refreshAccountShowHide();
    }
}

$event.couponSelect = function() {
    console.log(`wp ======couponSelect`);
    requestTraderData$1();
};

moduleEvent$x.back = function() {
    $nativeAPI.containerBack();
};

moduleEvent$x.selfSettingShow = async function() {
    moduleData$x.showSelfSetting = true;
    if ($data.traderData.userInfo.isTrader) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me",
            button_name: "menu"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "menu"
        });
    }
};

moduleEvent$x.selfSettingPopDismiss = function() {
    moduleData$x.showSelfSetting = false;
};

moduleEvent$x.popDismiss = function() {
    moduleData$x.totalProfitShow = false;
};

async function requestTraderProfitData$1() {
    let data = await sendRequest$2("v1/copytrading/user-profit", null);
    if (data != null) {
        commonData.userSign = data.userSign;
        moduleData$x.totalRevenue = formatPrecision(data.totalProfit, 4);
        moduleData$x.todayEarnings = formatPrecision(data.todayProfit, 4);
        moduleData$x.historicalReturn = formatPrecision(data.totalProfit - data.todayProfit, 4);
    }
}

async function requestTraderProfitDetail$1() {
    moduleData$x.pageNo = 1;
    var params = {
        userSign: commonData.userSign,
        pageNo: moduleData$x.pageNo,
        pageSize: 20
    };
    let data = await sendRequest$2("v1/copytrading/follower/profit-detail-list", params);
    try {
        if (data) {
            const {dataList: dataList} = data;
            if (dataList.length > 0) {
                let orderList = [];
                for (let i = 0; i < dataList.length; ++i) {
                    let profit = dataList[i];
                    orderList.push({
                        income: formatPrecision(profit.orderProfit, 4),
                        time: new Date(profit.orderTime).Format("MM-dd hh:mm:ss"),
                        type: "1"
                    });
                }
                moduleData$x.orderList = orderList;
                moduleData$x.listVisible = "visible";
                moduleData$x.emptyVisible = "gone";
            } else {
                moduleData$x.listVisible = "gone";
                moduleData$x.emptyVisible = "visible";
            }
        }
    } catch (e) {
        moduleData$x.listVisible = "gone";
        moduleData$x.emptyVisible = "visible";
    }
}

async function loadMoreTraderProfitDetail$1() {
    var params = {
        userSign: commonData.userSign,
        pageNo: moduleData$x.pageNo + 1,
        pageSize: 20
    };
    let data = await sendRequest$2("v1/copytrading/follower/profit-detail-list", params);
    try {
        if (data) {
            const {dataList: dataList} = data;
            if (dataList.length > 0) {
                for (let i = 0; i < dataList.length; ++i) {
                    let profit = dataList[i];
                    moduleData$x.orderList.push({
                        income: formatPrecision(profit.orderProfit, 4),
                        time: new Date(profit.orderTime).Format("MM-dd hh:mm:ss"),
                        type: "1"
                    });
                }
                moduleData$x.pageNo = moduleData$x.pageNo + 1;
                moduleData$x.listVisible = "visible";
                moduleData$x.emptyVisible = "gone";
            }
        }
        moduleData$x.loadMoreStatus = 2;
    } catch (e) {
        moduleData$x.loadMoreStatus = 2;
    }
}

async function totalProfitDismiss$1() {
    moduleData$x.totalProfitPopShow = false;
}

async function totalProfitShow$1() {
    if (!$data.traderData.userInfo.isTrader) {
        showLoading(true);
        requestTraderProfitData$1();
        requestTraderProfitDetail$1();
        showLoading(false);
        moduleData$x.totalProfitShow = true;
        analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "copytrading_pnl"
        });
    }
}

async function gotoCopyTrading$1() {
    let url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    openURL(url);
}

moduleEvent$x.totalProfitTipShow = function() {
    moduleData$x.totalProfitPopShow = true;
};

moduleEvent$x.totalProfitAlertDismiss = function() {
    moduleData$x.totalProfitPopShow = false;
};

moduleEvent$x.totalProfitClose = function() {
    moduleData$x.totalProfitShow = false;
};

moduleEvent$x.onLoadMore = loadMoreTraderProfitDetail$1;

moduleEvent$x.totalProfitDismiss = totalProfitDismiss$1;

moduleEvent$x.totalProfitShow = totalProfitShow$1;

moduleEvent$x.gotoCopyTrading = gotoCopyTrading$1;

moduleEvent$x.getTraderInfo = getTraderInfo;

moduleEvent$x.refreshPageData = refreshPageData;

moduleEvent$x.onAppear = onAppear$d;

async function start$x() {
    console.log(`traderData-start`);
    await requestTraderData();
}

function defaultData$x() {
    return {
        filterInfo: `["${$i18n.n_copy_trading_trader_rank_comprehensive}","${$i18n.copy_trading_total_rate}","${$i18n.copy_trading_total_profits}","${$i18n.copy_trading_follow_profits}"]`
    };
}

const {moduleData: moduleData$w, moduleEvent: moduleEvent$w} = moduleDefine("traderData", start$x, defaultData$x);

async function requestTraderData() {
    let data = await sendRequest$2("v1/copytrading/user-profit", null);
    if (data != null) {
        commonData.userSign = data.userSign;
        commonData.isTrader = data.isTrader;
        commonData.isFollower = data.isFollower;
        commonData.hasTraderRight = data.hasTraderRight;
        console.log(`copytrading -- userSign==${commonData.userSign}`);
        data.isNative = 1;
        data.isNewHome = 1;
        moduleData$w.userInfo = data;
    } else {
        moduleData$w.userInfo = {
            isTrader: 0,
            isNative: 1,
            isNewHome: 1
        };
    }
    try {
        refreshPageData();
    } catch (e) {
        console.log(`requestTraderData--refreshPageData e = ${e}`);
    }
}

function start$w() {
    changeTitle();
    calcAD();
}

function defaultData$w() {
    return {
        symbolTitle: "",
        ad: "",
        adColor: "",
        adBackgroundColor: ""
    };
}

const {moduleData: moduleData$v, moduleEvent: moduleEvent$v} = moduleDefine("tradeTitle", start$w, defaultData$w);

function jumpToIncomingCalc() {
    var url = `${commonData.contractH5Url}/linear_swap/calculator?source=copytrading&symbol=${commonData.currentSymbol}`;
    openPage(url, "contractWeb");
}

function calcAD() {
    if (Object.getOwnPropertyNames(commonData.linearSwapWsData).length == 0) {
        moduleData$v.ad = "";
        moduleData$v.adColor = "@color/kColorThreeLevelText";
        moduleData$v.adBackgroundColor = "#00000000";
        return;
    }
    let data = commonData.linearSwapWsData[commonData.currentSymbol];
    if (null != data) {
        if (data.close == data.open) {
            moduleData$v.ad = "0.00%";
            moduleData$v.adColor = "@color/kColorThreeLevelText";
            moduleData$v.adBackgroundColor = "#00000000";
        } else {
            var insertedValue = "0F";
            let ad = (data.close - data.open) / data.open * 100;
            if (ad > 0) {
                moduleData$v.ad = `+${ad.toFixed(2)}%`;
                moduleData$v.adColor = getUpDownColor();
            } else {
                moduleData$v.ad = `${ad.toFixed(2)}%`;
                moduleData$v.adColor = getUpDownColor(false);
            }
            moduleData$v.adBackgroundColor = moduleData$v.adColor.slice(0, 1) + insertedValue + moduleData$v.adColor.slice(1);
        }
    } else {
        moduleData$v.ad = "--";
        moduleData$v.adColor = "@color/kColorThreeLevelText";
        moduleData$v.adBackgroundColor = "#00000000";
    }
}

function changeTitle() {
    moduleData$v.symbolTitle = symbolDesc(commonData.currentSymbol);
}

moduleEvent$v.changeTitle = changeTitle;

moduleEvent$v.jumpToIncomingCalc = jumpToIncomingCalc;

moduleEvent$v.calcAD = calcAD;

async function start$v() {
    $data.drawer.popShow = "true";
    $data.drawer.statusPlaceVisible = commonData.OS == 0 ? "visible" : "gone";
    $data.drawer.isOpen = true;
    await requestSymbolData$1();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_USDT-M",
        button_name: "perpetual_contract_trading_pairs"
    });
}

function defaultData$v() {
    return {
        contractSymbolList: [],
        popShow: "false",
        statusPlaceVisible: "gone",
        isOpen: false
    };
}

moduleDefine("drawer", start$v, defaultData$v);

var supportSymbolList$1 = [];

async function requestSymbolData$1() {
    await sendRequestWithCache("v1/copytrading/support-contract-symbol", callback = drawerDataCallback$1);
}

function drawerDataCallback$1(drawerData, isCache) {
    console.log(`requestSymbolData  drawerDataCallback isCache = ${isCache} supportSymbolList.length = ${supportSymbolList$1.length} drawerData:${JSON.stringify(drawerData)}`);
    if (isCache && supportSymbolList$1.length > 0) {
        return;
    }
    if (drawerData && drawerData != "") {
        console.log("requestSymbolData  end drawerData.supportSymbol:" + JSON.stringify(drawerData.supportSymbol));
        if (drawerData.supportSymbol != null && !isCache) {
            if (!clickThrottle(2e3)) return;
            showDrawer(drawerData.supportSymbol);
        } else {
            console.log("requestSymbolData supportSymbolList = null");
        }
    }
}

function start$u() {}

function defaultData$u() {
    return {
        navConfig: `{"left":{"icon":"edge_engine_top_bar_back_normal","action":{"type":"back","parameter":""},"text":null}, "titleKey":"n_copytrading_selectcurrency_title"}`,
        selectionType: 0,
        allSelection: 0,
        selectionCountString: $i18n.n_copytrading_selectcurrency_selection,
        currencys: [],
        selectionCurrencys: [],
        allSelectionBorderColor: "@color/baseColorMajorTheme100",
        allSelectionImage: "@drawable/icon_copytrading_currency_selection_s",
        custemSelectionBorderColor: "@color/eColorPrimarySeparator",
        custemSelectionImage: "@drawable/icon_copytrading_currency_selection_n",
        actionTitle: $i18n.n_sure,
        actionColor: "@color/KBaseTextColor",
        actionBackgroudColor: "@color/baseColorMajorTheme100",
        listVisible: "gone",
        controlVisible: "gone",
        selectAll: false,
        selectionCurrencyBorderColor: "@color/baseColorMajorTheme100",
        selectionCurrencyBackgroudColor: "@color/kColorMajorTheme006",
        selectionCurrencyTextColor: "@color/baseColorMajorTheme100",
        allSelection: 0,
        allImage: "@drawable/icon_copytrading_currency_selection_all_part",
        girdHeight: 400
    };
}

const {moduleData: moduleData$u, moduleEvent: moduleEvent$u} = moduleDefine("currencySelection", start$u, defaultData$u);

moduleEvent$u.onCreate = async function(eventParams) {
    try {
        moduleData$u.allSymbols = $data.copySetting.allSymbols;
        moduleData$u.followSymbols = $data.copySetting.followSymbols;
        const currencys = [];
        moduleData$u.selectionCurrencys = [];
        for (var i = 0; i < moduleData$u.allSymbols.length; i++) {
            var strArray = moduleData$u.allSymbols[i].split("-");
            let baseCurrency = strArray[0].toUpperCase();
            let quoteCurrency = strArray[1].toUpperCase();
            var chooseType = 0;
            console.log(`currencySelection followSymbols = ${String(moduleData$u.followSymbols)}`);
            if (moduleData$u.followSymbols != null && String(moduleData$u.followSymbols).indexOf(`${baseCurrency}-${quoteCurrency}`) >= 0) {
                chooseType = 1;
                moduleData$u.selectionCurrencys.push(`${baseCurrency}-${quoteCurrency}`);
            }
            const item = {
                index: i,
                symbol: `${baseCurrency}-${quoteCurrency}`,
                title: `${baseCurrency}${quoteCurrency}`,
                isChoose: chooseType,
                icon: getPNGIconURLByCurrency(baseCurrency.toLowerCase()),
                cellType: "1"
            };
            currencys.push(item);
        }
        const girdHeight = moduleData$u.allSymbols.length / 2 * 50 + (moduleData$u.allSymbols.length % 2 == 0 ? 0 : 100);
        console.log(`wp ---currencySelection--\x3e> moduleData.allSymbols.length / 2 = ${moduleData$u.allSymbols.length / 2}, moduleData.allSymbols.length % 2 = ${moduleData$u.allSymbols.length % 2}`);
        moduleData$u.currencySelectionHeight = girdHeight > 400 ? girdHeight : 400;
        console.log(`wp ---currencySelection--\x3e> moduleData.currencySelectionHeigh = ${moduleData$u.currencySelectionHeight}`);
        moduleData$u.currencysData = currencys;
        moduleData$u.currencys = moduleData$u.currencysData;
        if (moduleData$u.followSymbols == null) {
            typeSelelct(0);
        } else {
            typeSelelct(1);
        }
        updateSelectionCurrencyColor();
    } catch (e) {
        console.log(`currencySelection--\x3e> onCreate error = ${e}`);
    }
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_trade_settings_le"
    });
};

async function updateAction() {
    if (moduleData$u.selectionCurrencys.length > 0 || moduleData$u.selectAll) {
        moduleData$u.actionTitle = $i18n.n_sure;
        moduleData$u.actionBackgroudColor = "@color/baseColorMajorTheme100";
        moduleData$u.actionColor = "@color/KBaseTextColor";
    } else {
        moduleData$u.actionTitle = $i18n.n_copytrading_selectcurrency_tips;
        moduleData$u.actionBackgroudColor = "@color/eColorPrimarySeparator";
        moduleData$u.actionColor = "@color/kColorThreeLevelText";
    }
    let total = moduleData$u.currencys.length;
    let select = moduleData$u.selectionCurrencys.length;
    moduleData$u.selectionCountString = $i18n.n_copytrading_selectcurrency_selection + `${select}/${total}`;
    allSelelctButton();
}

async function allSelelctButton() {
    if (moduleData$u.selectionCurrencys.length == 0) {
        moduleData$u.allSelection = 0;
        moduleData$u.allImage = "@drawable/icon_copytrading_currency_selection_all_n";
    } else {
        if (moduleData$u.selectionCurrencys.length == moduleData$u.currencys.length) {
            moduleData$u.allSelection = 1;
            moduleData$u.allImage = "@drawable/icon_copytrading_currency_selection_all";
        } else {
            moduleData$u.allSelection = 0;
            moduleData$u.allImage = "@drawable/icon_copytrading_currency_selection_all_part";
        }
    }
}

async function updateSelectionCurrencyColor() {
    for (var i = 0; i < moduleData$u.currencysData.length; i++) {
        let item = moduleData$u.currencysData[i];
        if (item.isChoose == 1) {
            item.selectionCurrencyBorderColor = "@color/baseColorMajorTheme100";
            item.selectionCurrencyBackgroudColor = "@color/kColorMajorTheme006";
            item.selectionCurrencyTextColor = "@color/baseColorMajorTheme100";
        } else {
            item.selectionCurrencyBorderColor = "@color/eContentNavUnselectedBackground";
            item.selectionCurrencyBackgroudColor = "@color/eContentNavUnselectedBackground";
            item.selectionCurrencyTextColor = "@color/kColorPrimaryText";
        }
    }
    moduleData$u.currencys = moduleData$u.currencysData;
}

async function allSelelct() {
    try {
        if (moduleData$u.allSelection == 0) {
            const selectedItems = [];
            for (var i = 0; i < moduleData$u.currencysData.length; i++) {
                let item = moduleData$u.currencysData[i];
                item.isChoose = 1;
                selectedItems.push(item.symbol);
            }
            moduleData$u.selectionCurrencys = selectedItems;
            moduleData$u.allSelection = 1;
            moduleData$u.allImage = "@drawable/icon_copytrading_currency_selection_all";
        } else {
            for (var i = 0; i < moduleData$u.currencysData.length; i++) {
                let item = moduleData$u.currencysData[i];
                item.isChoose = 0;
            }
            moduleData$u.allSelection = 0;
            moduleData$u.allImage = "@drawable/icon_copytrading_currency_selection_all_n";
            moduleData$u.selectionCurrencys = [];
        }
        updateAction();
        updateSelectionCurrencyColor();
    } catch (e) {
        console.error(`getSelectedItem error:${e}`);
    }
}

async function itemSelelct(idx) {
    try {
        var item = moduleData$u.currencysData[idx];
        if (item.isChoose == 1) {
            item.isChoose = 0;
            item.selectionCurrencyBorderColor = "@color/eContentNavUnselectedBackground";
            item.selectionCurrencyBackgroudColor = "@color/eContentNavUnselectedBackground";
            item.selectionCurrencyTextColor = "@color/kColorPrimaryText";
        } else {
            item.isChoose = 1;
            item.selectionCurrencyBorderColor = "@color/baseColorMajorTheme100";
            item.selectionCurrencyBackgroudColor = "@color/kColorMajorTheme006";
            item.selectionCurrencyTextColor = "@color/baseColorMajorTheme100";
        }
        const selectedItems = [];
        for (var i = 0; i < moduleData$u.currencysData.length; i++) {
            let item = moduleData$u.currencysData[i];
            if (item.isChoose == 1) {
                selectedItems.push(item.symbol);
            }
        }
        if (selectedItems.length == moduleData$u.currencysData.length) {
            moduleData$u.allSelection = 1;
            moduleData$u.allImage = "@drawable/icon_copytrading_currency_selection_all";
        } else {
            if (selectedItems.length == 0) {
                moduleData$u.allSelection = 0;
                moduleData$u.allImage = "@drawable/icon_copytrading_currency_selection_all_n";
            } else {
                moduleData$u.allSelection = 0;
                moduleData$u.allImage = "@drawable/icon_copytrading_currency_selection_all_part";
            }
        }
        moduleData$u.currencys = moduleData$u.currencysData;
        moduleData$u.selectionCurrencys = selectedItems;
        updateAction();
    } catch (e) {
        console.error(`onItemClick error:${e}`);
    }
}

async function typeSelelct(type) {
    if (type == 0) {
        moduleData$u.allSelectionBorderColor = "@color/baseColorMajorTheme100";
        moduleData$u.allSelectionImage = "@drawable/icon_copytrading_currency_selection_s";
        moduleData$u.custemSelectionBorderColor = "@color/eColorPrimarySeparator";
        moduleData$u.custemSelectionImage = "@drawable/icon_copytrading_currency_selection_n";
        moduleData$u.listVisible = "gone";
        moduleData$u.controlVisible = "gone";
        moduleData$u.selectAll = true;
        updateSelectionCurrencyColor();
    } else {
        moduleData$u.custemSelectionBorderColor = "@color/baseColorMajorTheme100";
        moduleData$u.custemSelectionImage = "@drawable/icon_copytrading_currency_selection_s";
        moduleData$u.allSelectionBorderColor = "@color/eColorPrimarySeparator";
        moduleData$u.allSelectionImage = "@drawable/icon_copytrading_currency_selection_n";
        moduleData$u.listVisible = "visible";
        moduleData$u.controlVisible = "visible";
        moduleData$u.selectAll = false;
    }
    updateAction();
}

async function confirm$1() {
    if (moduleData$u.selectionCurrencys.length == 0 && !moduleData$u.selectAll) {
        return;
    }
    if (moduleData$u.selectAll == true) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings_le",
            button_name: "confirm(all_pair)"
        });
    } else {
        var chooseCurrency = "";
        for (var i = 0; i < moduleData$u.selectionCurrencys.length; i++) {
            var currency = moduleData$u.selectionCurrencys[i];
            chooseCurrency += `${currency}`;
            if (i < moduleData$u.selectionCurrencys.length - 1) {
                chooseCurrency += ",";
            }
        }
        let button_name = `confirm(customized_pair: ${chooseCurrency})`;
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings_le",
            button_name: button_name
        });
    }
    refreshChooseCurrency(moduleData$u.selectAll, moduleData$u.selectionCurrencys);
    $nativeAPI.containerBack();
}

moduleEvent$u.allSelelct = allSelelct;

moduleEvent$u.itemSelelct = itemSelelct;

moduleEvent$u.typeSelelct = typeSelelct;

moduleEvent$u.confirm = confirm$1;

var takeRate = null;

async function start$t() {}

function defaultData$t() {
    return {
        modelList: [],
        selIndex: null,
        selRatio: null,
        configInfo: null,
        showing: false
    };
}

const {moduleData: moduleData$t, moduleEvent: moduleEvent$t} = moduleDefine("sharingRatio", start$t, defaultData$t);

async function requestRatioList() {
    moduleData$t.configInfo = await sendRequest$2("v1/copytrading/trader/apply-configs", null);
    if (moduleData$t.configInfo.takeRate != null && moduleData$t.configInfo.takeRate.length > 0) {
        takeRate = moduleData$t.configInfo.takeRate;
    }
    moduleData$t.link = '"' + commonData.webUrl + "/" + commonData.language + "/support/104916786098500" + '"';
    moduleData$t.richTextData = `{"content":"n_copy_trading_followsetting_license_hint","textColor":"kColorPrimaryText","textSize":12,"highlight":[{"content":"n_copy_trading_followsetting_license_title","link":${moduleData$t.link},"textColor":"kColorMajorTheme100","textSize":12}]}`;
    moduleData$t.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_n";
    moduleData$t.checkAgreement = false;
    if (moduleData$t.configInfo != null && moduleData$t.configInfo.takeRateChoices != null) {
        setupRatioList();
    }
}

async function updateShareRatio() {
    if (moduleData$t.selIndex != null) {
        const num = moduleData$t.configInfo.takeRateChoices[moduleData$t.selIndex];
        if (num == null) {
            return;
        }
        let params = {
            takeRate: num
        };
        showLoading(true);
        const ret = await sendRequest$2("v1/copytrading/trader/apply", params, 1, 0, {
            "Content-Type": "application/json"
        });
        showLoading(false);
        if (ret != null) {
            showToast($i18n.n_copy_trading_open_sharing_success);
            await save("copyTrading", "tradeReviewShow", true);
            await requestTraderData();
            $data.traderData.userInfo.resetPage = true;
            $data.traderData.userInfo.tabbarIndex = "1";
        }
    }
}

function setupRatioList() {
    var list = [];
    for (const [index, num] of moduleData$t.configInfo.takeRateChoices.rawArray().entries()) {
        var item = {};
        item.type = "1";
        item.index = index;
        item.ratio = `${(num * 100).toString()}%`;
        if (takeRate == null && index == 0 || takeRate != null && parseFloat(takeRate) == parseFloat(num)) {
            if (takeRate == null && index == 0) {
                moduleData$t.selIndex = 0;
            }
            item.textColor = "@color/kColorMajorTheme100";
            item.selImageVisibility = "visible";
            item.selected = true;
        } else {
            item.textColor = "@color/kColorPrimaryText";
            item.selImageVisibility = "gone";
            item.selected = false;
        }
        list.push(item);
    }
    moduleData$t.modelList = list;
}

function clickedClose$2() {
    console.log(`sharingRatio-clickedClose`);
    moduleData$t.popShow = false;
    moduleData$t.selIndex = null;
    $data.homePage.sharingPopShow = false;
}

function popDismiss$2() {
    console.log(`sharingRatio-popDismiss`);
    clickedClose$2();
}

function clickedDone$2() {
    console.log(`sharingRatio-clickedDone`);
    if (moduleData$t.checkAgreement == false) {
        showToast($i18n.n_copy_trading_followsetting_license_tips);
        return;
    }
    updateShareRatio();
    $data.homePage.sharingPopShow = false;
    moduleData$t.popShow = false;
}

function clickedMenuItem$2(idx) {
    if (moduleData$t.selIndex != null) {
        var lastItem = moduleData$t.modelList[moduleData$t.selIndex];
        if (idx == moduleData$t.selIndex) {
            return;
        }
        lastItem.textColor = "@color/kColorPrimaryText";
        lastItem.selImageVisibility = "gone";
        lastItem.selected = false;
        moduleData$t.selIndex = idx;
        var selItem = moduleData$t.modelList[moduleData$t.selIndex];
        selItem.textColor = "@color/kColorMajorTheme100";
        selItem.selImageVisibility = "visible";
        selItem.selected = true;
        moduleData$t.configInfo.takeRateChoices[moduleData$t.selIndex];
        analytics_clickedItem();
    } else {
        var selItem = moduleData$t.modelList[idx];
        moduleData$t.selIndex = idx;
        selItem.textColor = "@color/kColorMajorTheme100";
        selItem.selImageVisibility = "visible";
        selItem.selected = true;
        analytics_clickedItem();
    }
}

moduleEvent$t.checkAgreementChange = async function() {
    if (moduleData$t.checkAgreement == false) {
        moduleData$t.checkAgreement = true;
        moduleData$t.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_s";
    } else {
        moduleData$t.checkAgreement = false;
        moduleData$t.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_n";
    }
};

async function onWillDisappear() {
    console.log(`sharingRatio-onWillDisappear`);
    moduleData$t.popShow = false;
}

async function onAppear$c() {
    console.log(`sharingRatio-onAppear`);
    if ($data.homePage.sharingPopShow) {
        moduleData$t.popShow = true;
    }
}

async function analytics_clickedItem() {
    const num = moduleData$t.configInfo.takeRateChoices[moduleData$t.selIndex];
    console.log(`sharingRatio-analytics_clickedItem-num==${num * 100}`);
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_me_settings",
        button_name: `set_pnl_sharing_ratio_${num * 100}%`
    });
}

moduleEvent$t.clickedMenuItem = clickedMenuItem$2;

moduleEvent$t.start = start$t;

moduleEvent$t.clickedClose = clickedClose$2;

moduleEvent$t.clickedDone = clickedDone$2;

moduleEvent$t.setupRatioList = setupRatioList;

moduleEvent$t.requestRatioList = requestRatioList;

moduleEvent$t.popDismiss = popDismiss$2;

moduleEvent$t.onAppear = onAppear$c;

moduleEvent$t.onWillDisappear = onWillDisappear;

var moduleDidStart = false;

var bannerDataList = [];

var exposuredSet = new Set;

async function start$s() {
    moduleDidStart = true;
    requestBannerInfo();
    console.log(`wp -- requestMaintenanceInfo 1`);
    await requestMaintenanceInfo();
    console.log(`wp -- requestMaintenanceInfo 4`);
    if (parseBoolean(commonData.isChild)) {
        moduleData$s.childAccountShow = "true";
    } else {
        await requestUserIsHit();
    }
    await requestBanner();
    await requestExpGold();
    await requestViolatedReminder();
    await requestRatioList();
    await requestQuestionnaire();
    console.log(`wp -- isTrader==${commonData.isTrader} hasTraderRight==${commonData.hasTraderRight}`);
    if (commonData.isTrader == 0 && commonData.hasTraderRight == 1) {
        var showed = await read("copyTrading", "tradeReviewShow");
        var showedTime = await read("copyTrading", "trader_review_show_time");
        const currentTime = Date.now();
        if ((showed == null || !showed) && !isSameDay(currentTime, showedTime)) {
            $data.homePage.trader_reviewShow = true;
        }
    }
    console.log(`wp -- start 5555`);
}

function defaultData$s() {
    return {
        bannerList: [],
        bannerCurrentIndex: "1",
        totalPage: "0",
        bannerVisibility: "gone",
        bannerTextVisibility: "gone",
        bannerPlaceholerVisibility: "visible",
        bannerPlaceholerImage: "@drawable/home_new_banner_placeholder",
        bannerAndroidStrokeVisibility: commonData.OS == 1 ? "visible" : "gone",
        autoScroll: "true",
        currentIndex: "0",
        currentNoticeIndex: "0",
        showNotice: "gone",
        noticeList: [],
        surveyNo: null
    };
}

const {moduleData: moduleData$s, moduleEvent: moduleEvent$s} = moduleDefine("homePage", start$s, defaultData$s);

async function requestBannerInfo() {
    var params = {
        pageType: 50,
        showType: 9
    };
    let data = await sendRequest$2("v1/config/push/banner/list", params);
    console.log(`wp -- rrequestBannerInfo=${data}`);
    if (data && data != null && data.bannerAdvList != null || data.bannerAdvList.length > 0) {
        console.log(`wp -- rrequestBannerInfo=${data.bannerAdvList.length}`);
        for (let i = 0; i < data.bannerAdvList.length; ++i) {
            let v = data.bannerAdvList[i];
            v.index = i;
            v.type = "1";
            v.currentImageURL = commonData.colorMode === 1 ? v.nightImageUrl : v.imageUrl;
        }
        moduleData$s.bannerAndroidStrokeVisibility = commonData.OS == 1 ? "visible" : "gone";
        bannerDataList = data.bannerAdvList;
        var length = bannerDataList.length <= parseInt(moduleData$s.currentIndex) ? "0" : parseInt(moduleData$s.currentIndex);
        moduleData$s.bannerList = bannerDataList;
        moduleData$s.currentIndex = String(length);
        moduleData$s.totalPage = String(bannerDataList.length);
        moduleData$s.bannerVisibility = "visible";
        moduleData$s.bannerTextVisibility = bannerDataList.length > 1 ? "visible" : "gone";
        moduleData$s.bannerPlaceholerVisibility = bannerDataList.length > 0 ? "gone" : "visible";
    }
}

async function requestMaintenanceInfo() {
    let data = await sendRequest$2("heartbeat/", {}, 0, 8);
    console.log(`wp -- requestMaintenanceInfo 2 respData=${data}`);
    if (data && data != null && data.linear_swap_heartbeat != null && data.linear_swap_heartbeat == 0) {
        var recoveryTime = new Date(data.linear_swap_estimated_recovery_time).Format("yyyy-MM-dd hh:mm:ss");
        moduleData$s.recoveryTimeTip = $i18n.$intercept.n_linear_swap_u_maintenance_recovery_time_tips(recoveryTime);
        moduleData$s.maintenanceShow = "true";
        await analytics$1("pageview_copytrading", {
            business_category: "copytrading_app_home_service_suspension_notice"
        });
        console.log(`wp -- requestMaintenanceInfo 3`);
    }
}

async function requestUserIsHit() {
    var respData = await sendRequest$2("v1/copytrading/uni-account/get");
    if (respData != null && !parseBoolean(respData)) {
        console.log(`wp -- requestUserIsHit respData=${respData}`);
        console.log("wp -- requestUserIsHit - 1");
        moduleData$s.unifiedAccountShow = "true";
        await analytics$1("pageview_copytrading", {
            business_category: "copytrading_app_home_nonunified_account"
        });
        console.log("wp -- requestUserIsHit - 2");
    }
}

async function requestBanner() {
    var params = {
        pageType: 59,
        showType: 9
    };
    let responseData = await sendRequest$2("v1/config/push/banner/list", params);
    console.log(`wp -- requestBanner=${JSON.stringify(responseData)}`);
    if (responseData && responseData != null && responseData.bannerAdvList != null && responseData.bannerAdvList.length > 0) {
        console.log(`wp -- rrequestBannerInfo=${responseData.bannerAdvList.length}`);
        var dataList = [];
        var i = 0;
        for (let item of responseData.bannerAdvList) {
            console.log("requestNoticeList advId:" + item["advId"] + " has：" + exposuredSet.has(item["advId"]));
            item.index = i++;
            item.type = "1";
            dataList.push(item);
        }
        moduleData$s.noticeList = dataList;
        console.log(`wp -- bannerAdvList=${JSON.stringify(dataList)}`);
        moduleData$s.showNotice = dataList.length > 0 ? "visible" : "gone";
        noticeExposure();
    } else {
        moduleData$s.showNotice = "gone";
    }
}

async function requestViolatedReminder() {
    var data = await sendRequest$2("v1/copytrading/isBlackTraderPopup");
    if (data == 1) {
        moduleData$s.violatedReminder = true;
        await analytics$1("pageview_copytrading", {
            business_category: "copytrading_app_home_trader_guidance"
        });
    }
}

moduleEvent$s.clickedViolatedReminderDone = async function() {
    moduleData$s.violatedReminder = false;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_trader_guidance",
        button_name: "confirm"
    });
};

async function requestExpGold() {
    await requestCoupon();
    if ($data.couponPop.coupons.length > 0) {
        moduleData$s.expGoldShow = true;
        await analytics$1("pageview_copytrading", {
            business_category: "copytrading_app_home_fund"
        });
    }
}

async function expGoldDismiss() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_fund",
        button_name: "cancel"
    });
    moduleData$s.expGoldShow = false;
}

async function clickedExpGoldToUse() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_fund",
        button_name: "confirm"
    });
    moduleData$s.expGoldShow = false;
    popUpContentOfCoupon(0);
}

function clickedExpGoldCancel() {
    moduleData$s.expGoldShow = false;
}

moduleEvent$s.selectedNoticeIndex = async function(index) {
    console.log(`selectedNoticeIndex index =${index}`);
    moduleData$s.currentNoticeIndex = String(index);
    await noticeExposure();
};

moduleEvent$s.clickNoticeItem = async function() {
    var index = parseInt(moduleData$s.currentNoticeIndex);
    console.log(`clickNoticeItem index =${index}`);
    if (index >= moduleData$s.noticeList.length) {
        return;
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: "home_banner"
    });
    var obj = moduleData$s.noticeList[index];
    console.log(`clickNoticeItem index =${JSON.stringify(obj)}`);
    if (obj.jumpTo != null) {
        console.log("clickNotice" + obj.jumpTo);
        await openURL(encodeURI(obj.jumpTo));
    }
};

async function requestQuestionnaire() {
    var data = await sendRequest$2("v1/copytrading/survey/get");
    if (data != null && data > 0) {
        moduleData$s.surveyNo = data;
        $data.homePage.questionnaireShow = true;
        await analytics$1("pageview_copytrading", {
            business_category: "copytrading_app_home_questionnaire"
        });
    }
}

async function updateQuestionnaireState(buttonType) {
    if (moduleData$s.surveyNo != null) {
        var params = {
            surveyNo: moduleData$s.surveyNo,
            type: buttonType
        };
        await sendRequest$2("v1/copytrading/survey/trigger", params, 1, 0, {
            "Content-Type": "application/json"
        });
        console.log(`tl -- 上报问卷调查操作，buttonType==${buttonType}`);
    }
}

moduleEvent$s.clickedQuestionnaireCancel = async function() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_questionnaire",
        button_name: "cancel"
    });
    moduleData$s.questionnaireShow = false;
    await updateQuestionnaireState(2);
};

moduleEvent$s.clickedQuestionnaireEntry = async function() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_questionnaire",
        button_name: "confirm"
    });
    let url = `${commonData.webUrl}/${commonData.language}/survey?hideMainBtn=1&id=${moduleData$s.surveyNo}`;
    console.log(`tl -- 问卷调查地址==${url}`);
    openURL(url);
    moduleData$s.questionnaireShow = false;
    await updateQuestionnaireState(1);
};

async function noticeExposure() {}

moduleEvent$s.bannerClickBanner = async function() {
    var index = parseInt(moduleData$s.bannerCurrentIndex) - 1;
    if (index >= bannerDataList.length) {
        return;
    }
    var obj = bannerDataList[index];
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: "banner",
        button_location: index,
        bannerID: String(obj["advId"])
    });
    openURL(obj.jumpTo);
    console.log("wp----bannerClickBanner" + index);
};

moduleEvent$s.selectedBannerIndex = async function(index) {
    moduleData$s.bannerCurrentIndex = String(index + 1);
};

function startScroll() {
    if (moduleDidStart == false) {
        return;
    }
    moduleData$s.autoScroll = "true";
}

function endScroll() {
    if (moduleDidStart == false) {
        return;
    }
    moduleData$s.autoScroll = "false";
}

async function onContactService() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_nonunified_account",
        button_name: "confirm"
    });
    moduleData$s.unifiedAccountShow = "false";
    let url = `https://www.huobi.com/baymaxchat/#/h5/?sceneCode=1&lang=${commonData.language}`;
    openURL(url);
}

async function unifiedAccountPopDismiss() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_nonunified_account",
        button_name: "cancel"
    });
    moduleData$s.unifiedAccountShow = "false";
}

async function maintenancePopDismiss() {
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home_service_suspension_notice",
        button_name: "confirm"
    });
    moduleData$s.maintenanceShow = "false";
    $nativeAPI.containerBack();
}

function childAccountPopDismiss() {
    moduleData$s.childAccountShow = "false";
}

async function onAppear$b() {
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_home",
        time: (new Date).Format("yyyy-MM-dd hh:mm:ss")
    });
}

moduleEvent$s.clickedTraderReviewCancel = function() {
    $data.homePage.trader_reviewShow = false;
    const currentTime = Date.now();
    save("copyTrading", "trader_review_show_time", currentTime);
};

moduleEvent$s.clickedTraderReviewStart = async function() {
    $data.homePage.trader_reviewShow = false;
    $data.sharingRatio.popShow = true;
    $data.homePage.sharingPopShow = true;
    console.log(`sharingRatio-homepage-clickedTraderReviewStart`);
    const currentTime = Date.now();
    save("copyTrading", "trader_review_show_time", currentTime);
};

function isSameDay(date1, date2) {
    return new Date(Number(date1)).toDateString() === new Date(date2).toDateString();
}

moduleEvent$s.onContactService = onContactService;

moduleEvent$s.unifiedAccountPopDismiss = unifiedAccountPopDismiss;

moduleEvent$s.maintenancePopDismiss = maintenancePopDismiss;

moduleEvent$s.childAccountPopDismiss = childAccountPopDismiss;

moduleEvent$s.onAppear = onAppear$b;

moduleEvent$s.requestExpGold = requestExpGold;

moduleEvent$s.expGoldDismiss = expGoldDismiss;

moduleEvent$s.clickedExpGoldToUse = clickedExpGoldToUse;

moduleEvent$s.clickedExpGoldCancel = clickedExpGoldCancel;

var clickItemRecord$1 = {};

var pageNo$3 = 1;

var dataIndex$2 = 0;

async function start$r() {
    getFollowOrders(false);
}

function defaultData$r() {
    return {
        emptyVisible: "gone",
        listVisible: "invisible",
        list: [],
        refreshStatus: 0,
        loadMoreStatus: 0
    };
}

const {moduleData: moduleData$r, moduleEvent: moduleEvent$r} = moduleDefine("followOrders", start$r, defaultData$r);

function setListVisible$7(visible) {
    if (true == visible) {
        moduleData$r.emptyVisible = "gone";
        moduleData$r.listVisible = "visible";
    } else {
        moduleData$r.emptyVisible = "visible";
        moduleData$r.listVisible = "invisible";
    }
}

var isRequest$7 = false;

async function getFollowOrders(isMore) {
    if (isRequest$7) {
        return;
    }
    isRequest$7 = true;
    if (!isMore) {
        pageNo$3 = 1;
    } else {
        pageNo$3 += 1;
    }
    const userSign = commonData.userSign;
    const pageSize = 20;
    const orderList = await sendRequest$2("v1/copytrading/follower/open-unmatch-orders", {
        userSign: userSign,
        pageNo: pageNo$3,
        pageSize: pageSize
    });
    isRequest$7 = false;
    if (!orderList || orderList == null || orderList.orders == null || orderList.orders.length == 0) {
        if (pageNo$3 == 1) {
            moduleData$r.refreshStatus = "2";
            setListVisible$7(false);
            moduleData$r.list = [];
            moduleData$r.currentOrderCount = `${$i18n.n_copy_trading_now_follower}(0)`;
        } else {
            pageNo$3 -= 1;
            moduleData$r.loadMoreStatus = "2";
        }
        return;
    }
    if (pageNo$3 == 1) {
        moduleData$r.refreshStatus = "2";
    } else {
        moduleData$r.loadMoreStatus = "2";
    }
    setListVisible$7(true);
    const {totalSize: totalSize, orders: orders} = orderList;
    moduleData$r.orders = orders;
    handleData$7(orders, true);
    moduleData$r.currentOrderCount = `${$i18n.n_copy_trading_now_follower}(${totalSize})`;
}

function handleData$7(orders, reIndex) {
    for (let i = 0; i < orders.length; ++i) {
        let v = orders[i];
        if (reIndex) {
            v.index = dataIndex$2;
            dataIndex$2++;
        }
        let {coin: coin, unit: unit} = coinUnit(v.symbol);
        if (v.direction == "long") {
            v.directionLabel = $i18n.n_contract_position_buy_label;
            v.directionColor = getUpDownColor();
            v.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            v.directionLabel = $i18n.n_contract_position_sell_label;
            v.directionColor = getUpDownColor(false);
            v.directionDesc = $i18n.n_contract_trade_open_low;
        }
        if (parseFloat(v.openProfit) >= 0) {
            v.openProfitColor = getUpDownColor();
            v.openProfit = `+${v.openProfit}`;
        } else if (isNaN(parseFloat(v.openProfit))) {
            v.openProfitColor = "@color/kColorSecondaryText";
            v.openProfit = "--";
        } else {
            v.openProfitColor = getUpDownColor(false);
        }
        if (typeof v.openProfitRate === "string" && !isNaN(parseFloat(v.openProfitRate))) {
            const openProfitRate = formatPrecision(multiply(v.openProfitRate, "100"), 2);
            v.openProfitRateStr = `${parseFloat(openProfitRate) >= 0 ? "+" : ""}${openProfitRate}%`;
        } else {
            v.openProfitRateStr = "--";
        }
        v.symbolDesc = symbolDesc(v.symbol);
        var positionModel = $i18n.n_copy_trading_isolated;
        if (v.positionModel == 2) {
            positionModel = $i18n.n_contract_super_margin;
        } else if (v.positionModel == 3) {
            positionModel = $i18n.n_contract_trade_margin;
        }
        v.modeTypeName = positionModel;
        v.leverDesc = `${v.lever}X`;
        v.orderId = v.orderIdShow;
        v.openPriceTitle = `${$i18n.n_contract_avg_position_price}(${unit})`;
        v.openAmountTitle = `${$i18n.n_option_market_list_setting_position_volume}(${coin})`;
        v.bondAmountTitle = `${$i18n.$intercept.n_contarct_position_original_margin("USDT")}`;
        v.newestPriceTitle = `${$i18n.n_market_price_sort_text}(${"USDT"})`;
        v.bondAmountStr = formatPrecision(v.bondAmount, 4);
        let currentContractInfo = getModelByContractShortType(v.symbol);
        let precision = getContractSizePrecision(currentContractInfo);
        let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
        v.openPriceStr = formatPrecision(v.openPrice, priceTickPrecision);
        try {
            let data = commonData.linearSwapWsData[v.symbol];
            let usePrice = "0";
            if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                usePrice = v.openPrice;
                v.newestPriceStr = "--";
            } else {
                usePrice = data.price;
                v.newestPriceStr = data.price;
            }
            v.openAmountVolume = getVolume(v.openAmount, usePrice, precision, UnitType.unitTypeSymbol);
            let profit = formatPrecision(parseFloat(v.openProfit), 4);
            if (parseFloat(profit) >= 0) {
                v.openProfitColor = getUpDownColor();
                v.openProfitStr = `+${profit}`;
            } else if (isNaN(parseFloat(profit))) {
                v.openProfitColor = "@color/kColorSecondaryText";
                v.openProfitStr = "--";
            } else {
                v.openProfitColor = getUpDownColor(false);
                v.openProfitStr = profit;
            }
            let profitRate = formatPrecision(multiply(v.openProfitRate, "100"), 2);
            if (profitRate != "") {
                v.openProfitRateStr = `${parseFloat(profitRate) >= 0 ? "+" : ""}${profitRate}%`;
            } else {
                v.openProfitRateStr = "--";
            }
        } catch (e) {
            console.log(`followOrders orderItem--e = ${e}`);
        }
        v.stopProfitPriceTitle = `${$i18n.n_grid_trade_zhiying}(${unit})`;
        v.stopLossPriceTitle = `${$i18n.n_grid_trade_zhisun}(${unit})`;
        v.openFeeTitle = `${$i18n.n_copy_trading_open_fee}(${unit})`;
        v.traderTitle = $i18n.n_copy_trading_trader;
        let feePrecision = getFeeAmountPrecision(currentContractInfo);
        v.openFeeStr = formatPrecision(v.openFee, feePrecision);
        v.stopProfitPrice = parseZero$1(v.stopProfitPrice, priceTickPrecision);
        v.stopLossPrice = parseZero$1(v.stopLossPrice, priceTickPrecision);
        v.stopProfitPopVisible = v.positionModel == 1 ? "visible" : "gone";
        v.explosionPriceTitle = v.positionModel == 1 ? `${$i18n.n_copy_trading_estimate_storehouse_price}(${unit})` : `${$i18n.n_balance_contract_prediction_of_strong_parity}(${unit})`;
        v.explosionPriceVisible = v.positionModel == 1 ? "gone" : "visible";
        v.explosionPrice = parseZero$1(v.explosionPrice, priceTickPrecision);
        if (v.status == 3) {
            v.stopProfitColor = "@color/eBaseColorThreeLevelText";
            v.stopLossBtn = $i18n.n_copy_trading_closing_position;
            v.tradeLimitEnable = false;
        } else {
            v.stopProfitColor = "@color/kColorPrimaryText";
            v.stopLossBtn = $i18n.n_contract_trade_position_close;
            v.tradeLimitEnable = true;
        }
        if (clickItemRecord$1[v.orderIdShow]) {
            v.orderIdVisible = clickItemRecord$1[v.orderIdShow];
        } else {
            v.orderIdVisible = "gone";
        }
        v.openTimeDesc = $i18n.n_copy_trading_open_time + ": " + new Date(v.openTime).Format("yyyy-MM-dd hh:mm:ss");
        v.type = "normal";
        v.orderIdDesc = `${$i18n.n_copy_trading_order_no}: ${v.orderIdShow}`;
        if (v.tpslRiskRate) {
            v.tpslRiskRateDesc = multiply(v.tpslRiskRate, 100);
        }
        if (pageNo$3 > 1) {
            moduleData$r.list.push(v);
        }
    }
    if (pageNo$3 == 1) {
        moduleData$r.list = orders;
    }
}

moduleEvent$r.onTradeClose = function(index) {
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "current_trades_close"
    });
    if (index >= moduleData$r.list.length) {
        return;
    }
    let item = moduleData$r.list[index];
    if (item.tradeLimitEnable && $data.tradeClose.followerTradeClosePopShow !== "true") {
        $data.tradeClose.followerTradeClosePopShow = "true";
        show$1(item.rawObject());
    }
};

function parseZero$1(price, precision = 4) {
    if (null == price || price == "--") {
        return "--";
    }
    if (parseFloat(price) == 0) {
        return "--";
    }
    return formatPrecision(price, precision);
}

moduleEvent$r.onAppear = async function() {
    dataIndex$2 = 0;
    getFollowOrders(false);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "current_trades"
    });
};

async function onRefresh$2() {
    dataIndex$2 = 0;
    await getFollowOrders(false);
}

async function onLoadMore$7() {
    await getFollowOrders(true);
}

moduleEvent$r.showStopProfitAlert = function(index) {
    if (index >= moduleData$r.list.length) {
        return;
    }
    let item = moduleData$r.list[index];
    if ($data.stopProfitAlertPop.stopProfitPopShow !== "true") {
        $data.stopProfitAlertPop.stopProfitPopShow = "true";
        show(item);
    }
};

moduleEvent$r.copyOrderId = async function(orderId) {
    try {
        await $nativeAPI.clipBoard(JSON.stringify({
            label: "",
            content: orderId,
            toast: $i18n.n_replicated
        }));
    } catch (error) {
        console.log(`copy clipboard error:${error}`);
    }
};

moduleEvent$r.clickedItem = function(index) {
    if (index >= moduleData$r.list.length) {
        return;
    }
    let item = moduleData$r.list[index];
    console.log(`订单点击 at:${index} 数据：${JSON.stringify(item)}`);
    item.orderIdVisible = item.orderIdVisible == "visible" ? "gone" : "visible";
    clickItemRecord$1[item.orderIdShow] = item.orderIdVisible;
};

moduleEvent$r.gotoTrade = async function() {
    analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "current_trades_follow"
    });
    let url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    openURL(url);
};

moduleEvent$r.share = async function(index) {
    analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "current_trades_share"
    });
    if (index >= moduleData$r.list.length) {
        return;
    }
    let item = moduleData$r.list[index];
    moduleData$r.symbol = item.symbolDesc;
    moduleData$r.leverDesc = item.leverDesc;
    if (item.direction == "long") {
        moduleData$r.directionColor = getUpDownColor();
        moduleData$r.directionDesc = $i18n.n_exchange_buy_in;
    } else {
        moduleData$r.directionColor = getUpDownColor(false);
        moduleData$r.directionDesc = $i18n.n_exchange_sell_out;
    }
    let profitColor = getUpDownColor();
    let profitRate = parseFloat(item.openProfitRate);
    if (profitRate >= 0) {
        profitColor = getUpDownColor();
        moduleData$r.profitRateStr = `+${format(profitRate * 100, 2)}%`;
    } else {
        profitColor = getUpDownColor(false);
        moduleData$r.profitRateStr = `${format(profitRate * 100, 2)}%`;
    }
    moduleData$r.profitColor = profitColor;
    moduleData$r.profitRateTitle = `${$i18n.n_copy_trading_yield}(${$i18n.n_copy_trading_position})`;
    moduleData$r.openPriceTitle = item.openPriceTitle;
    moduleData$r.openPriceStr = item.openPriceStr;
    moduleData$r.newestPriceTitle = item.newestPriceTitle;
    moduleData$r.newestPriceStr = item.newestPriceStr;
    moduleData$r.time = (new Date).Format("MM/dd/yyyy hh:mm");
    $nativeAPI.shareAbility({
        type: "renderSync",
        template: "follower_order_share",
        waitTime: 2,
        jumpUrl: ""
    });
};

moduleEvent$r.toTraderDetail = function(userSign) {
    if (userSign != null) {
        openURL(`holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${userSign}`);
    }
};

moduleEvent$r.onRefresh = onRefresh$2;

moduleEvent$r.onLoadMore = onLoadMore$7;

var pageNo$2 = 1;

var dataIndex$1 = 0;

async function start$q() {
    getHistoryOrders(false);
}

function defaultData$q() {
    return {
        emptyVisible: "gone",
        listVisible: "invisible",
        list: [],
        fokFailedReasonShow: false,
        refreshStatus: 0,
        loadMoreStatus: 0
    };
}

const {moduleData: moduleData$q, moduleEvent: moduleEvent$q} = moduleDefine("historyFollowOrders", start$q, defaultData$q);

var isRequest$6 = false;

async function getHistoryOrders(isMore) {
    if (isRequest$6) {
        return;
    }
    isRequest$6 = true;
    if (!isMore) {
        pageNo$2 = 1;
    } else {
        pageNo$2 += 1;
    }
    const userSign = commonData.userSign;
    const pageSize = 20;
    const orderList = await sendRequest$2("v1/copytrading/follower/open-matched-orders", {
        userSign: userSign,
        pageNo: pageNo$2,
        pageSize: pageSize
    });
    isRequest$6 = false;
    if (!orderList || orderList == null || orderList.orders == null || orderList.orders.length == 0) {
        if (pageNo$2 == 1) {
            moduleData$q.refreshStatus = "2";
            setListVisible$6(false);
            moduleData$q.list = [];
        } else {
            pageNo$2 -= 1;
            moduleData$q.loadMoreStatus = "2";
        }
        return;
    }
    if (pageNo$2 == 1) {
        moduleData$q.refreshStatus = "2";
    } else {
        moduleData$q.loadMoreStatus = "2";
    }
    setListVisible$6(true);
    const {totalSize: totalSize, orders: orders} = orderList;
    moduleData$q.orders = orders;
    handleData$6(orders, true);
}

function handleData$6(orders, reIndex) {
    moduleData$q.list.length;
    for (let i = 0; i < orders.length; ++i) {
        let v = orders[i];
        v.type = "normal";
        let {coin: coin, unit: unit} = coinUnit(v.symbol);
        if (reIndex) {
            v.index = dataIndex$1;
            dataIndex$1++;
        }
        if (v.direction == "long") {
            v.directionLabel = $i18n.n_contract_position_buy_label;
            v.directionColor = getUpDownColor();
            v.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            v.directionLabel = $i18n.n_contract_position_sell_label;
            v.directionColor = getUpDownColor(false);
            v.directionDesc = $i18n.n_contract_trade_open_low;
        }
        v.statusMore = "gone";
        v.showProfit = "visible";
        if (v.status == 2) {
            v.statusDesc = $i18n.n_copy_trading_order_fail;
            v.statusDescColor = "#F95A50";
            v.statusMore = "visible";
            v.showProfit = "gone";
        } else if (v.status == 3) {
            v.statusDesc = $i18n.n_copy_trading_closing_position;
            v.statusDescColor = "@color/kColorSecondaryText";
        } else {
            v.statusDesc = $i18n.n_copy_trading_order_success;
            v.statusDescColor = "#00A171";
        }
        v.symbolDesc = symbolDesc(v.symbol);
        var positionString = $i18n.n_copy_trading_isolated;
        if (v.positionModel == 2) {
            positionString = $i18n.n_contract_super_margin;
        } else if (v.positionModel == 3) {
            positionString = $i18n.n_contract_trade_margin;
        }
        v.modeTypeName = positionString;
        v.leverDesc = `${v.lever}X`;
        v.orderId = v.orderIdShow;
        v.openPriceTitle = `${$i18n.n_contract_avg_position_price}(${unit})`;
        v.openAmountTitle = `${$i18n.n_option_market_list_setting_position_volume}(${coin})`;
        v.profitTitle = `${$i18n.n_copy_trading_profit}(${unit})`;
        let currentContractInfo = getModelByContractShortType(v.symbol);
        let precision = getContractSizePrecision(currentContractInfo);
        let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
        v.openPriceStr = formatPrecision(v.openPrice, priceTickPrecision);
        if (v.closePrice != "--") {
            v.closePriceStr = formatPrecision(v.closePrice, priceTickPrecision);
        } else {
            v.closePriceStr = "--";
        }
        v.openAmountVolume = formatPrecision(v.openAmount, precision);
        if (typeof v.profitRate === "string" && !isNaN(parseFloat(v.profitRate))) {
            const profitRate = formatPrecision(multiply(v.profitRate, "100"), 2);
            v.profitRateStr = `${parseFloat(profitRate) >= 0 ? "+" : ""}${profitRate}%`;
        } else {
            v.profitRateStr = "--";
        }
        if (parseFloat(v.profit) > 0) {
            v.profitStr = `+${v.profit}`;
        } else if (isNaN(parseFloat(v.profit))) {
            v.profitStr = "--";
        } else {
            v.profitStr = `${formatPrecision(v.profit, 4)}`;
        }
        v.profitDescColor = getColorByNumber$2(v.profit);
        v.profitDesc = `${v.profitStr}(${v.profitRateStr})`;
        v.closePriceTitle = `${$i18n.n_contract_share_history_position_close_price}(${unit})`;
        v.followTakesTitle = `${$i18n.n_copytrading_share_expenses}(${unit})`;
        v.followTakesColor = getColorByNumber$2(v.benefit);
        v.followTakes = `${v.benefit}`;
        v.followRate = `(${format(v.takeRate * 100, 2)}%)`;
        if (pageNo$2 > 1) {
            moduleData$q.list.push(v);
        }
    }
    if (pageNo$2 == 1) {
        moduleData$q.list = orders;
    }
}

function getColorByNumber$2(number) {
    let profit = parseFloat(number);
    if (isNaN(profit)) {
        return "@color/kColorSecondaryText";
    } else if (profit >= 0) {
        return getUpDownColor();
    } else {
        return getUpDownColor(false);
    }
}

function setListVisible$6(visible) {
    if (true == visible) {
        moduleData$q.emptyVisible = "gone";
        moduleData$q.listVisible = "visible";
    } else {
        moduleData$q.emptyVisible = "visible";
        moduleData$q.listVisible = "invisible";
    }
}

async function onRefresh$1() {
    dataIndex$1 = 0;
    await getHistoryOrders(false);
}

async function onLoadMore$6() {
    await getHistoryOrders(true);
}

moduleEvent$q.onAppear = async function() {
    dataIndex$1 = 0;
    getHistoryOrders(false);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "history_trades"
    });
};

moduleEvent$q.clickedItem = async function(index) {
    if (index >= moduleData$q.list.length) {
        return;
    }
    let item = moduleData$q.list[index];
    console.log(`订单点击 at:${index} orderId:${item.orderId} 数据：${JSON.stringify(item)}`);
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&navConfig=native&rootName=orderDetail&xml=orderDetail&isTrader=0&orderId=${item.id}`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "order_details"
    });
};

moduleEvent$q.showFokAlert = function(status, index) {
    if (status != 2) {
        return;
    }
    moduleData$q.fokFailedReasonShow = true;
    if (moduleData$q.list[index].failCode == 99998) {
        moduleData$q.fokReasonTips = $i18n.copytrading_order_status_fail_99998;
    } else if (moduleData$q.list[index].failCode == 99999) {
        moduleData$q.fokReasonTips = $i18n.copytrading_order_status_fail_99999;
    } else {
        moduleData$q.fokReasonTips = moduleData$q.list[index].failMsg;
    }
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "history_trades_assistance"
    });
};

moduleEvent$q.popDismiss = function() {
    moduleData$q.fokFailedReasonShow = false;
};

moduleEvent$q.gotoTrade = async function() {
    let url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    openURL(url);
};

moduleEvent$q.share = async function(index) {
    if (index >= moduleData$q.list.length) {
        return;
    }
    let item = moduleData$q.list[index];
    moduleData$q.symbol = item.symbolDesc;
    moduleData$q.leverDesc = item.leverDesc;
    if (item.direction == "long") {
        moduleData$q.directionColor = getUpDownColor();
        moduleData$q.directionDesc = $i18n.n_exchange_buy_in;
    } else {
        moduleData$q.directionColor = getUpDownColor(false);
        moduleData$q.directionDesc = $i18n.n_exchange_sell_out;
    }
    let profitColor = getUpDownColor();
    let profitRate = parseFloat(item.profitRate);
    if (profitRate >= 0) {
        profitColor = getUpDownColor();
        moduleData$q.profitRateStr = `+${format(profitRate * 100, 2)}%`;
    } else {
        profitColor = getUpDownColor(false);
        moduleData$q.profitRateStr = `${format(profitRate * 100, 2)}%`;
    }
    moduleData$q.profitColor = profitColor;
    moduleData$q.profitRateTitle = `${$i18n.n_copy_trading_yield}(${$i18n.n_copy_trading_closed_position})`;
    moduleData$q.openPriceTitle = item.openPriceTitle;
    moduleData$q.openPriceStr = item.openPriceStr;
    moduleData$q.closePriceTitle = item.closePriceTitle;
    moduleData$q.closePriceStr = item.closePriceStr;
    moduleData$q.time = (new Date).Format("MM/dd/yyyy hh:mm");
    $nativeAPI.shareAbility({
        type: "renderSync",
        template: "follower_historyorder_share",
        waitTime: 2,
        jumpUrl: ""
    });
};

moduleEvent$q.toTraderDetail = function(userSign) {
    if (userSign != null) {
        openURL(`holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${userSign}`);
    }
};

moduleEvent$q.onRefresh = onRefresh$1;

moduleEvent$q.onLoadMore = onLoadMore$6;

function defaultData$p() {
    return {
        emptyVisible: "visible",
        listVisible: "invisible",
        list: [],
        loadMoreStatus: 0
    };
}

const {moduleData: moduleData$p, moduleEvent: moduleEvent$p} = moduleDefine("profitSharing", start$p, defaultData$p);

async function start$p() {
    requestTraderInfo$2();
    requestTraderBenefitSummary();
    requestCopyAssets(false);
    let tipsText = $i18n.n_copytrading_current_share_tips;
    let clickText = $i18n.n_copytrading_current_share_rules;
    let newTipsText = tipsText.replace(clickText, `<a href="@event.profitSharing.jumpTips()">${clickText}</a>`);
    let color = commonData.colorMode ? "#E6E6E6" : "#000000";
    moduleData$p.tipsText = `<span style="color:${color};font-size:14px;">${newTipsText}</span>`;
    moduleData$p.cumulativeSharing = `${$i18n.n_copytrading_cumulative_sharing}(USDT)`;
    moduleData$p.periodSharing = `${$i18n.n_copytrading_period_sharing}(USDT)`;
    moduleData$p.currentShare = `${$i18n.n_copytrading_current_share}(USDT)`;
}

async function requestTraderInfo$2() {
    let data = await sendRequest$2("v1/copytrading/user-profit", null);
    if (data && data !== null && notNull(data.copyOrderNum)) {
        moduleData$p.totalNumber = `${data.copyOrderNum}`;
    }
    const traderInfo = await sendRequest$2("v1/copytrading/trader-info");
    if (!traderInfo || traderInfo == null) {
        return;
    }
    if (notNull(traderInfo.totalTake)) {
        moduleData$p.totalShare = formatPrecision(traderInfo.totalTake, getOtherPrecision());
    }
    if (notNull(traderInfo.todayTake)) {
        moduleData$p.todayShare = formatPrecision(traderInfo.todayTake, getOtherPrecision());
    }
    if (notNull(traderInfo.profitRate)) {
        moduleData$p.yield = formatPrecision(multiply(traderInfo.profitRate, 100), 2) + "%";
    }
    if (notNull(traderInfo.winRate)) {
        moduleData$p.winRate = formatPrecision(multiply(traderInfo.winRate, 100), 2) + "%";
    }
}

async function requestTraderBenefitSummary() {
    let traderInfo = await sendRequest$2("v1/copytrading/trader/benefit-summary", null);
    if (notNull(traderInfo.hisBenefit)) {
        moduleData$p.hisBenefit = formatPrecision(traderInfo.hisBenefit, 4);
    }
    if (notNull(traderInfo.lastBenefit)) {
        moduleData$p.lastBenefit = formatPrecision(traderInfo.lastBenefit, 4);
    }
    if (notNull(traderInfo.curBenefit)) {
        moduleData$p.curBenefit = formatPrecision(traderInfo.curBenefit, 4);
    }
}

var isRequest$5 = false;

async function requestCopyAssets(isMore) {
    if (isRequest$5) {
        return;
    }
    if (!isMore) {
        moduleData$p.pageNo = 1;
    } else {
        moduleData$p.pageNo += 1;
    }
    var params = {
        pageSize: 20,
        pageNo: moduleData$p.pageNo
    };
    isRequest$5 = true;
    const data = await sendRequest$2("/v1/copytrading/trader/copy-assets", params);
    isRequest$5 = false;
    try {
        if (!data || data == null || !data.takes || data.takes == null || data.takes == 0) {
            setListVisible$5(false);
            moduleData$p.list = [];
            return;
        }
        setListVisible$5(true);
        const {total: total, takes: takes} = data;
        moduleData$p.total = total;
        if (!isMore) {
            moduleData$p.list = [];
        } else {
            moduleData$p.loadMoreStatus = "2";
        }
        handleData$5(takes);
    } catch (e) {
        console.log(`handle takes data error=${e}`);
    }
}

function handleData$5(takes) {
    for (let i = 0; i < takes.length; ++i) {
        let v = takes[i];
        v.index = moduleData$p.list.length;
        console.log(`wp handleData index=${v.index}`);
        v.type = "normal";
        v.takeAmountDes = formatPrecision(v.takeAmount, getOtherPrecision());
        moduleData$p.list.push(v);
    }
}

function setListVisible$5(visible) {
    if (true == visible) {
        moduleData$p.emptyVisible = "gone";
        moduleData$p.listVisible = "visible";
    } else {
        moduleData$p.emptyVisible = "visible";
        moduleData$p.listVisible = "invisible";
    }
}

async function onLoadMore$5() {
    if (moduleData$p.total > moduleData$p.list.length) {
        requestCopyAssets(true);
    } else {
        moduleData$p.loadMoreStatus = "2";
    }
}

async function onAppear$a() {
    requestTraderInfo$2();
    requestTraderBenefitSummary();
    requestCopyAssets(false);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_me",
        button_name: "current_trades"
    });
}

async function currentShareTips() {
    moduleData$p.currentShareShow = true;
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_me",
        button_name: "est_current_profit_share_assistance"
    });
}

function currentSharePopDismiss() {
    moduleData$p.currentShareShow = false;
}

function jumpTips() {
    moduleData$p.currentShareShow = false;
    openURL(`${commonData.webUrl}/support/${commonData.language}/detail/34969721539357`);
}

moduleEvent$p.onLoadMore = onLoadMore$5;

moduleEvent$p.onAppear = onAppear$a;

moduleEvent$p.currentShareTips = currentShareTips;

moduleEvent$p.currentSharePopDismiss = currentSharePopDismiss;

moduleEvent$p.jumpTips = jumpTips;

var FilterType = {
    filterTypeDown: 1,
    filterTypeUp: 2
};

function defaultData$o() {
    return {
        emptyVisible: "visible",
        listVisible: "invisible",
        list: [],
        sort: FilterType.filterTypeDown,
        pageNo: 1,
        followers: [],
        filterImg: "@drawable/edge_engine_filter_down",
        loadMoreStatus: 0
    };
}

const {moduleData: moduleData$o, moduleEvent: moduleEvent$o} = moduleDefine("myFollower", start$o, defaultData$o);

let isStarted$2 = false;

async function start$o() {
    if (isStarted$2) {
        return;
    }
    isStarted$2 = true;
    requestOrder$2(false);
}

var isRequest$4 = false;

async function requestOrder$2(isMore) {
    if (isRequest$4) {
        return;
    }
    if (!isMore) {
        moduleData$o.pageNo = 1;
    } else {
        moduleData$o.pageNo += 1;
    }
    var params = {
        sort: moduleData$o.sort,
        pageSize: 20,
        pageNo: moduleData$o.pageNo
    };
    isRequest$4 = true;
    const data = await sendRequest$2("v1/copytrading/trader/my-followers", params);
    isRequest$4 = false;
    try {
        if (!data || data == null || !data.followers || data.followers == null || data.followers == 0) {
            setListVisible$4(false);
            moduleData$o.list = [];
            return;
        }
        setListVisible$4(true);
        const {total: total, followers: followers} = data;
        moduleData$o.total = total;
        if (!isMore) {
            moduleData$o.list = [];
        } else {
            moduleData$o.loadMoreStatus = "2";
        }
        handleData$4(followers);
    } catch (e) {
        console.log(`handle order data error=${e}`);
    }
}

function handleData$4(followers) {
    for (let i = 0; i < followers.length; ++i) {
        let v = followers[i];
        v.index = i;
        v.type = "normal";
        if (v.lastCopySuccessTime > 0) {
            v.lastCopyTime = new Date(v.lastCopySuccessTime).Format("yyyy-MM-dd hh:mm:ss");
        } else {
            v.lastCopyTime = "--";
        }
        let currentContractInfo = getModelByContractShortType(v.symbol);
        v.totalTakeDes = formatPrecision(v.totalTake, getOtherPrecision(currentContractInfo));
        moduleData$o.list.push(v);
    }
}

function setListVisible$4(visible) {
    if (true == visible) {
        moduleData$o.emptyVisible = "gone";
        moduleData$o.listVisible = "visible";
    } else {
        moduleData$o.emptyVisible = "visible";
        moduleData$o.listVisible = "invisible";
    }
}

function onFilterChange() {
    moduleData$o.sort = moduleData$o.sort === FilterType.filterTypeDown ? FilterType.filterTypeUp : FilterType.filterTypeDown;
    if (moduleData$o.sort === FilterType.filterTypeDown) {
        moduleData$o.filterImg = "@drawable/edge_engine_filter_down";
    } else {
        moduleData$o.filterImg = "@drawable/edge_engine_filter_up";
    }
    requestOrder$2(false);
}

async function onRemove(index) {
    if (index >= moduleData$o.list.length) {
        return;
    }
    if (isRequest$4) {
        return;
    }
    showLoading(true);
    let follower = moduleData$o.list[index];
    var params = {
        userSign: follower.userSign
    };
    isRequest$4 = true;
    const copyCode = await sendRequestReturnCode("v1/copytrading/trader/fire-follower", params);
    isRequest$4 = false;
    showLoading(false);
    if (copyCode == 200) {
        showToast($i18n.n_copy_trading_remove_succ);
        requestOrder$2(false);
        getTraderInfo();
    } else if (copyCode == 80441) {
        showToast($i18n.n_copy_trading_position_remove_fail);
    } else if (copyCode == 80442) {
        showToast($i18n.n_copy_trading_remove_fail);
    }
}

async function onLoadMore$4() {
    if (moduleData$o.total > moduleData$o.list.length) {
        requestOrder$2(true);
    } else {
        moduleData$o.loadMoreStatus = "2";
    }
}

async function onAppear$9() {
    requestOrder$2(false);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_me",
        button_name: "current_trades"
    });
}

moduleEvent$o.onFilterChange = onFilterChange;

moduleEvent$o.onRemove = onRemove;

moduleEvent$o.onLoadMore = onLoadMore$4;

moduleEvent$o.onAppear = onAppear$9;

async function start$n() {
    console.log(`income-start`);
    requestTraderProfitData();
    requestTraderProfitDetail();
}

function defaultData$n() {
    return {
        totalRevenue: "--",
        todayEarnings: "--",
        historicalReturn: "--",
        totalRevenueTitle: $i18n.$intercept.n_grid_strategy_profit("USDT"),
        todayEarningsTitle: $i18n.n_today_profit + "(USDT)",
        listVisible: "visible",
        orderList: [],
        loadMoreStatus: 0,
        pageNo: 1,
        totalProfitShow: false
    };
}

const {moduleData: moduleData$n, moduleEvent: moduleEvent$n} = moduleDefine("income", start$n, defaultData$n);

async function requestTraderProfitData() {
    let data = await sendRequest$2("v1/copytrading/user-profit", null);
    if (data != null) {
        commonData.userSign = data.userSign;
        moduleData$n.totalRevenue = formatPrecision(data.totalProfit, 4);
        moduleData$n.todayEarnings = formatPrecision(data.todayProfit, 4);
        moduleData$n.historicalReturn = formatPrecision(data.totalProfit - data.todayProfit, 4);
    }
}

async function requestTraderProfitDetail() {
    moduleData$n.pageNo = 1;
    var params = {
        userSign: commonData.userSign,
        pageNo: moduleData$n.pageNo,
        pageSize: 20
    };
    let data = await sendRequest$2("v1/copytrading/follower/profit-detail-list", params);
    try {
        if (data) {
            const {dataList: dataList} = data;
            if (dataList.length > 0) {
                let orderList = [];
                for (let i = 0; i < dataList.length; ++i) {
                    let profit = dataList[i];
                    orderList.push({
                        income: formatPrecision(profit.orderProfit, 4),
                        time: new Date(profit.orderTime).Format("MM-dd hh:mm:ss"),
                        type: "1"
                    });
                }
                moduleData$n.orderList = orderList;
                moduleData$n.listVisible = "visible";
                moduleData$n.emptyVisible = "gone";
            } else {
                moduleData$n.listVisible = "gone";
                moduleData$n.emptyVisible = "visible";
            }
        }
    } catch (e) {
        moduleData$n.listVisible = "gone";
        moduleData$n.emptyVisible = "visible";
    }
}

async function onAppear$8() {
    requestTraderProfitData();
    requestTraderProfitDetail();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "my_pnl"
    });
}

async function loadMoreTraderProfitDetail() {
    var params = {
        userSign: commonData.userSign,
        pageNo: moduleData$n.pageNo + 1,
        pageSize: 20
    };
    let data = await sendRequest$2("v1/copytrading/follower/profit-detail-list", params);
    try {
        if (data) {
            const {dataList: dataList} = data;
            if (dataList.length > 0) {
                for (let i = 0; i < dataList.length; ++i) {
                    let profit = dataList[i];
                    moduleData$n.orderList.push({
                        income: formatPrecision(profit.orderProfit, 4),
                        time: new Date(profit.orderTime).Format("MM-dd hh:mm:ss"),
                        type: "1"
                    });
                }
                moduleData$n.pageNo = moduleData$n.pageNo + 1;
                moduleData$n.listVisible = "visible";
                moduleData$n.emptyVisible = "gone";
            }
        }
        moduleData$n.loadMoreStatus = 2;
    } catch (e) {
        moduleData$n.loadMoreStatus = 2;
    }
}

async function totalProfitDismiss() {
    moduleData$n.totalProfitShow = false;
}

async function totalProfitShow() {
    moduleData$n.totalProfitShow = true;
}

async function gotoCopyTrading() {
    let url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    openURL(url);
}

moduleEvent$n.onLoadMore = loadMoreTraderProfitDetail;

moduleEvent$n.onAppear = onAppear$8;

moduleEvent$n.totalProfitDismiss = totalProfitDismiss;

moduleEvent$n.totalProfitShow = totalProfitShow;

moduleEvent$n.gotoCopyTrading = gotoCopyTrading;

async function start$m() {
    console.log(`myTrader-start`);
    requestMyTraders();
    requestMyHistroyTraders();
}

function defaultData$m() {
    return {
        listVisible: "visible",
        currentBg: "@color/kColorMajorTheme006",
        histroyBg: "#00000000",
        currentTextColor: "@color/kColorMajorTheme100",
        histroyTextColor: "@color/kColorSecondaryText",
        totalRevenueTitle: $i18n.$intercept.n_grid_strategy_profit("USDT"),
        todayEarningsTitle: $i18n.n_today_profit + "(USDT)",
        tabIndex: 0,
        currentList: [],
        histroyList: [],
        listData: [],
        showEmpty: "gone",
        cancelAlert: "false",
        userSign: "",
        loadMoreStatus: 0,
        pageNo: 1,
        cancelIndex: 0
    };
}

const {moduleData: moduleData$m, moduleEvent: moduleEvent$m} = moduleDefine("myTrader", start$m, defaultData$m);

let timerObject$1;

function startTimer$1() {
    clearTimer$1();
    if (null == timerObject$1) {
        timerObject$1 = setInterval(timerCallback$1, 2e3);
    }
}

function clearTimer$1() {
    if (timerObject$1 != null) {
        clearInterval(timerObject$1);
        timerObject$1 = null;
    }
}

async function timerCallback$1() {
    requestMyTraders();
    requestMyHistroyTraders();
    clearTimer$1();
}

async function onAppear$7() {
    requestMyTraders();
    requestMyHistroyTraders();
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "my_trader"
    });
}

async function cancelMyTrader() {
    let item = moduleData$m.currentList[moduleData$m.cancelIndex];
    var params = {
        userSign: item.userSign
    };
    showLoading(true);
    var respData = await sendRequest$2("v1/copytrading/follower/cancel-copy", params, 1, 0, {
        "Content-Type": "application/json"
    });
    showLoading(false);
    console.log(`cancelMyTrader is ${JSON.stringify(respData)}`);
    if (respData != null && respData.success == 1) {
        requestMyTraders();
        requestMyHistroyTraders();
        startTimer$1();
    } else {
        console.log("cancel copytrading fail");
    }
}

async function requestMyTraders() {
    var params = {
        userSign: commonData.userSign
    };
    let data = await sendRequest$2("v2/copytrading/follower/my-traders", params);
    console.log(`my-traders respData is ${JSON.stringify(data)}`);
    try {
        var startIndex = 0;
        if (data != null && data.traderList != null && data.traderList.length > 0) {
            for (var item of data.traderList) {
                item.type = "current";
                item.itemIndex = startIndex.toString();
                item.index = startIndex;
                startIndex++;
                let time = new Date(item.createAt).Format("yyyy-MM-dd hh:mm:ss");
                item.orderTime = time;
                item.todayProfit = formatPrecision(item.todayProfit, 4);
                item.historyProfit = formatPrecision(item.historyProfit, 4);
                var backColor = "@color/kColorMajorTheme100";
                var stopEnable = false;
                if (item.status == 3) {
                    backColor = "@color/eBaseColorThreeLevelText";
                    stopEnable = true;
                }
                item.backColor = backColor;
                item.stopEnable = stopEnable;
                let showlossLimitTips = item.lossLimitStatus == 2 ? "visible" : "gone";
                let isX = parseInt(item.copyCategory) == 2;
                let xOrLimitStr = "--";
                if (isX && item.copyRatio != null && item.copyRatio != "undefined") {
                    xOrLimitStr = `${parseFloat(item.copyRatio).toFixed(2)}`;
                } else if (!isX && item.openUnit != null && item.openUnit != "undefined") {
                    xOrLimitStr = `${parseInt(item.openUnit)}`;
                }
                let stopProfitRateStr = "--";
                if (item.stopProfitRate != null && item.stopProfitRate != "undefined" && parseFloat(item.stopProfitRate) > 0) {
                    stopProfitRateStr = `${(parseFloat(item.stopProfitRate) * 100).toFixed(2)}%`;
                }
                let stopLossRateStr = "--";
                if (item.stopLossRate != null && item.stopLossRate != "undefined" && parseFloat(item.stopLossRate) > 0) {
                    stopLossRateStr = `${(parseFloat(item.stopLossRate) * 100).toFixed(2)}%`;
                }
                item.showlossLimitTips = showlossLimitTips;
                item.xOrLimitTitle = isX ? $i18n.n_copy_trading_leversetting_mulriple : `${$i18n.n_copy_trading_fixed_margin}(USDT)`;
                item.xOrLimit = xOrLimitStr;
                item.marginLimitTitle = `${$i18n.n_copy_trading_margin_limit}(USDT)`;
                item.marginLimit = `${parseInt(item.marginLimit)}`;
                item.stopProfitRate = stopProfitRateStr;
                item.stopLossRate = stopLossRateStr;
            }
            moduleData$m.currentList = data.traderList;
            refreshMyTraderListWithTabIndex();
        } else {
            moduleData$m.currentList = [];
            refreshMyTraderListWithTabIndex();
        }
    } catch (e) {
        refreshMyTraderListWithTabIndex();
    }
}

async function requestMyHistroyTraders() {
    moduleData$m.pageNo = 1;
    var params = {
        userSign: commonData.userSign,
        pageNo: 1,
        pageSize: 10
    };
    let data = await sendRequest$2("v1/copytrading/follower/my-his-follow-trade", params);
    console.log(`respData is ${JSON.stringify(data)}`);
    try {
        if (data) {
            const {hisFollowTraderList: hisFollowTraderList} = data;
            if (hisFollowTraderList != null) {
                var startIndex = 0;
                for (var item of hisFollowTraderList) {
                    item.type = "histroy";
                    item.itemIndex = startIndex.toString();
                    startIndex++;
                    item.tradeAggUsdt = formatPrecision(item.tradeAggUsdt, 4);
                    item.profitUsdt = formatPrecision(item.profitUsdt, 4);
                }
            }
            moduleData$m.histroyList = hisFollowTraderList;
            refreshMyTraderListWithTabIndex();
        }
    } catch (e) {
        refreshMyTraderListWithTabIndex();
    }
}

async function loadMoreMyHistroyTraders() {
    if (moduleData$m.tabIndex == 0) {
        moduleData$m.loadMoreStatus = 2;
    } else {
        var params = {
            userSign: commonData.userSign,
            pageNo: moduleData$m.pageNo + 1,
            pageSize: 10
        };
        let data = await sendRequest$2("v1/copytrading/follower/my-his-follow-trade", params);
        console.log(`respData is ${JSON.stringify(data)}`);
        try {
            if (data) {
                const {hisFollowTraderList: hisFollowTraderList} = data;
                if (hisFollowTraderList != null && hisFollowTraderList.length > 0) {
                    moduleData$m.pageNo += 1;
                    var startIndex = 0;
                    for (var item of hisFollowTraderList) {
                        item.type = "histroy";
                        item.itemIndex = startIndex.toString();
                        startIndex++;
                        item.tradeAggUsdt = formatPrecision(item.tradeAggUsdt, 4);
                        item.profitUsdt = formatPrecision(item.profitUsdt, 4);
                        moduleData$m.histroyList.push(item);
                    }
                }
                refreshMyTraderListWithTabIndex();
                moduleData$m.loadMoreStatus = 2;
            }
        } catch (e) {
            refreshMyTraderListWithTabIndex();
            moduleData$m.loadMoreStatus = 2;
        }
    }
}

function refreshMyTraderListWithTabIndex() {
    if (moduleData$m.tabIndex == 0) {
        moduleData$m.listData = moduleData$m.currentList;
        moduleData$m.showEmpty = moduleData$m.currentList.length == 0 ? "visible" : "gone";
    } else {
        moduleData$m.listData = moduleData$m.histroyList;
        moduleData$m.showEmpty = moduleData$m.histroyList.length == 0 ? "visible" : "gone";
    }
}

async function tabSelect(index) {
    moduleData$m.tabIndex = index;
    resetSelectTab(index);
    refreshMyTraderListWithTabIndex();
    if (moduleData$m.tabIndex == 0) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "current_traders"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "history_traders"
        });
    }
}

async function cancel(index) {
    let item = moduleData$m.currentList[index];
    if (!item.stopEnable) {
        moduleData$m.cancelIndex = index;
        moduleData$m.cancelAlert = "true";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "unfollow"
    });
}

async function onTipClose$1() {
    moduleData$m.cancelAlert = "false";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "cancel"
    });
}

async function tipConfirm$1() {
    moduleData$m.cancelAlert = "false";
    cancelMyTrader();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "confirm"
    });
}

async function alertClose() {
    moduleData$m.cancelAlert = "false";
}

async function gotoTrade() {
    let url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    openURL(url);
}

async function resetSelectTab(index) {
    if (index == 0) {
        moduleData$m.currentBg = "@color/kColorMajorTheme006";
        moduleData$m.histroyBg = "#00000000";
        moduleData$m.currentTextColor = "@color/kColorMajorTheme100";
        moduleData$m.histroyTextColor = "@color/kColorSecondaryText";
    } else {
        moduleData$m.currentBg = "#00000000";
        moduleData$m.histroyBg = "@color/kColorMajorTheme006";
        moduleData$m.currentTextColor = "@color/kColorSecondaryText";
        moduleData$m.histroyTextColor = "@color/kColorMajorTheme100";
    }
}

moduleEvent$m.settingTapped = async function(index) {
    let item = moduleData$m.currentList[index];
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=copySetting&navConfig=full&userSign=${item.userSign}&imgUrl=${item.imgUrl}&isEdit=${true}`);
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "edit"
    });
};

moduleEvent$m.toTraderDetail = async function(userSign) {
    if (userSign != null) {
        openURL(`holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${userSign}`);
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_follower_me",
            button_name: "trader_details"
        });
    }
};

moduleEvent$m.resetSelectTab = resetSelectTab;

moduleEvent$m.tabSelect = tabSelect;

moduleEvent$m.cancel = cancel;

moduleEvent$m.onTipClose = onTipClose$1;

moduleEvent$m.tipConfirm = tipConfirm$1;

moduleEvent$m.gotoTrade = gotoTrade;

moduleEvent$m.onAppear = onAppear$7;

moduleEvent$m.onClose = alertClose;

moduleEvent$m.onLoadMore = loadMoreMyHistroyTraders;

var dataIndex = 0;

var supportSymbolList = [];

const Edit_Board_SelectColor$1 = "@color/kColorMajorTheme100";

const Edit_Board_NomalColor$1 = "@color/KBaseColorContentBackground";

const buttonTitleColor_Normal = "@color/kColorPrimaryText";

const buttonTitleColor_Selected = "@color/kColorMajorTheme100";

const buttonBackColor_Normal = "@color/KBaseColorInputBackground";

const buttonBackColor_Selected = "@color/kColorMajorTheme006";

var isCancelSearch$1 = false;

function defaultData$l() {
    return {
        statusBarConfig: {
            statusBarMode: "true",
            adStatusBarColor: "KBaseColorContentBackground"
        },
        textFilterSymbol: $i18n.n_margin_all_currency,
        iconFilterSymbol: "@drawable/edge_engine_arrow_down",
        textFilterCrossAndIsolated: $i18n.n_contract_super_margin,
        iconFilterCrossAndIsolated: "@drawable/edge_engine_arrow_down",
        textFilterMore: $i18n.n_order_filter_more,
        iconFilterMore: "@drawable/edge_engine_arrow_down",
        borderColor: Edit_Board_NomalColor$1,
        pageIndex: 1,
        modeType: 2,
        mixMoneyType: 0,
        refreshStatus: 0,
        loadMoreStatus: 0,
        emptyVisible: "gone",
        listVisible: "invisible",
        contractCode: "",
        accountAction: [],
        contractSymbolList: [],
        currencyListVisible: "invisible",
        currencyEmptyVisible: "gone",
        superMarginSelected: "visible",
        isolateMarginSelected: "gone",
        superMarginColor: buttonTitleColor_Selected,
        isolateMarginColor: buttonTitleColor_Normal,
        filterTypes: [ {
            tag: 0,
            title: $i18n.n_balance_all,
            titleColor: buttonTitleColor_Selected,
            backColor: buttonBackColor_Selected,
            type: "normal"
        }, {
            tag: 1,
            title: $i18n.n_exchange_order_detail_fee,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        }, {
            tag: 4,
            title: $i18n.n_balance_margin_transfer,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        }, {
            tag: 2,
            title: $i18n.n_copy_trading_realized_pnL,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        }, {
            tag: 6,
            title: $i18n.n_copy_trading_funding_fee,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        }, {
            tag: 49,
            title: $i18n.n_copy_trading_profits_deducted,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        }, {
            tag: 50,
            title: $i18n.n_copy_trading_profit_sharing,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        }, {
            tag: 81,
            title: $i18n.n_copytrading_share,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        }, {
            tag: 78,
            title: $i18n.n_copytrading_share_expenses,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        }, {
            tag: 77,
            title: $i18n.n_copytrading_share_refund,
            titleColor: buttonTitleColor_Normal,
            backColor: buttonBackColor_Normal,
            type: "normal"
        } ]
    };
}

async function start$l() {}

const {moduleData: moduleData$l, moduleEvent: moduleEvent$l} = moduleDefine("capitalFlow", start$l, defaultData$l);

moduleEvent$l.onCreate = async function(eventParams) {
    requestCapitalFlow(false);
    requestSymbolData();
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_history"
    });
};

moduleEvent$l.onResume = async function() {};

moduleEvent$l.onDestroy = async function() {
    moduleData$l.textFilterSymbol = $i18n.n_margin_all_currency;
    moduleData$l.iconFilterSymbol = "@drawable/edge_engine_arrow_down";
    moduleData$l.textFilterCrossAndIsolated = $i18n.n_contract_super_margin;
    moduleData$l.iconFilterCrossAndIsolated = "@drawable/edge_engine_arrow_down";
    moduleData$l.textFilterMore = $i18n.n_order_filter_more;
    moduleData$l.iconFilterMore = "@drawable/edge_engine_arrow_down";
    moduleData$l.pageIndex = 1;
    moduleData$l.modeType = 2;
    moduleData$l.mixMoneyType = 0;
    moduleData$l.refreshStatus = 0;
    moduleData$l.loadMoreStatus = 0;
    moduleData$l.emptyVisible = "gone";
    moduleData$l.listVisible = "invisible";
    moduleData$l.contractCode = "";
    moduleData$l.accountAction = [];
    moduleData$l.contractSymbolList = [];
    moduleData$l.currencyListVisible = "invisible";
    moduleData$l.currencyEmptyVisible = "gone";
    moduleData$l.superMarginSelected = "visible";
    moduleData$l.isolateMarginSelected = "gone";
    moduleData$l.superMarginColor = buttonTitleColor_Selected;
    moduleData$l.isolateMarginColor = buttonTitleColor_Normal;
    moduleData$l.searchWord = "";
    moduleData$l.clearVisible = "gone";
    moduleData$l.filterTypes = [ {
        tag: 0,
        title: $i18n.n_balance_all,
        titleColor: buttonTitleColor_Selected,
        backColor: buttonBackColor_Selected,
        type: "normal"
    }, {
        tag: 1,
        title: $i18n.n_exchange_order_detail_fee,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    }, {
        tag: 4,
        title: $i18n.n_balance_margin_transfer,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    }, {
        tag: 2,
        title: $i18n.n_copy_trading_realized_pnL,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    }, {
        tag: 6,
        title: $i18n.n_copy_trading_funding_fee,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    }, {
        tag: 49,
        title: $i18n.n_copy_trading_profits_deducted,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    }, {
        tag: 50,
        title: $i18n.n_copy_trading_profit_sharing,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    }, {
        tag: 81,
        title: $i18n.n_copytrading_share,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    }, {
        tag: 78,
        title: $i18n.n_copytrading_share_expenses,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    }, {
        tag: 77,
        title: $i18n.n_copytrading_share_refund,
        titleColor: buttonTitleColor_Normal,
        backColor: buttonBackColor_Normal,
        type: "normal"
    } ];
    dataIndex = 0;
    supportSymbolList = [];
};

var isRequest$3 = false;

async function requestCapitalFlow(isMore) {
    if (isRequest$3) {
        return;
    }
    isRequest$3 = true;
    if (!isMore) {
        moduleData$l.pageIndex = 1;
    } else {
        moduleData$l.pageIndex += 1;
    }
    const contractCode = moduleData$l.contractCode;
    const pageIndex = moduleData$l.pageIndex;
    const pageSize = 20;
    const modeType = moduleData$l.modeType;
    const mixMoneyType = moduleData$l.mixMoneyType;
    const searchType = 1;
    const params = {
        pageIndex: pageIndex,
        pageSize: pageSize,
        modeType: modeType,
        searchType: searchType
    };
    if (contractCode != null && contractCode != "" && contractCode != "undefined") {
        params.contractCode = contractCode;
    }
    if (mixMoneyType != null && mixMoneyType != "" && mixMoneyType != "undefined") {
        params.mixMoneyType = mixMoneyType;
    }
    const flowData = await sendRequest$2("v1/copytrading/contract-account/contract-account-action-list", params, 1, 0, {
        "Content-Type": "application/json"
    });
    isRequest$3 = false;
    if (!flowData || flowData == null || flowData.accountAction == null || flowData.accountAction.length == 0) {
        if (moduleData$l.pageIndex == 1) {
            moduleData$l.refreshStatus = "2";
            setListVisible$3(false);
            moduleData$l.list = [];
        } else {
            moduleData$l.pageIndex -= 1;
            moduleData$l.loadMoreStatus = "2";
        }
        return;
    }
    if (moduleData$l.pageIndex == 1) {
        moduleData$l.refreshStatus = 2;
    } else {
        moduleData$l.loadMoreStatus = 2;
    }
    setListVisible$3(true);
    const {totalPage: totalPage, currentPage: currentPage, totalSize: totalSize, accountAction: accountAction} = flowData;
    handleData$3(accountAction);
}

async function requestSymbolData() {
    await sendRequestWithCache("v1/copytrading/support-contract-symbol", callback = drawerDataCallback, cacheKeyList = "capitalFlowSymbolData");
}

function drawerDataCallback(drawerData, isCache) {
    console.log(`requestSymbolData  drawerDataCallback isCache = ${isCache} supportSymbolList.length = ${supportSymbolList.length} drawerData:${JSON.stringify(drawerData)}`);
    if (isCache && supportSymbolList.length > 0) {
        return;
    }
    supportSymbolList = [];
    if (drawerData && drawerData != "") {
        console.log("requestSymbolData  end drawerData.supportSymbol:" + JSON.stringify(drawerData.supportSymbol));
        if (drawerData.supportSymbol != null) {
            var contentListLength = drawerData.supportSymbol.length;
            console.log("requestSymbolData contentListLength:" + contentListLength);
            supportSymbolList.push({
                titleColor: buttonTitleColor_Selected,
                currencySelected: "visible",
                symbolShortType: "",
                symbolTitle: $i18n.n_margin_all_currency,
                type: "normal",
                index: 0
            });
            for (let i = 0; i < contentListLength; ++i) {
                let symbol = drawerData.supportSymbol[i];
                var cellData = {
                    titleColor: buttonTitleColor_Normal,
                    currencySelected: "gone",
                    symbolShortType: symbol,
                    symbolTitle: symbol.replace("-", ""),
                    type: "normal",
                    index: i + 1
                };
                supportSymbolList.push(cellData);
                console.log("requestSymbolData 遍历 item:" + JSON.stringify(cellData));
            }
            moduleData$l.contractSymbolList = supportSymbolList;
            if (moduleData$l.contractSymbolList == null || moduleData$l.contractSymbolList.length == 0) {
                moduleData$l.currencyListVisible = "gone";
                moduleData$l.currencyEmptyVisible = "visible";
            } else {
                moduleData$l.currencyListVisible = "visible";
                moduleData$l.currencyEmptyVisible = "gone";
            }
            console.log("requestSymbolData supportSymbolList:" + JSON.stringify(supportSymbolList));
        } else {
            console.log("requestSymbolData supportSymbolList = null");
        }
    }
}

function setListVisible$3(visible) {
    if (true == visible) {
        moduleData$l.emptyVisible = "gone";
        moduleData$l.listVisible = "visible";
    } else {
        moduleData$l.emptyVisible = "visible";
        moduleData$l.listVisible = "invisible";
    }
}

function handleData$3(accountAction) {
    for (let i = 0; i < accountAction.length; ++i) {
        let data = accountAction[i];
        data.index = dataIndex;
        dataIndex++;
        data.type = "normal";
        if (data.createdAt != null && data.createdAt != "" && data.createdAt != "undefined") {
            data.time = new Date(data.createdAt).Format("yyyy-MM-dd hh:mm:ss");
        } else {
            data.time = "--";
        }
        if (data.pair != null && data.pair != "" && data.pair != "undefined" && data.businessType != null && data.businessType != "" && data.businessType != "undefined") {
            let contractType = "";
            switch (data.businessType) {
              case "swap":
                contractType = $i18n.n_market_contract_swap_trade_name;
                break;

              case "next_quarter":
                contractType = $i18n.n_market_contract_trade_next_quarter;
                break;

              case "quarter":
                contractType = $i18n.n_market_contract_symbol_quarter;
                break;

              case "next_week":
                contractType = $i18n.n_market_contract_symbol_nextweek;
                break;

              case "this_week":
                contractType = $i18n.n_market_contract_symbol_thisweek;
                break;
            }
            data.businessName = `${data.pair} ${contractType}`;
        } else {
            data.businessName = "--";
        }
        if (data.money != null && data.money != "" && data.money != "undefined") {
            data.money = formatPrecision(data.money, 8);
        } else {
            data.money = "--";
        }
        if (data.voucherMoney != null && data.voucherMoney != "" && data.voucherMoney != "undefined" && parseFloat(data.voucherMoney) > 0) {
            if (data.principalMoney != null && data.principalMoney != "" && data.principalMoney != "undefined" && parseFloat(data.principalMoney) > 0) {
                data.voucherMoneyTips = `(${$i18n.n_shark_fin_principal}${formatPrecision(data.principalMoney, 8)}U+${$i18n.n_content_live_exp_gold}${formatPrecision(data.voucherMoney, 8)}U)`;
            } else {
                data.voucherMoneyTips = `(${$i18n.n_content_live_exp_gold}${formatPrecision(data.voucherMoney, 8)}U)`;
            }
            data.voucherMoneyVisible = "visible";
        } else {
            data.voucherMoneyTips = "--";
            data.voucherMoneyVisible = "gone";
        }
        data.showFuture = "visible";
        if (data.moneyType != null && data.moneyType != "" && data.moneyType != "undefined") {
            if (data.moneyType >= 5 && data.moneyType <= 8) {
                data.dataType = $i18n.n_exchange_order_detail_fee;
            } else if (data.moneyType >= 34 && data.moneyType <= 45 || data.moneyType == 72 || data.moneyType == 73 || data.moneyType == 14 || data.moneyType == 15 || data.moneyType >= 64 && data.moneyType <= 67) {
                data.dataType = $i18n.n_balance_margin_transfer;
                data.showFuture = "gone";
            } else if (data.moneyType == 3 || data.moneyType == 4 || data.moneyType == 9 || data.moneyType == 10 || data.moneyType == 12 || data.moneyType == 13 || data.moneyType == 18 || data.moneyType == 46 || data.moneyType == 47) {
                data.dataType = $i18n.n_copy_trading_realized_pnL;
            } else if (data.moneyType == 30 || data.moneyType == 31) {
                data.dataType = $i18n.n_copy_trading_funding_fee;
            } else if (data.moneyType == 49) {
                data.dataType = $i18n.n_copy_trading_profits_deducted;
            } else if (data.moneyType == 50) {
                data.dataType = $i18n.n_copy_trading_profit_sharing;
            } else if (data.moneyType == 77) {
                data.dataType = $i18n.n_copytrading_share_refund;
            } else if (data.moneyType == 78) {
                data.dataType = $i18n.n_copytrading_share_expenses;
            } else if (data.moneyType == 81) {
                data.dataType = $i18n.n_copytrading_share;
            } else {
                data.dataType = "--";
            }
        } else {
            moduleData$l.dataType = "--";
        }
        if (moduleData$l.pageIndex > 1) {
            moduleData$l.accountAction.push(data);
        }
    }
    if (moduleData$l.pageIndex == 1) {
        moduleData$l.accountAction = accountAction;
    }
}

async function onRefresh() {
    dataIndex = 0;
    await requestCapitalFlow(false);
}

async function onLoadMore$3() {
    await requestCapitalFlow(true);
}

moduleEvent$l.back = function() {
    $nativeAPI.containerBack();
};

moduleEvent$l.filterCurrency = async function(index) {
    var selectedItem = null;
    for (var i = 0; i < supportSymbolList.length; i++) {
        var item = supportSymbolList[i];
        if (i == index) {
            selectedItem = item;
        }
        item.titleColor = buttonTitleColor_Normal;
        item.currencySelected = "gone";
    }
    if (selectedItem != null) {
        selectedItem.titleColor = buttonTitleColor_Selected;
        selectedItem.currencySelected = "visible";
        moduleData$l.contractCode = selectedItem.symbolShortType;
        moduleData$l.textFilterSymbol = selectedItem.symbolTitle;
    }
    moduleData$l.contractSymbolList = supportSymbolList;
    moduleData$l.iconFilterSymbol = "@drawable/edge_engine_arrow_down";
    moduleData$l.currencyShow = "false";
    dataIndex = 0;
    var button_name = "";
    if (index == 1) {
        button_name = "all";
    } else {
        button_name = selectedItem.symbolShortType;
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_history",
        button_name: button_name
    });
    requestCapitalFlow(false);
};

moduleEvent$l.currencyPopDismiss = function() {
    moduleData$l.iconFilterSymbol = "@drawable/edge_engine_arrow_down";
    moduleData$l.currencyShow = "false";
};

moduleEvent$l.filterClick = async function(index) {
    if (index == 0) {
        moduleData$l.iconFilterCrossAndIsolated = "@drawable/edge_engine_arrow_up";
        moduleData$l.modeTypeShow = "true";
    } else if (index == 1) {
        moduleData$l.searchWord = "";
        moduleData$l.contractSymbolList = supportSymbolList;
        moduleData$l.iconFilterSymbol = "@drawable/edge_engine_arrow_up";
        moduleData$l.currencyShow = "true";
        if (moduleData$l.contractSymbolList == null || moduleData$l.contractSymbolList.length == 0) {
            moduleData$l.currencyListVisible = "gone";
            moduleData$l.currencyEmptyVisible = "visible";
        } else {
            moduleData$l.currencyListVisible = "visible";
            moduleData$l.currencyEmptyVisible = "gone";
        }
    } else if (index == 2) {
        moduleData$l.filterMoreShow = "true";
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_history",
            button_name: "more_filters"
        });
    }
};

moduleEvent$l.modeTypePopSelected = async function(modeType) {
    var button_name = "";
    if (modeType == 1) {
        button_name = "isolated";
    } else {
        button_name = "cross";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_history",
        button_name: button_name
    });
    if (moduleData$l.modeType != modeType) {
        if (modeType == 2) {
            moduleData$l.superMarginSelected = "visible";
            moduleData$l.isolateMarginSelected = "gone";
            moduleData$l.textFilterCrossAndIsolated = $i18n.n_contract_super_margin;
            moduleData$l.superMarginColor = buttonTitleColor_Selected;
            moduleData$l.isolateMarginColor = buttonTitleColor_Normal;
        } else {
            moduleData$l.superMarginSelected = "gone";
            moduleData$l.isolateMarginSelected = "visible";
            moduleData$l.textFilterCrossAndIsolated = $i18n.n_contract_trade_margin;
            moduleData$l.superMarginColor = buttonTitleColor_Normal;
            moduleData$l.isolateMarginColor = buttonTitleColor_Selected;
        }
        moduleData$l.modeType = modeType;
        dataIndex = 0;
        requestCapitalFlow(false);
    }
    moduleData$l.iconFilterCrossAndIsolated = "@drawable/edge_engine_arrow_down";
    moduleData$l.modeTypeShow = "false";
};

moduleEvent$l.modeTypePopDismiss = function() {
    moduleData$l.iconFilterCrossAndIsolated = "@drawable/edge_engine_arrow_down";
    moduleData$l.modeTypeShow = "false";
};

moduleEvent$l.filterType = async function(tag) {
    var selectedItem = null;
    for (var i = 0; i < moduleData$l.filterTypes.length; i++) {
        var item = moduleData$l.filterTypes[i];
        if (item.tag == tag) {
            selectedItem = item;
        }
        item.titleColor = buttonTitleColor_Normal;
        item.backColor = buttonBackColor_Normal;
    }
    if (selectedItem != null) {
        selectedItem.titleColor = buttonTitleColor_Selected;
        selectedItem.backColor = buttonBackColor_Selected;
        moduleData$l.textFilterMore = selectedItem.title;
        moduleData$l.mixMoneyType = tag;
        dataIndex = 0;
        requestCapitalFlow(false);
        var button_name = "";
        if (tag == 0) {
            button_name = "all";
        } else if (tag == 1) {
            button_name = "fee";
        } else if (tag == 4) {
            button_name = "transfer";
        } else if (tag == 2) {
            button_name = "realized_pnl";
        } else if (tag == 6) {
            button_name = "funding_fee";
        } else if (tag == 49) {
            button_name = "profits_deducted";
        } else if (tag == 50) {
            button_name = "profit_sharing";
        } else if (tag == 81) {
            button_name = "profit_shared";
        } else if (tag == 78) {
            button_name = "futures_profit_sharing";
        } else if (tag == 77) {
            button_name = "futures_profit_sharing_refund";
        }
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_history",
            button_name: button_name
        });
    }
    moduleData$l.filterMoreShow = "false";
};

moduleEvent$l.filterMorePopDismiss = function() {
    moduleData$l.filterMoreShow = "false";
};

moduleEvent$l.onFocusChange = async function(isFocus) {
    moduleData$l.isFocus = isFocus;
    moduleData$l.borderColor = currentBoarderColor$1(isFocus);
    if (!isFocus && !isCancelSearch$1) {
        filterList();
    }
    moduleData$l.clearVisible = isFocus ? "visible" : "gone";
};

moduleEvent$l.onReturn = async function() {
    if (commonData.OS == 1) {
        filterList();
    }
};

function filterList() {
    if (supportSymbolList.length == 0) return;
    if (moduleData$l.searchWord.trim() == "") {
        moduleData$l.contractSymbolList = supportSymbolList;
    }
    moduleData$l.contractSymbolList = supportSymbolList.filter((function(item) {
        return item.symbolTitle.toLowerCase().includes(moduleData$l.searchWord.trim().toLowerCase());
    }));
    if (moduleData$l.contractSymbolList == null || moduleData$l.contractSymbolList.length == 0) {
        moduleData$l.currencyListVisible = "gone";
        moduleData$l.currencyEmptyVisible = "visible";
    } else {
        moduleData$l.currencyListVisible = "visible";
        moduleData$l.currencyEmptyVisible = "gone";
    }
}

moduleEvent$l.closeKeyBoard = function() {
    isCancelSearch$1 = true;
    moduleData$l.isFocus = false;
};

function currentBoarderColor$1(isFocus) {
    return isFocus ? Edit_Board_SelectColor$1 : Edit_Board_NomalColor$1;
}

moduleEvent$l.clickedClear = function() {
    moduleData$l.searchWord = "";
    moduleData$l.contractSymbolList = supportSymbolList;
    if (moduleData$l.contractSymbolList == null || moduleData$l.contractSymbolList.length == 0) {
        moduleData$l.currencyListVisible = "gone";
        moduleData$l.currencyEmptyVisible = "visible";
    } else {
        moduleData$l.currencyListVisible = "visible";
        moduleData$l.currencyEmptyVisible = "gone";
    }
};

moduleEvent$l.onRefresh = onRefresh;

moduleEvent$l.onLoadMore = onLoadMore$3;

function defaultData$k() {
    return {};
}

async function start$k() {}

const {moduleData: moduleData$k, moduleEvent: moduleEvent$k} = moduleDefine("historyClick", start$k, defaultData$k);

moduleEvent$k.jump = function() {
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=capitalFlow&xml=capitalFlow&start=capitalFlow.start`);
};

async function start$j() {
    console.log("followerCard start");
}

function defaultData$j() {
    return {
        followerCardItem: {}
    };
}

const {moduleData: moduleData$j, moduleEvent: moduleEvent$j} = moduleDefine("followerCard", start$j, defaultData$j);

moduleEvent$j.initFollowerCardItem = async function initFollowerCardItem(jsonParams) {
    try {
        var params = JSON.parse(jsonParams);
        let {coin: coin, unit: unit} = coinUnit(params.symbol);
        if (params.direction == 1) {
            params.directionLabel = $i18n.n_contract_position_buy_label;
            params.directionColor = getUpDownColor();
            params.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            params.directionLabel = $i18n.n_contract_position_sell_label;
            params.directionColor = getUpDownColor(false);
            params.directionDesc = $i18n.n_contract_trade_open_low;
        }
        params.symbolDesc = symbolDesc(params.symbol);
        var positionModel = $i18n.n_copy_trading_isolated;
        if (params.modeType == 2) {
            positionModel = $i18n.n_contract_super_margin;
        } else if (params.modeType == 1) {
            positionModel = $i18n.n_contract_trade_margin;
        }
        params.modeTypeName = positionModel;
        params.leverDesc = `${params.lever}X`;
        if (params.direction == 1) {
            params.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            params.directionDesc = $i18n.n_contract_trade_open_low;
        }
        if (parseFloat(params.profit) >= 0) {
            params.profitColor = getUpDownColor();
            params.profit = `+${params.profit}`;
        } else if (isNaN(parseFloat(params.profit))) {
            params.profitColor = "@color/kColorSecondaryText";
            params.profit = "--";
        } else {
            params.profitColor = getUpDownColor(false);
        }
        if (typeof params.profitRate === "string" && !isNaN(parseFloat(params.profitRate))) {
            const openProfitRate = formatPrecision(multiply(params.profitRate, "100"), 2);
            params.profitRate = `${openProfitRate}%`;
        } else {
            params.profitRate = "--";
        }
        try {
            let data = commonData.linearSwapWsData[params.symbol];
            let usePrice = "0";
            if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                usePrice = params.openPrice;
            } else {
                usePrice = data.price;
            }
            if (commonData.unitType == UnitType.unitTypeUSDT) {
                let currentContractInfo = getModelByContractShortType(params.symbol);
                params.openAmountVolume = getVolume(params.openAmount, usePrice, getContractSizePrecision(currentContractInfo), commonData.unitType);
            } else {
                params.openAmountVolume = params.openAmount;
            }
        } catch (e) {
            console.log(`orderItem--e = ${e}`);
        }
        moduleData$j.followerCardItem = params;
        console.log(`followerCard data :${params.userSign}`);
    } catch (e) {
        console.error(`initFollowerCardItem error:${e}`);
    }
};

moduleEvent$j.copyTradingTapped = async function() {
    var url = `holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${moduleData$j.followerCardItem.userSign}`;
    if (moduleData$j.followerCardItem.jumpRouteType == 2) {
        url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    }
    openURL(url);
};

async function start$i() {
    console.log(`traderCard start`);
}

function defaultData$i() {
    return {
        traderCardItem: {}
    };
}

const {moduleData: moduleData$i, moduleEvent: moduleEvent$i} = moduleDefine("traderCard", start$i, defaultData$i);

moduleEvent$i.initTraderCardItem = async function initTraderCardItem(jsonParams) {
    try {
        var params = JSON.parse(jsonParams);
        let {coin: coin, unit: unit} = coinUnit(params.symbol);
        if (params.direction == 1) {
            params.directionLabel = $i18n.n_contract_position_buy_label;
            params.directionColor = getUpDownColor();
            params.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            params.directionLabel = $i18n.n_contract_position_sell_label;
            params.directionColor = getUpDownColor(false);
            params.directionDesc = $i18n.n_contract_trade_open_low;
        }
        params.symbolDesc = symbolDesc(params.symbol);
        var positionModel = $i18n.n_copy_trading_isolated;
        if (params.modeType == 2) {
            positionModel = $i18n.n_contract_super_margin;
        } else if (params.modeType == 1) {
            positionModel = $i18n.n_contract_trade_margin;
        }
        params.modeTypeName = positionModel;
        params.leverDesc = `${params.lever}X`;
        if (params.direction == 1) {
            params.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            params.directionDesc = $i18n.n_contract_trade_open_low;
        }
        if (parseFloat(params.profit) >= 0) {
            params.profitColor = getUpDownColor();
            params.profit = `+${params.profit}`;
        } else if (isNaN(parseFloat(params.profit))) {
            params.profitColor = "@color/kColorSecondaryText";
            params.profit = "--";
        } else {
            params.profitColor = getUpDownColor(false);
        }
        if (typeof params.profitRate === "string" && !isNaN(parseFloat(params.profitRate))) {
            const openProfitRate = formatPrecision(multiply(params.profitRate, "100"), 2);
            params.profitRate = `${openProfitRate}%`;
        } else {
            params.profitRate = "--";
        }
        try {
            let data = commonData.linearSwapWsData[params.symbol];
            let usePrice = "0";
            if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                usePrice = params.openPrice;
            } else {
                usePrice = data.price;
            }
            if (commonData.unitType == UnitType.unitTypeUSDT) {
                let currentContractInfo = getModelByContractShortType(params.symbol);
                params.openAmountVolume = getVolume(params.openAmount, usePrice, getContractSizePrecision(currentContractInfo), commonData.unitType);
            } else {
                params.openAmountVolume = params.openAmount;
            }
        } catch (e) {
            console.log(`orderItem--e = ${e}`);
        }
        if (params.copyUserNum != null) {
            params.copyUserNum = parseInt(params.copyUserNum).toFixed(0);
        } else {
            params.copyUserNum = "--";
        }
        if (params.winRate != null) {
            const winRate = formatPrecision(multiply(params.winRate, "100"), 2);
            params.winRate = `${winRate}%`;
        } else {
            params.winRate = "--";
        }
        if (params.apy != null) {
            const apy = formatPrecision(multiply(params.apy, "100"), 2);
            params.apy = `${apy}%`;
        } else {
            params.apy = "--";
        }
        moduleData$i.traderCardItem = params;
        console.log(`traderCard data :${params.userSign}`);
    } catch (e) {
        console.error(`initTraderCardItem error:${e}`);
    }
};

moduleEvent$i.copyTradingTapped = async function() {
    var url = `holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${moduleData$i.traderCardItem.userSign}`;
    if (moduleData$i.traderCardItem.jumpRouteType == 2) {
        url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    }
    openURL(url);
};

async function start$h() {
    console.log("followerShareCard start");
}

function defaultData$h() {
    return {
        followerShareCardItem: {}
    };
}

const {moduleData: moduleData$h, moduleEvent: moduleEvent$h} = moduleDefine("followerShareCard", start$h, defaultData$h);

moduleEvent$h.initFollowerShareCardItem = async function initFollowerShareCardItem(jsonParams) {
    try {
        var params = JSON.parse(jsonParams);
        let {coin: coin, unit: unit} = coinUnit(params.symbol);
        if (params.direction == 1) {
            params.directionLabel = $i18n.n_contract_position_buy_label;
            params.directionColor = getUpDownColor();
            params.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            params.directionLabel = $i18n.n_contract_position_sell_label;
            params.directionColor = getUpDownColor(false);
            params.directionDesc = $i18n.n_contract_trade_open_low;
        }
        params.symbolDesc = symbolDesc(params.symbol);
        var positionModel = $i18n.n_copy_trading_isolated;
        if (params.modeType == 2) {
            positionModel = $i18n.n_contract_super_margin;
        } else if (params.modeType == 1) {
            positionModel = $i18n.n_contract_trade_margin;
        }
        params.modeTypeName = positionModel;
        params.leverDesc = `${params.lever}X`;
        if (params.direction == 1) {
            params.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            params.directionDesc = $i18n.n_contract_trade_open_low;
        }
        if (parseFloat(params.profit) >= 0) {
            params.profitColor = getUpDownColor();
            params.profit = `+${params.profit}`;
        } else if (isNaN(parseFloat(params.profit))) {
            params.profitColor = "@color/kColorSecondaryText";
            params.profit = "--";
        } else {
            params.profitColor = getUpDownColor(false);
        }
        if (typeof params.profitRate === "string" && !isNaN(parseFloat(params.profitRate))) {
            const openProfitRate = formatPrecision(multiply(params.profitRate, "100"), 2);
            params.profitRate = `${openProfitRate}%`;
        } else {
            params.profitRate = "--";
        }
        try {
            let data = commonData.linearSwapWsData[params.symbol];
            let usePrice = "0";
            if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                usePrice = params.openPrice;
            } else {
                usePrice = data.price;
            }
            if (commonData.unitType == UnitType.unitTypeUSDT) {
                let currentContractInfo = getModelByContractShortType(params.symbol);
                params.openAmountVolume = getVolume(params.openAmount, usePrice, getContractSizePrecision(currentContractInfo), commonData.unitType);
            } else {
                params.openAmountVolume = params.openAmount;
            }
        } catch (e) {
            console.log(`orderItem--e = ${e}`);
        }
        moduleData$h.followerShareCardItem = params;
        console.log(`followerShareCard data :${params.userSign}`);
    } catch (e) {
        console.error(`initFollowerShareCardItem error:${e}`);
    }
};

moduleEvent$h.copyTradingTapped = async function() {
    var url = `holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${moduleData$h.followerShareCardItem.userSign}`;
    if (moduleData$h.followerShareCardItem.jumpRouteType == 2) {
        url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    }
    openURL(url);
};

async function start$g() {
    console.log("traderShareCard start");
}

function defaultData$g() {
    return {
        traderShareCardItem: {}
    };
}

const {moduleData: moduleData$g, moduleEvent: moduleEvent$g} = moduleDefine("traderShareCard", start$g, defaultData$g);

moduleEvent$g.initTraderShareCardItem = async function initTraderShareCardItem(jsonParams) {
    try {
        var params = JSON.parse(jsonParams);
        let {coin: coin, unit: unit} = coinUnit(params.symbol);
        if (params.direction == 1) {
            params.directionLabel = $i18n.n_contract_position_buy_label;
            params.directionColor = getUpDownColor();
            params.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            params.directionLabel = $i18n.n_contract_position_sell_label;
            params.directionColor = getUpDownColor(false);
            params.directionDesc = $i18n.n_contract_trade_open_low;
        }
        params.symbolDesc = symbolDesc(params.symbol);
        var positionModel = $i18n.n_copy_trading_isolated;
        if (params.modeType == 2) {
            positionModel = $i18n.n_contract_super_margin;
        } else if (params.modeType == 1) {
            positionModel = $i18n.n_contract_trade_margin;
        }
        params.modeTypeName = positionModel;
        params.leverDesc = `${params.lever}X`;
        if (params.direction == 1) {
            params.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            params.directionDesc = $i18n.n_contract_trade_open_low;
        }
        if (parseFloat(params.profit) >= 0) {
            params.profitColor = getUpDownColor();
            params.profit = `+${params.profit}`;
        } else if (isNaN(parseFloat(params.profit))) {
            params.profitColor = "@color/kColorSecondaryText";
            params.profit = "--";
        } else {
            params.profitColor = getUpDownColor(false);
        }
        if (typeof params.profitRate === "string" && !isNaN(parseFloat(params.profitRate))) {
            const openProfitRate = formatPrecision(multiply(params.profitRate, "100"), 2);
            params.profitRate = `${openProfitRate}%`;
        } else {
            params.profitRate = "--";
        }
        try {
            let data = commonData.linearSwapWsData[params.symbol];
            let usePrice = "0";
            if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                usePrice = params.openPrice;
            } else {
                usePrice = data.price;
            }
            if (commonData.unitType == UnitType.unitTypeUSDT) {
                let currentContractInfo = getModelByContractShortType(params.symbol);
                params.openAmountVolume = getVolume(params.openAmount, usePrice, getContractSizePrecision(currentContractInfo), commonData.unitType);
            } else {
                params.openAmountVolume = params.openAmount;
            }
        } catch (e) {
            console.log(`orderItem--e = ${e}`);
        }
        if (params.copyUserNum != null) {
            params.copyUserNum = parseInt(params.copyUserNum).toFixed(0);
        } else {
            params.copyUserNum = "--";
        }
        if (params.winRate != null) {
            const winRate = formatPrecision(multiply(params.winRate, "100"), 2);
            params.winRate = `${winRate}%`;
        } else {
            params.winRate = "--";
        }
        if (params.apy != null) {
            const apy = formatPrecision(multiply(params.apy, "100"), 2);
            params.apy = `${apy}%`;
        } else {
            params.apy = "--";
        }
        moduleData$g.traderShareCardItem = params;
        console.log(`traderCard data :${params.userSign}`);
    } catch (e) {
        console.error(`initTraderCardItem error:${e}`);
    }
};

moduleEvent$g.copyTradingTapped = async function() {
    var url = `holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${moduleData$g.traderShareCardItem.userSign}`;
    if (moduleData$g.traderShareCardItem.jumpRouteType == 2) {
        url = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading?index=0";
    }
    openURL(url);
};

const Edit_Board_SelectColor = "@color/kColorMajorTheme100";

const Edit_Board_NomalColor = "@color/KBaseColorInputBackground";

var isCancelSearch = false;

async function start$f() {}

function defaultData$f() {
    return {
        searchWord: "",
        rankType: 0,
        pageNo: 1,
        pageSize: 10,
        isMore: false,
        pageNo: 1,
        traderList: [],
        emptyVisible: "gone",
        listVisible: "gone",
        loadMoreStatus: 0,
        followedUserSign: "",
        borderColor: Edit_Board_NomalColor,
        clearVisible: "gone"
    };
}

const {moduleData: moduleData$f, moduleEvent: moduleEvent$f} = moduleDefine("traderSearch", start$f, defaultData$f);

moduleEvent$f.onCreate = async function() {
    moduleData$f.config = {
        backgroundColor: "kColorContentBackground"
    };
    await requestTraderList(false);
};

async function requestTraderList(isMore) {
    console.log("tl -- 11111");
    if (!isMore) {
        moduleData$f.pageNo = 1;
    } else {
        moduleData$f.pageNo += 1;
    }
    var params = {
        pageSize: moduleData$f.pageSize,
        pageNo: moduleData$f.pageNo
    };
    if (moduleData$f.searchWord.length > 0) {
        params["search"] = moduleData$f.searchWord;
    }
    let listData = await sendRequest$2("v1/copytrading/rank", params);
    if (isMore) {
        moduleData$f.loadMoreStatus = "2";
        console.log("tl -- 交易员列表加载更多完成");
        console.log("tl -- 44444-isMore");
    }
    if (listData != null) {
        moduleData$f.followedUserSign = listData["currentUser"].followedUserSign;
        console.log("tl -- 555555");
        if ((listData.itemList == null || listData.itemList.length == 0) && !isMore) {
            moduleData$f.emptyVisible = "visible";
            moduleData$f.listVisible = "gone";
            console.log("tl -- 66666-1 展示空视图");
            moduleData$f.pageNo -= 1;
            return;
        }
        moduleData$f.emptyVisible = "gone";
        moduleData$f.listVisible = "visible";
        console.log("tl -- 77777 展示列表");
        listDataConfig(listData.itemList, isMore);
        return;
    } else {
        moduleData$f.emptyVisible = "visible";
        moduleData$f.listVisible = "gone";
        console.log("tl -- 66666-2 展示空视图");
        moduleData$f.pageNo -= 1;
        return;
    }
}

function listDataConfig(list, isMore) {
    console.log(`tl -- 77777-1 展示列表,list=${list}`);
    list.forEach((function(item, index) {
        item.index = item.no - 1;
        if (item.index == 0) {
            item.showNoText = "gone";
            item.showNoPic = "visible";
            item.noPic = "@drawable/copy_trading_num_1";
        } else if (item.index == 1) {
            item.showNoText = "gone";
            item.showNoPic = "visible";
            item.noPic = "@drawable/copy_trading_num_2";
        } else if (item.index == 2) {
            item.showNoText = "gone";
            item.showNoPic = "visible";
            item.noPic = "@drawable/copy_trading_num_3";
        } else {
            item.showNoText = "visible";
            item.showNoPic = "gone";
        }
        item.noText = item.no.toString();
        item.traderListType = "1";
        item.apyTextColor = getPriceColor(item.profitRate90);
        item.winRateFontSize = commonData.language.toLocaleLowerCase().search("zh-cn") == 0 || commonData.language.toLocaleLowerCase().search("english") == 0 ? 12 : 11;
        console.log(`tl -- 77777-2-language==${commonData.language},winRateFontSize==${item.winRateFontSize}`);
        let apyValue = parseFloat(item.profitRate90);
        if (apyValue > 0) {
            item.profitRate90 = "+" + String((parseFloat(item.profitRate90) * 100).toFixed(2)) + "%";
        } else {
            item.profitRate90 = String((parseFloat(item.profitRate90) * 100).toFixed(2)) + "%";
        }
        item.copyUserNum = parseInt(item.copyUserNum).toFixed(0);
        item.fullUserNum = parseInt(item.fullUserNum).toFixed(0);
        item.winRate = String((parseFloat(item.winRate) * 100).toFixed(2)) + "%";
        item.mdd = String((parseFloat(item.mdd) * 100).toFixed(2)) + "%";
        item.aum = "$" + String(parseFloat(item.aum).toFixed(2));
        item.showTags = item.tags != null && item.tags.length > 0 ? "visible" : "gone";
        item.followed = item.copyStatus == 2 && !$data.traderData.userInfo.isTrader ? "visible" : "gone";
        item.followText = $i18n.copy_trading_text;
        item.fullText = $i18n.copy_trading_full;
        item.checkText = $i18n.copy_trading_check;
        item.followedText = $i18n.n_im_group_noti_edit;
        item.profits = JSON.stringify(item.profitList);
        if (item.copyStatus == 1) {
            item.showCheckText = "gone";
            item.showFullText = "gone";
            item.showFollowText = "gone";
            item.showFollowedText = "visible";
        } else if (item.full == 1) {
            item.showFullText = "visible";
            item.showCheckText = "gone";
            item.showFollowText = "gone";
            item.showFollowedText = "gone";
        } else if ($data.traderData.userInfo.isTrader) {
            item.showCheckText = "visible";
            item.showFullText = "gone";
            item.showFollowText = "gone";
            item.showFollowedText = "gone";
        } else {
            item.showFollowText = "visible";
            item.showFullText = "gone";
            item.showCheckText = "gone";
            item.showFollowedText = "gone";
        }
        if (isMore) {
            moduleData$f.traderList.push(item);
            console.log("tl -- 88888 加载更多添加item");
        }
    }));
    if (!isMore) {
        moduleData$f.traderList = list;
        showLoading(false);
        console.log(`tl -- 9999 下拉刷新，重置 list==${list}`);
    }
}

function clickedItem$2(index) {
    if (index >= moduleData$f.traderList.length) {
        return;
    }
    let item = moduleData$f.traderList[index];
    let url = `holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${item.userSign}`;
    openURL(url);
    console.log(`tl -- copytrading 点击第 ${index} 个 item，跳转链接==${url}`);
}

function clickedCopyTrading(index) {
    if (index >= moduleData$f.traderList.length) {
        return;
    }
    var item = moduleData$f.traderList[index];
    if (item.showFollowText === "visible") {
        if ($data.traderData.userInfo.isTrader == 1) {
            clickedItem$2(index);
        } else {
            clickedFollowedMargin(index, false);
        }
    } else if (item.showFullText === "visible") {
        clickedItem$2(index);
        console.log(`点击了第 ${index} 个的满员按钮`);
    } else if (item.showCheckText === "visible") {
        clickedItem$2(index);
        console.log(`点击了第 ${index} 个的查看按钮`);
    } else if (item.showFollowedText === "visible") {
        clickedFollowedMargin(index, true);
        console.log(`点击了第 ${index} 个的已跟单按钮`);
    }
}

function clickedFollowedMargin(index, isEdit) {
    if (parseBoolean(commonData.isChild)) {
        $data.homePage.childAccountShow = "true";
    } else {
        let item = moduleData$f.traderList[index];
        openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=copySetting&navConfig=full&userSign=${item.userSign}&imgUrl=${item.imgUrl}&isEdit=${isEdit}`);
    }
}

function clickedShare(index) {
    if (index >= moduleData$f.traderList.length) {
        return;
    }
    console.log(`点击了第 ${index} 个的分享按钮`);
}

async function onLoadMore$2(searchWord = null, rankType = null) {
    console.log("tl -- 交易员列表开始加载更多");
    if (searchWord != undefined) {
        moduleData$f.searchWord = searchWord;
    }
    if (rankType != undefined) {
        moduleData$f.rankType = rankType;
    }
    await requestTraderList(true);
}

function currentBoarderColor(isFocus) {
    return isFocus ? Edit_Board_SelectColor : Edit_Board_NomalColor;
}

moduleEvent$f.onDestroy = async function() {};

moduleEvent$f.onResume = async function() {};

moduleEvent$f.onPause = async function() {};

moduleEvent$f.onStop = async function() {};

moduleEvent$f.onStart = async function() {
    await requestTraderList(false);
};

moduleEvent$f.onFocusChange = async function(isFocus) {
    moduleData$f.isFocus = isFocus;
    console.log(`wp onFocusChange isFocus=${isFocus}`);
    moduleData$f.borderColor = currentBoarderColor(isFocus);
    if (!isFocus && !isCancelSearch) {
        requestTraderList(false);
    }
    moduleData$f.clearVisible = isFocus ? "visible" : "gone";
};

moduleEvent$f.onReturn = async function() {
    if (commonData.OS == 1) {
        requestTraderList(false);
    }
};

moduleEvent$f.closeKeyBoard = function() {
    isCancelSearch = true;
    moduleData$f.isFocus = false;
};

moduleEvent$f.cancel = function() {
    $nativeAPI.containerBack();
    console.log(`wp cancel containerBack`);
};

moduleEvent$f.clickedClear = function() {
    moduleData$f.searchWord = "";
    console.log(`wp clickedClear`);
};

moduleEvent$f.clickedCopyTrading = clickedCopyTrading;

moduleEvent$f.clickedItem = clickedItem$2;

moduleEvent$f.clickedShare = clickedShare;

moduleEvent$f.onLoadMore = onLoadMore$2;

moduleEvent$f.requestTraderList = requestTraderList;

async function start$e() {
    requestPositionOrder();
}

var followerPosition = {
    emptyVisible: "gone",
    listVisible: "visible",
    currentOrderCount: 0,
    positionClosePopShow: "false",
    positionCloseTipShow: "false",
    adjustMarginShow: "false",
    addBackColor: "@color/KBaseColorContentBackground",
    reduceBackColor: "@color/KBaseColorInputBackground",
    maxMargin: $i18n.n_contract_adjust_position_max_increase,
    selectionIndex: -1,
    list: [],
    positions: [],
    positionClose: {},
    slippage: "-- USDT",
    positionMarginData: {},
    adjustMarginType: 1
};

function defaultData$e() {
    return followerPosition;
}

const {moduleData: moduleData$e, moduleEvent: moduleEvent$e} = moduleDefine("followerPosition", start$e, defaultData$e);

async function onPositionClose(index) {
    selectionIndex = index;
    console.log(`wp- onPositionClose:${index}`);
    let item = moduleData$e.list[index];
    let currentContractInfo = getModelByContractShortType(item.symbol);
    let precision = getPriceTickPrecision(currentContractInfo);
    let {coin: coin, unit: unit} = coinUnit(item.symbol);
    item.futureNumber = `${item.amount} ${coin}`;
    try {
        let data = commonData.linearSwapWsData[item.symbol];
        let usePrice = "0";
        if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
            usePrice = item.openPrice;
        } else {
            usePrice = data.price;
        }
        item.marketPrice = `${usePrice} USDT`;
        let amount = "--";
        amount = item.amount;
        item.futureNumber = `${amount} ${coin}`;
    } catch (e) {
        console.log(`orderItem--e = ${e}`);
    }
    item.openAvgPrice = `${formatPrecision(item.openPrice, precision)} USDT`;
    let profit = 0;
    let profitColor = getUpDownColor();
    if (item.direction == "long") {
        profit = multiply(parseFloat(item.marketPrice) - parseFloat(item.openPrice), parseFloat(item.amount));
    } else {
        profit = multiply(parseFloat(item.openPrice) - parseFloat(item.marketPrice), parseFloat(item.amount));
    }
    let profitString = formatPrecision(profit, 4);
    if (profit >= 0) {
        profitColor = getUpDownColor();
        item.profit = `+${profitString} USDT`;
    } else {
        profitColor = getUpDownColor(false);
        item.profit = `${profitString} USDT`;
    }
    item.profitColor = profitColor;
    $data.followerPosition.positionClose = item;
    if ($data.followerPosition.positionClosePopShow == "false") {
        $data.followerPosition.positionClosePopShow = "true";
        $data.followerPosition.isEntrustedOrders = await isEntrustOrders(item.symbol, item.modeType);
        console.log(`wp- onPositionClose orders:${$data.followerPosition.isEntrustedOrders}`);
    }
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "positions_close"
    });
}

function onClose() {
    $data.followerPosition.positionClosePopShow = "false";
}

function onAdjustMarginClose() {
    $data.followerPosition.adjustMarginShow = "false";
    subKeyBord(false);
}

async function onSelectionChange() {
    requestPositionOrder();
}

function popConfirm() {
    if ($data.followerPosition.isEntrustedOrders == true) {
        $data.followerPosition.positionCloseTipShow = "true";
    } else {
        $data.followerPosition.positionClosePopShow = "false";
        requestClosePosition();
    }
}

function tipConfirm() {
    $data.followerPosition.positionCloseTipShow = "false";
    requestClosePosition();
}

function onTipClose() {
    selectionIndex = -1;
    $data.followerPosition.positionCloseTipShow = "false";
}

function handlePositionData(positions) {
    for (let i = 0; i < positions.length; ++i) {
        let v = positions[i];
        let currentContractInfo = getModelByContractShortType(v.symbol);
        let precision = getContractSizePrecision(currentContractInfo);
        v.openPriceStr = formatPrecision(v.openPrice, getPriceTickPrecision(currentContractInfo));
        v.index = i;
        v.adjustMarginVisible = v.modeType == 1 ? "visible" : "gone";
        let {coin: coin, unit: unit} = coinUnit(v.symbol);
        if (v.direction == "long") {
            v.directionLabel = $i18n.n_contract_position_buy_label;
            v.directionColor = getUpDownColor();
            v.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            v.directionLabel = $i18n.n_contract_position_sell_label;
            v.directionColor = getUpDownColor(false);
            v.directionDesc = $i18n.n_contract_trade_open_low;
        }
        if (parseFloat(v.profit) >= 0) {
            v.openProfitColor = getUpDownColor();
            v.openProfitStr = `+${v.profit}`;
        } else if (isNaN(parseFloat(v.profit))) {
            v.openProfitColor = "@color/kColorSecondaryText";
            v.openProfitStr = "--";
        } else {
            v.openProfitColor = getUpDownColor(false);
            v.openProfitStr = `${v.profit}`;
        }
        if (!isNaN(parseFloat(v.profitRate))) {
            const openProfitRate = formatPrecision(multiply(v.profitRate, "100"), 2);
            v.openProfitRateStr = `${openProfitRate}%`;
        } else {
            v.openProfitRateStr = "--";
        }
        v.symbolDesc = symbolDesc(v.symbol);
        v.modeTypeName = v.modeType == 1 ? $i18n.n_contract_trade_margin : $i18n.n_contract_super_margin;
        v.leverDesc = `${v.lever}X`;
        if (v.liquidationPrice == null) {
            v.explosionPrice = "--";
        } else {
            v.explosionPrice = formatPrecision(v.liquidationPrice, getPriceTickPrecision(currentContractInfo));
        }
        v.bondAmount = formatPrecision(v.positionMargin, 4);
        v.openAmountVolumeTitle = $i18n.$intercept.n_contarct_position_volume_label(coin);
        let priceSubtitle = $i18n.n_contract_last_price;
        v.priceTitle = `${priceSubtitle}(USDT)`;
        let riskRateString = "--";
        if (!isNaN(parseFloat(v.riskRate))) {
            const riskRate = formatPrecision(multiply(v.riskRate, "100"), 2);
            riskRateString = `${riskRate}%`;
        }
        v.riskRateString = riskRateString;
        try {
            let data = commonData.linearSwapWsData[v.symbol];
            let usePrice = "0";
            if (!data || data == null || data.price == null || data.price == "" || data.price == "undefined") {
                usePrice = v.openPrice;
                v.price = "--";
            } else {
                usePrice = data.price;
                v.price = data.price;
            }
            v.openAmountVolume = getVolume(v.amount, usePrice, precision, UnitType.unitTypeSymbol);
            if (data && data != "undefined" && data != null && data.price != null || data.price != "" || data.price != "undefined" && data.price > 0) {
                let profit = getProfit(v.openPrice, usePrice, v.amount, v.direction);
                if (parseFloat(profit) >= 0) {
                    v.openProfitColor = getUpDownColor();
                    v.openProfitStr = `+${profit}`;
                } else if (isNaN(parseFloat(profit))) {
                    v.openProfitColor = "@color/kColorSecondaryText";
                    v.openProfitStr = "--";
                } else {
                    v.openProfitColor = getUpDownColor(false);
                    v.openProfitStr = profit;
                }
                let profitRate = getProfitRate(v.openPrice, usePrice, v.amount, v.direction, v.lever);
                if (profitRate != "") {
                    v.openProfitRateStr = profitRate;
                } else {
                    v.openProfitRateStr = "--";
                }
            }
        } catch (e) {
            console.log(`orderItem--e = ${e}`);
        }
        v.type = "1";
    }
    moduleData$e.list = positions;
}

async function requestClosePosition() {
    if (selectionIndex == -1) {
        return;
    }
    let item = moduleData$e.list[selectionIndex];
    let marketPrice = item.openPrice;
    try {
        let data = commonData.linearSwapWsData[item.symbol];
        let usePrice = "0";
        if (data && data.price && data.price.length > 0) {
            marketPrice = data.price;
        }
    } catch (e) {
        console.log(`orderItem--e = ${e}`);
    }
    var params = {
        symbol: item.symbol,
        amount: `${item.amount}`,
        direction: item.direction,
        modeType: item.modeType,
        marketPrice: `${marketPrice}`
    };
    console.log(`handle close position params =${JSON.stringify(params)}`);
    showLoading(true);
    const data = await sendRequest$2("v1/copytrading/follower/close-all-position", params, 1, 0, {
        "Content-Type": "application/json"
    });
    showLoading(false);
    console.log(`handle close position data =${JSON.stringify(data)}`);
    if (data && data.length > 0) {
        requestPositionOrder();
    }
}

async function requestPositionOrder() {
    ({
        userSign: commonData.userSign,
        pageSize: 100
    });
    const data = await sendRequest$2("v1/copytrading/follower/positions", null);
    try {
        console.log(`handle Position data =${JSON.stringify(data)}`);
        if (!data || data == null || !data.positions || data.positions == null || data.positions.length == 0) {
            moduleData$e.list = [];
            moduleData$e.emptyVisible = "visible";
            moduleData$e.listVisible = "gone";
            moduleData$e.currentOrderCount = 0;
            return;
        }
        const {positions: positions} = data;
        moduleData$e.positions = positions;
        handlePositionData(positions);
        moduleData$e.currentOrderCount = positions.length;
        moduleData$e.emptyVisible = "gone";
        moduleData$e.listVisible = "visible";
        startTimer();
    } catch (e) {
        console.log(`handle Position data error=${e}`);
    }
}

async function requestPositionMargin(contractCode, amount, direction, type) {
    var params = {
        contractCode: contractCode,
        amount: amount == "" || amount == null || amount == undefined ? "0" : amount,
        direction: direction == "long" ? 1 : 2,
        type: type
    };
    const responseData = await sendRequest$2("v1/copytrading/isolated/position-margin", params, 1, 0, {
        "Content-Type": "application/json"
    });
    try {
        console.log(`handle PositionMargin data =${JSON.stringify(responseData)}`);
        if (responseData) {
            $data.followerPosition.positionMarginData = responseData;
            $data.followerPosition.available = `${getMaxWithdrawAvailable()} USDT`;
            if (responseData.marginPosition != null) {
                $data.followerPosition.marginPosition = `${formatPrecision(responseData.marginPosition, 4)} USDT`;
            } else {
                $data.followerPosition.marginPosition = `-- USDT`;
            }
            if (responseData.liquidationPrice != null) {
                let currentContractInfo = getModelByContractShortType(contractCode);
                let precision = getPriceTickPrecision(currentContractInfo);
                $data.followerPosition.liquidationPrice = `${formatPrecision(responseData.liquidationPrice, precision)} USDT`;
            } else {
                $data.followerPosition.liquidationPrice = `-- USDT`;
            }
            if ($data.followerPosition.adjustMarginShow == "false") {
                $data.followerPosition.adjustMarginShow = "true";
                subKeyBord(true);
            }
        }
    } catch (e) {
        console.log(`handle Position data error=${e}`);
    }
}

async function requestPositionMarginChange(contractCode, amount, direction, type) {
    var params = {
        contractCode: contractCode,
        amount: amount == "" || amount == null || amount == undefined ? "0" : amount,
        direction: direction == "long" ? 1 : 2,
        type: type
    };
    const responseData = await sendRequest$2("v1/copytrading/isolated/position-margin-change", params, 1, 0, {
        "Content-Type": "application/json"
    });
    try {
        console.log(`handle requestPositionMarginChange data =${JSON.stringify(responseData)}`);
        if (responseData) {
            $data.followerPosition.adjustMarginShow = "false";
            subKeyBord(false);
            $data.followerPosition.amount = "";
            setTimeout((() => {
                requestPositionOrder();
            }), 1e3);
        }
    } catch (e) {
        console.log(`handle requestPositionMarginChange data error=${e}`);
    }
}

let timerObject;

function startTimer() {
    clearTimer();
    if (null == timerObject) {
        timerObject = setInterval(timerCallback, 5e3);
    }
}

function clearTimer() {
    if (timerObject != null) {
        clearInterval(timerObject);
        timerObject = null;
    }
}

async function timerCallback() {
    await requestPositionOrder();
}

function adjustMargin(index) {
    console.log(`adjustMargin = ${index}`);
    selectionIndex = index;
    let item = moduleData$e.list[index];
    requestPositionMargin(item.symbol, "0", item.direction, $data.followerPosition.adjustMarginType);
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "adjust_margin"
    });
}

async function onAppear$6() {
    commonData.curTabType = TabType.tabTypePosition;
    requestPositionOrder();
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "positions"
    });
}

function onAdjustMargin(index) {
    if (index == 0) {
        $data.followerPosition.addBackColor = "@color/KBaseColorContentBackground";
        $data.followerPosition.reduceBackColor = "@color/KBaseColorInputBackground";
        $data.followerPosition.maxMargin = $i18n.n_contract_adjust_position_max_increase;
        $data.followerPosition.adjustMarginType = 1;
    } else {
        $data.followerPosition.addBackColor = "@color/KBaseColorInputBackground";
        $data.followerPosition.reduceBackColor = "@color/KBaseColorContentBackground";
        $data.followerPosition.maxMargin = $i18n.n_contract_adjust_position_max_decrease;
        $data.followerPosition.adjustMarginType = 2;
    }
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: index == 0 ? "add_margin" : "reduce_margin"
    });
    $data.followerPosition.amount = "";
    $data.followerPosition.available = "-- USDT";
    let item = moduleData$e.list[selectionIndex];
    requestPositionMargin(item.symbol, "0", item.direction, $data.followerPosition.adjustMarginType);
}

function onMax() {
    $data.followerPosition.amount = getMaxWithdrawAvailable();
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_follower_me",
        button_name: "max_margin"
    });
}

function getMaxWithdrawAvailable() {
    if ($data.followerPosition.adjustMarginType == 1 && moduleData$e.positionMarginData.withdrawAvailableIn) {
        return formatPrecision(moduleData$e.positionMarginData.withdrawAvailableIn, 4);
    }
    if ($data.followerPosition.adjustMarginType == 2 && moduleData$e.positionMarginData.withdrawAvailableOut) {
        return formatPrecision(moduleData$e.positionMarginData.withdrawAvailableOut, 4);
    }
    return "--";
}

function onTextChange(text) {
    console.log(`wp onTextChange text=${text}`);
    if ($data.followerPosition.adjustMarginShow == "true") {
        let item = moduleData$e.list[selectionIndex];
        requestPositionMargin(item.symbol, $data.followerPosition.amount, item.direction, $data.followerPosition.adjustMarginType);
    }
}

function onFocusChange(text) {
    console.log(`wp onFocusChange text=${text}`);
}

function onConfirm() {
    console.log(`wp onConfirm`);
    let item = moduleData$e.list[selectionIndex];
    requestPositionMarginChange(item.symbol, $data.followerPosition.amount, item.direction, $data.followerPosition.adjustMarginType);
}

function subKeyBord(sub) {
    if (sub === true) {
        subKeybordSocket("sub");
    } else {
        subKeybordSocket("unsub");
    }
}

moduleEvent$e.closeKeyBoard = function() {
    moduleData$e.amountFocus = "false";
};

moduleEvent$e.onAdjustMarginClose = onAdjustMarginClose;

moduleEvent$e.onPositionClose = onPositionClose;

moduleEvent$e.onClose = onClose;

moduleEvent$e.onTipClose = onTipClose;

moduleEvent$e.onSelectionChange = onSelectionChange;

moduleEvent$e.popConfirm = popConfirm;

moduleEvent$e.tipConfirm = tipConfirm;

moduleEvent$e.adjustMargin = adjustMargin;

moduleEvent$e.refreshData = requestPositionOrder;

moduleEvent$e.onAppear = onAppear$6;

moduleEvent$e.onAdjustMargin = onAdjustMargin;

moduleEvent$e.onMax = onMax;

moduleEvent$e.onTextChange = onTextChange;

moduleEvent$e.onFocusChange = onFocusChange;

moduleEvent$e.onConfirm = onConfirm;

var configInfo = {};

async function start$d() {
    console.log(`followNumbersPop-start`);
    requestFollowNumbers();
}

async function requestFollowNumbers() {
    configInfo = await sendRequest$2("v1/copytrading/copy-configs", null);
    console.log(`followNumbersPop-configInfo==${configInfo}`);
    if (configInfo != null && configInfo.fullNumChoices != null) {
        setupNumberList();
    }
}

async function updateFollowNumbers() {
    if ($data.followNumbers.selIndex != null) {
        const num = configInfo.fullNumChoices[$data.followNumbers.selIndex];
        console.log(`followNumbersPop-设置跟单人数为${num}人`);
        let ret = await sendRequest$2(`v1/copytrading/trader/change-fullnum?fullNum=${num}`, null, 1, 0, {
            "Content-Type": "application/json"
        });
        if (ret != null) {
            $data.followSetting.fullUserNum = num.toString();
            showToast($i18n.n_security_success);
        }
    }
}

function defaultData$d() {
    console.log(`followNumbersPop-defaultData`);
    return {
        modelList: [],
        selIndex: null
    };
}

const {moduleData: moduleData$d, moduleEvent: moduleEvent$d} = moduleDefine("followNumbers", start$d, defaultData$d);

function setupNumberList() {
    var copyUserNum = parseInt($data.followSetting.copyUserNum);
    var fullUserNum = parseInt($data.followSetting.fullUserNum);
    console.log(`followNumbersPop-实际跟单人数==${copyUserNum}`);
    console.log(`followNumbersPop-设置的跟单人数上限==${fullUserNum}`);
    var list = [];
    configInfo.fullNumChoices.forEach((function(num, index) {
        var item = {};
        item.type = "1";
        item.index = index;
        item.followNum = num.toString();
        if (copyUserNum > num) {
            item.textColor = "@color/kColorFourLevelText";
            item.selImageVisibility = "gone";
            item.selected = false;
            item.disable = false;
        } else {
            item.textColor = "@color/kColorPrimaryText";
            item.selImageVisibility = "gone";
            item.selected = false;
            item.disable = true;
        }
        list.push(item);
    }));
    if ($data.followNumbers.selIndex != null) {
        setupDisableOption(list, $data.followNumbers.selIndex);
    }
    $data.followNumbers.modelList = list;
}

function clickedClose$1() {
    console.log(`followNumbersPop-clickedClose`);
    $data.followSetting.followNumbersPopShow = "false";
    $data.followNumbers.selIndex = null;
    setupNumberList();
}

function popDismiss$1() {
    clickedClose$1();
}

function clickedDone$1() {
    console.log(`followNumbersPop-clickedClose`);
    $data.followSetting.followNumbersPopShow = "false";
    updateFollowNumbers();
}

async function clickedMenuItem$1(idx) {
    var currentItem = $data.followNumbers.modelList[idx];
    if (!currentItem.disable) {
        showToast($i18n.n_copy_trading_followsetting_trader_setting_maximum_tips);
        console.log(`followNumbersPop-该选项不可选=${idx}`);
        return;
    }
    if ($data.followNumbers.selIndex != null) {
        var lastItem = $data.followNumbers.modelList[$data.followNumbers.selIndex];
        if (idx == $data.followNumbers.selIndex) {
            lastItem.textColor = "@color/kColorPrimaryText";
            lastItem.selImageVisibility = "gone";
            lastItem.selected = false;
            lastItem.disable = true;
            $data.followNumbers.selIndex = null;
        } else {
            lastItem.textColor = "@color/kColorPrimaryText";
            lastItem.selImageVisibility = "gone";
            lastItem.selected = false;
            $data.followNumbers.selIndex = idx;
            var selItem = $data.followNumbers.modelList[$data.followNumbers.selIndex];
            selItem.textColor = "@color/kColorMajorTheme100";
            selItem.selImageVisibility = "visible";
            selItem.selected = true;
            setupDisableOption($data.followNumbers.modelList);
        }
    } else {
        var selItem = $data.followNumbers.modelList[idx];
        $data.followNumbers.selIndex = idx;
        selItem.textColor = "@color/kColorMajorTheme100";
        selItem.selImageVisibility = "visible";
        selItem.selected = true;
    }
    var button_name = "";
    if (idx == 0) {
        button_name = "follower_limit 100";
    } else if (idx == 1) {
        button_name = "follower_limit 200";
    } else if (idx == 2) {
        button_name = "follower_limit 500";
    } else if (idx == 3) {
        button_name = "follower_limit 1000";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_me_settings",
        button_name: button_name
    });
}

function setupDisableOption(list, idx) {
    var copyUserNum = parseInt($data.followSetting.copyUserNum);
    list.forEach((function(item, index) {
        if (item.followNum < copyUserNum) {
            item.textColor = "@color/kColorFourLevelText";
            item.selImageVisibility = "gone";
            item.selected = false;
            item.disable = false;
        }
    }));
}

moduleEvent$d.clickedMenuItem = clickedMenuItem$1;

moduleEvent$d.start = start$d;

moduleEvent$d.clickedClose = clickedClose$1;

moduleEvent$d.clickedDone = clickedDone$1;

moduleEvent$d.setupNumberList = setupNumberList;

moduleEvent$d.requestFollowNumbers = requestFollowNumbers;

moduleEvent$d.popDismiss = popDismiss$1;

async function start$c() {}

function defaultData$c() {
    return {
        currentTab: 0,
        navConfig: "",
        fullPositionBg: "@color/KBaseColorContentBackground",
        partPositionBg: "@color/KBaseColorInputBackground",
        fullPositionTextColor: "@color/kColorPrimaryText",
        partPositionTextColor: "@color/KBaseColorSecondaryText",
        settingBackground: "@color/KBaseColorInputBackground",
        settingTextColor: "@color/KBaseColorSecondaryText",
        selectAllImage: "@drawable/icon_copytrading_currency_selection_all_n",
        fullPositions: [],
        selectText: `(${0}/${0})`,
        batchEnable: false,
        partPositions: [],
        currentPositions: [],
        selectAllType1: 0,
        selectAllType2: 0,
        currentSelectAllType: 0,
        currentLever: 1,
        currentPositionsLeverIndex: -1,
        batchMaxLever: 20
    };
}

const {moduleData: moduleData$c, moduleEvent: moduleEvent$c} = moduleDefine("leverSetting", start$c, defaultData$c);

moduleEvent$c.onCreate = async function(eventParams) {
    const params = JSON.parse(eventParams);
    const userSign = params.userSign;
    moduleData$c.userSign = userSign;
    moduleData$c.navConfig = `{"left":{"icon":"edge_engine_top_bar_back_normal","action":{"type":"back","parameter":""},"text":null},"titleKey":"n_copy_trading_leversetting_title"}`;
    requestSymbolLevers();
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_trade_settings_leverage"
    });
};

moduleEvent$c.onDestroy = async function() {
    moduleData$c.currentSelectAllType = 0;
    moduleData$c.batchEnable = false;
    moduleData$c.currentTab = 0;
};

async function requestSymbolLevers() {
    var params = {
        userSign: moduleData$c.userSign,
        modeType: 9
    };
    var savedLevers = null;
    var cacheKey = "v1/copytrading/symbol-levers" + moduleData$c.userSign;
    const cache = await read("apiCache", cacheKey);
    if (cache) {
        savedLevers = cache;
        console.log(`leverSetting, cache SymbolLevers=${JSON.stringify(cache)}`);
    }
    showLoading(true);
    let symbolLevers = await sendRequest$2("v1/copytrading/symbol-levers", params);
    console.log(`leverSetting, requestSymbolLevers=${JSON.stringify(symbolLevers)}`);
    showLoading(false);
    var fullPositions = [];
    var partPositions = [];
    var fullPositionsIndex = 0;
    var partPositionsIndex = 0;
    console.log(`leverSetting, traderLevers=${JSON.stringify(symbolLevers.traderLevers)}`);
    console.log(`leverSetting, traderLevers length=${JSON.stringify(symbolLevers.traderLevers.length)}`);
    if (symbolLevers != null) {
        moduleData$c.batchMaxLever = parseInt(symbolLevers.batchMaxLever);
        for (let index = 0; index < symbolLevers.traderLevers.length; index++) {
            let traderLever = symbolLevers.traderLevers[index];
            let myLever = symbolLevers.myLevers[index];
            var item = traderLever;
            item.symbolText = item.symbol.replace("-", "");
            item.myLever = myLever.lever;
            item.myLeverText = `${myLever.lever}x`;
            if (savedLevers != null && savedLevers.length > 0) {
                for (let i = 0; i < savedLevers.length; i++) {
                    let saveItem = savedLevers[i];
                    if (myLever.modeType == saveItem.modeType && myLever.symbol == saveItem.symbol) {
                        item.myLever = saveItem.lever;
                        item.myLeverText = `${saveItem.lever}x`;
                    }
                }
            }
            item.traderLeverText = `${traderLever.lever}x`;
            if (myLever.positions === true) {
                item.positions = true;
                item.selectAllImage = "@drawable/edge_engine_icon_copytrading_currency_selection_all_unavailable";
            } else {
                item.positions = false;
                item.selectAllImage = "@drawable/icon_copytrading_currency_selection_all_n";
            }
            item.isSelect = false;
            item.icon = getPNGIconURLByCurrency(item.symbol.split("-")[0]);
            if (traderLever.modeType == 2) {
                item.index = fullPositionsIndex;
                item.type = "full";
                fullPositions.push(item);
                fullPositionsIndex += 1;
            } else {
                item.index = partPositionsIndex;
                item.type = "part";
                partPositions.push(item);
                partPositionsIndex += 1;
            }
        }
    }
    console.log(`leverSetting, partPositions=${JSON.stringify(partPositions)}`);
    moduleData$c.partPositions = partPositions;
    moduleData$c.fullPositions = fullPositions;
    moduleData$c.symbolLevers = symbolLevers;
    resetTab(moduleData$c.currentTab);
}

moduleEvent$c.tabSelect = async function(index) {
    resetTab(index);
    if (index == 0) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings_leverage",
            button_name: "cross_margin"
        });
    } else {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings_leverage",
            button_name: "isolated_margin"
        });
    }
};

function resetTab(index) {
    if (index == 0) {
        moduleData$c.fullPositionBg = "@color/KBaseColorContentBackground";
        moduleData$c.partPositionBg = "@color/KBaseColorInputBackground";
        moduleData$c.fullPositionTextColor = "@color/kColorPrimaryText";
        moduleData$c.partPositionTextColor = "@color/KBaseColorSecondaryText";
        moduleData$c.currentPositions = moduleData$c.fullPositions;
        moduleData$c.currentSelectAllType = moduleData$c.selectAllType1;
    } else {
        moduleData$c.fullPositionBg = "@color/KBaseColorInputBackground";
        moduleData$c.partPositionBg = "@color/KBaseColorContentBackground";
        moduleData$c.fullPositionTextColor = "@color/KBaseColorSecondaryText";
        moduleData$c.partPositionTextColor = "@color/kColorPrimaryText";
        moduleData$c.currentPositions = moduleData$c.partPositions;
        moduleData$c.currentSelectAllType = moduleData$c.selectAllType2;
    }
    moduleData$c.currentTab = index;
    resetSelectStatus();
}

async function resetSelectStatus() {
    var selecConut = 0;
    for (let index = 0; index < moduleData$c.currentPositions.length; index++) {
        let item = moduleData$c.currentPositions[index];
        if (item.isSelect === true) {
            selecConut += 1;
        }
    }
    if (selecConut == 0) {
        moduleData$c.currentSelectAllType = 0;
        moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all_n";
        moduleData$c.settingBackground = "@color/KBaseColorInputBackground";
        moduleData$c.settingTextColor = "@color/KBaseColorSecondaryText";
        moduleData$c.selectText = `(${0}/${moduleData$c.currentPositions.length})`;
        moduleData$c.batchEnable = false;
    } else {
        if (selecConut == moduleData$c.fullPositions.length) {
            moduleData$c.currentSelectAllType = 1;
            moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all";
            moduleData$c.settingBackground = "@color/kColorMajorTheme100";
            moduleData$c.settingTextColor = "@color/KBaseTextColor";
        } else if (selecConut < moduleData$c.fullPositions.length) {
            moduleData$c.currentSelectAllType = 2;
            moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all_part";
            moduleData$c.settingBackground = "@color/kColorMajorTheme100";
            moduleData$c.settingTextColor = "@color/KBaseTextColor";
        }
        moduleData$c.batchEnable = true;
        moduleData$c.selectText = `(${selecConut}/${moduleData$c.currentPositions.length})`;
    }
}

moduleEvent$c.selectAll = async function() {
    if (moduleData$c.currentSelectAllType == 0) {
        moduleData$c.currentSelectAllType = 1;
        moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all";
        moduleData$c.settingBackground = "@color/kColorMajorTheme100";
        moduleData$c.settingTextColor = "@color/KBaseTextColor";
    } else if (moduleData$c.currentSelectAllType == 1) {
        moduleData$c.currentSelectAllType = 0;
        moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all_n";
        moduleData$c.settingBackground = "@color/KBaseColorInputBackground";
        moduleData$c.settingTextColor = "@color/KBaseColorSecondaryText";
    } else if (moduleData$c.currentSelectAllType == 2) {
        moduleData$c.currentSelectAllType = 1;
        moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all";
        moduleData$c.settingBackground = "@color/kColorMajorTheme100";
        moduleData$c.settingTextColor = "@color/KBaseTextColor";
    }
    let currentPositions = moduleData$c.currentPositions;
    if (moduleData$c.currentSelectAllType == 1) {
        var count = 0;
        for (let index = 0; index < currentPositions.length; index++) {
            var element = currentPositions[index];
            if (element.positions === true) {
                continue;
            }
            count += 1;
            element.isSelect = true;
            element.selectAllImage = "@drawable/icon_copytrading_currency_selection_all";
        }
        moduleData$c.selectText = `(${count}/${currentPositions.length})`;
        moduleData$c.batchEnable = true;
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings_leverage",
            button_name: "select_all_enable"
        });
    } else {
        for (let index = 0; index < currentPositions.length; index++) {
            var element = currentPositions[index];
            if (element.positions === true) {
                continue;
            }
            element.isSelect = false;
            element.selectAllImage = "@drawable/icon_copytrading_currency_selection_all_n";
        }
        moduleData$c.selectText = `(${0}/${currentPositions.length})`;
        moduleData$c.batchEnable = false;
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings_leverage",
            button_name: "select_all_disable"
        });
    }
    moduleData$c.currentPositions = currentPositions;
    if (moduleData$c.currentTab == 0) {
        moduleData$c.fullPositions = moduleData$c.currentPositions;
        moduleData$c.selectAllType1 = moduleData$c.currentSelectAllType;
    } else {
        moduleData$c.partPositions = moduleData$c.currentPositions;
        moduleData$c.selectAllType2 = moduleData$c.currentSelectAllType;
    }
    moduleData$c.currentPositionsLeverIndex = -1;
};

moduleEvent$c.selectItem = async function(index) {
    var item = moduleData$c.currentPositions[index];
    console.log(`leverSetting, selectItem=${JSON.stringify(item)}`);
    if (item.positions === true) {
        return;
    }
    if (item.isSelect === true) {
        item.isSelect = false;
        item.selectAllImage = "@drawable/icon_copytrading_currency_selection_all_n";
    } else {
        item.isSelect = true;
        item.selectAllImage = "@drawable/icon_copytrading_currency_selection_all";
    }
    var selecConut = 0;
    for (let index = 0; index < moduleData$c.currentPositions.length; index++) {
        let item = moduleData$c.currentPositions[index];
        if (item.isSelect === true) {
            selecConut += 1;
        }
    }
    if (selecConut == 0) {
        moduleData$c.currentSelectAllType = 0;
        moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all_n";
        moduleData$c.settingBackground = "@color/KBaseColorInputBackground";
        moduleData$c.settingTextColor = "@color/KBaseColorSecondaryText";
        moduleData$c.selectText = `(${0}/${moduleData$c.currentPositions.length})`;
        moduleData$c.batchEnable = false;
    } else {
        if (selecConut == moduleData$c.currentPositions.length) {
            moduleData$c.currentSelectAllType = 1;
            moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all";
            moduleData$c.settingBackground = "@color/kColorMajorTheme100";
            moduleData$c.settingTextColor = "@color/KBaseTextColor";
        } else if (selecConut < moduleData$c.currentPositions.length) {
            moduleData$c.currentSelectAllType = 2;
            moduleData$c.selectAllImage = "@drawable/icon_copytrading_currency_selection_all_part";
            moduleData$c.settingBackground = "@color/kColorMajorTheme100";
            moduleData$c.settingTextColor = "@color/KBaseTextColor";
        }
        moduleData$c.batchEnable = true;
        moduleData$c.selectText = `(${selecConut}/${moduleData$c.currentPositions.length})`;
    }
    if (moduleData$c.currentTab == 0) {
        moduleData$c.fullPositions = moduleData$c.currentPositions;
        moduleData$c.selectAllType1 = moduleData$c.currentSelectAllType;
    } else {
        moduleData$c.partPositions = moduleData$c.currentPositions;
        moduleData$c.selectAllType2 = moduleData$c.currentSelectAllType;
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings_leverage",
        button_name: "symbol"
    });
};

moduleEvent$c.settingConfirm = async function(index) {
    if (moduleData$c.batchEnable === false) {
        return;
    }
    moduleData$c.batchTitle = $i18n.$intercept.n_copy_trading_leversetting_lever_batch_tips(String(moduleData$c.batchMaxLever));
    moduleData$c.currentLeverText = `1X`;
    moduleData$c.maxLever = moduleData$c.batchMaxLever;
    var step = moduleData$c.maxLever / 5;
    moduleData$c.leverTitles1 = "1X";
    moduleData$c.leverTitles2 = `${step}X`;
    moduleData$c.leverTitles3 = `${step * 2}X`;
    moduleData$c.leverTitles4 = `${step * 3}X`;
    moduleData$c.leverTitles5 = `${step * 4}X`;
    moduleData$c.leverTitles6 = `${moduleData$c.maxLever}X`;
    moduleData$c.currentLever = 1;
    moduleData$c.currentLeverProgress = 1;
    moduleData$c.allSymbolPopShow = true;
    moduleData$c.currentPositionsLeverIndex = -1;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings_leverage",
        button_name: "set_leverage_bulk"
    });
};

moduleEvent$c.allSymbolPopDismiss = async function() {
    moduleData$c.allSymbolPopShow = false;
};

moduleEvent$c.editItem = async function(index) {
    var item = moduleData$c.currentPositions[index];
    if (item.positions === true) {
        return;
    }
    moduleData$c.currentPositionsLeverIndex = index;
    if (item.leverRateRange.length >= 2) {
        let leverRateMax = parseInt(item.leverRateRange[1]);
        moduleData$c.maxLever = leverRateMax;
    } else {
        moduleData$c.maxLever = 20;
    }
    moduleData$c.topTitle = $i18n.$intercept.n_copy_trading_leversetting_lever_tips("20");
    moduleData$c.currentSymbolLever = parseInt(item.myLever);
    moduleData$c.currentLeverText = `${moduleData$c.currentSymbolLever}X`;
    moduleData$c.currentLever = moduleData$c.currentSymbolLever;
    moduleData$c.currentSymbolTitle = item.symbolText;
    console.log(`maxLever = ${moduleData$c.maxLever}`);
    var step = parseInt(moduleData$c.maxLever / 5);
    moduleData$c.leverTitles1 = "1X";
    moduleData$c.leverTitles2 = `${step}X`;
    moduleData$c.leverTitles3 = `${step * 2}X`;
    moduleData$c.leverTitles4 = `${step * 3}X`;
    moduleData$c.leverTitles5 = `${step * 4}X`;
    moduleData$c.leverTitles6 = `${moduleData$c.maxLever}X`;
    moduleData$c.currentLeverProgress = moduleData$c.currentSymbolLever;
    moduleData$c.symbolLeverPopShow = true;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trade_settings_leverage",
        button_name: "my_leverage"
    });
};

function sliderValueChanged(progress) {
    var intProgress = parseInt(progress);
    if (intProgress <= 0) return;
    moduleData$c.currentLever = intProgress;
    moduleData$c.currentLeverText = `${intProgress}X`;
}

function increaseLever() {
    if (moduleData$c.currentLever < moduleData$c.maxLever) {
        moduleData$c.currentLever += 1;
        moduleData$c.currentLeverText = `${moduleData$c.currentLever}X`;
        moduleData$c.currentLeverProgress = moduleData$c.currentLever;
    }
}

function decreaseLever() {
    if (moduleData$c.currentLever > 1) {
        moduleData$c.currentLever -= 1;
        moduleData$c.currentLeverText = `${moduleData$c.currentLever}X`;
        moduleData$c.currentLeverProgress = moduleData$c.currentLever;
    }
}

function dismiss() {
    moduleData$c.popShow = false;
}

function close() {
    moduleData$c.allSymbolPopShow = false;
    moduleData$c.symbolLeverPopShow = false;
}

function showPop() {
    moduleData$c.alertTitle = $i18n.$intercept.n_copy_trading_leversetting_lever_batch_alert(String(moduleData$c.currentLever));
    moduleData$c.popShow = true;
}

async function confirm() {
    moduleData$c.popShow = false;
    moduleData$c.allSymbolPopShow = false;
    moduleData$c.symbolLeverPopShow = false;
    if (moduleData$c.currentPositionsLeverIndex != -1) {
        var item = moduleData$c.currentPositions[moduleData$c.currentPositionsLeverIndex];
        item.myLever = moduleData$c.currentLever;
        item.myLeverText = `${moduleData$c.currentLever}x`;
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings_leverage",
            button_name: `adjust_leverage_individually(${moduleData$c.currentLever})`
        });
    } else {
        var chooseLeverageList = [];
        if (moduleData$c.currentSelectAllType == 2) {
            for (let index = 0; index < moduleData$c.currentPositions.length; index++) {
                let item = moduleData$c.currentPositions[index];
                if (item.positions === false && item.isSelect === true) {
                    item.myLever = moduleData$c.currentLever;
                    item.myLeverText = `${moduleData$c.currentLever}x`;
                    chooseLeverageList.push(item);
                }
            }
        } else {
            for (let index = 0; index < moduleData$c.currentPositions.length; index++) {
                let item = moduleData$c.currentPositions[index];
                if (item.positions === true) {
                    continue;
                }
                item.myLever = moduleData$c.currentLever;
                item.myLeverText = `${moduleData$c.currentLever}x`;
                chooseLeverageList.push(item);
            }
        }
        var chooseLeverage = "";
        for (var i = 0; i < chooseLeverageList.length; i++) {
            var leverage = chooseLeverageList[i];
            chooseLeverage += `${leverage.symbolText}:${leverage.myLever}`;
            if (i < chooseLeverageList.length - 1) {
                chooseLeverage += ",";
            }
        }
        let button_name = `adjust_leverage_bulk(${chooseLeverage})`;
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trade_settings_leverage",
            button_name: button_name
        });
    }
    if (moduleData$c.currentTab == 0) {
        moduleData$c.fullPositions = moduleData$c.currentPositions;
    } else {
        moduleData$c.partPositions = moduleData$c.currentPositions;
    }
    updateLever();
    showToast($i18n.n_contract_side_mode_switch_side_mode_success);
}

async function updateLever() {
    var levers = [];
    for (let index = 0; index < moduleData$c.fullPositions.length; index++) {
        let item = moduleData$c.fullPositions[index];
        var lever = {
            symbol: item.symbol,
            lever: item.myLever,
            modeType: item.modeType,
            leverRateRange: item.leverRateRange
        };
        levers.push(lever);
    }
    for (let index = 0; index < moduleData$c.partPositions.length; index++) {
        let item = moduleData$c.partPositions[index];
        var lever = {
            symbol: item.symbol,
            lever: item.myLever,
            modeType: item.modeType,
            leverRateRange: item.leverRateRange
        };
        levers.push(lever);
    }
    updateSymbolLevers(levers);
    var cacheKey = "v1/copytrading/symbol-levers" + moduleData$c.userSign;
    await save("apiCache", cacheKey, levers);
    console.log(`leverSetting, levers=${JSON.stringify(levers)}`);
}

moduleEvent$c.sliderValueChanged = sliderValueChanged;

moduleEvent$c.increaseLever = increaseLever;

moduleEvent$c.decreaseLever = decreaseLever;

moduleEvent$c.sliderValueChanged = sliderValueChanged;

moduleEvent$c.increaseLever = increaseLever;

moduleEvent$c.decreaseLever = decreaseLever;

moduleEvent$c.dismiss = dismiss;

moduleEvent$c.showPop = showPop;

moduleEvent$c.confirm = confirm;

moduleEvent$c.close = close;

var _followerNumMin = null;

var _assetMax = null;

var _aumMax = null;

var _winRateMin = null;

var _hideFullTrader = false;

var listConfig = null;

var assetInitValue = 0;

var aumInitValue = 0;

async function start$b() {
    console.log(`sortPop-start`);
}

var tabsList = [ 0, 1, 2, 3, 4, 5 ];

function defaultData$b() {
    console.log(`sortPop-defaultData`);
    return {
        sortMenuList: [],
        selIndex: 0,
        selectedTitle: $i18n.n_copy_trading_trader_rank_comprehensive,
        traderAssetRange: null,
        traderAUMRange: null,
        winRateRange: null,
        followerNumRange: null,
        assetProgress: 0,
        scaleProgress: 0,
        assetMin: null,
        assetMax: null,
        aumMax: null,
        aumMin: null,
        fullHideSwitch: "",
        verticalSpace: 12,
        winRateViewHeight: 0,
        winRateCellHeight: "36",
        winRateColumn: 2,
        winRateLastIndex: null,
        followLastIndex: null,
        followViewHeight: 0,
        followCellHeight: "36",
        followColumn: 2,
        auMTitle: `${$i18n.n_copytrading_AUM}(USDT)`,
        assetTitle: `${$i18n.n_copytrading_trader_asset}(USDT)`
    };
}

const {moduleData: moduleData$b, moduleEvent: moduleEvent$b} = moduleDefine("sortPop", start$b, defaultData$b);

async function requestTabs() {
    listConfig = await sendRequest$2("v1/copytrading/get-trader-rank-config", null);
    if (listConfig.rankTypeSort != null || listConfig.rankTypeSort != undefined) {
        tabsList = listConfig.rankTypeSort;
        setupRankListType(listConfig.rankTypeSort);
    }
    moduleData$b.traderAUMRange = listConfig.traderAUMRange;
    moduleData$b.traderAssetRange = listConfig.traderAssetRange;
    moduleData$b.assetMin = listConfig.traderAssetRange[0].toString();
    moduleData$b.assetMax = listConfig.traderAssetRange[1].toString();
    moduleData$b.aumMin = listConfig.traderAUMRange[0].toString();
    moduleData$b.aumMax = listConfig.traderAUMRange[1].toString();
    setupWinRateRangeAndFollowerNumRange(listConfig);
    console.log(`sortPop-requestTabs==${listConfig.rankTypeSort}`);
    setupFullHideSwitch();
    calculateFollowViewHeight();
    calculateWinRateViewHeight();
    setupPopTabs(tabsList);
}

function setupWinRateRangeAndFollowerNumRange(listConfig) {
    var winRates = [];
    listConfig.winRateRange.forEach((function(rate, index) {
        var item = {};
        item.cellType = "1";
        item.index = index;
        item.rate = rate;
        item.text = `≥${rate * 100}%`;
        item.background = "@color/KBaseColorInputBackground";
        item.borderWidth = "0";
        winRates.push(item);
    }));
    var follows = [];
    listConfig.followerNumRange.forEach((function(num, index) {
        var item = {};
        item.cellType = "1";
        item.index = index;
        item.followNum = num;
        item.text = $i18n.$intercept.n_copytrading_filter_follow_number(String(num));
        item.background = "@color/KBaseColorInputBackground";
        item.borderWidth = "0";
        follows.push(item);
    }));
    moduleData$b.winRateRange = winRates;
    moduleData$b.followerNumRange = follows;
}

function setupPopTabs(tabs) {
    var sortMenuList = [];
    tabs.forEach(((tab, index, tabs) => {
        var item = {};
        item.type = "1";
        switch (index) {
          case 0:
            item.title = $i18n.n_copy_trading_trader_rank_comprehensive;
            break;

          case 1:
            item.title = $i18n.n_copy_trading_yield;
            break;

          case 2:
            item.title = $i18n.n_copy_trading_profit;
            break;

          case 3:
            item.title = $i18n.n_copytrading_follow_total_profit;
            break;

          case 4:
            item.title = $i18n.n_copytrading_follow_number;
            break;

          case 5:
            item.title = $i18n.n_copytrading_new_deal_maker;
            break;
        }
        item.index = index;
        if (index == 0) {
            item.textColor = "@color/kColorMajorTheme100";
            item.selImageVisibility = "visible";
            item.selected = "true";
        } else {
            item.textColor = "@color/kColorSecondaryButtonText";
            item.selImageVisibility = "gone";
            item.selected = "false";
        }
        item.template = "trader_list";
        item.module = "traderListData";
        sortMenuList.push(item);
    }));
    moduleData$b.sortMenuList = sortMenuList;
    moduleData$b.tabIndex = 0;
    onSelectedIndex(moduleData$b.tabIndex);
    moduleData$b.tabInfo = JSON.stringify({
        tabs: sortMenuList,
        rankTypeList: tabsList
    });
}

function showSortMenuPop() {
    console.log(`sortPop-showSortMenuPop`);
    moduleData$b.sortMenuShow = "true";
}

async function showFilterMenuPop() {
    console.log(`sortPop-showFilterMenuPop`);
    moduleData$b.filterMenuShow = "true";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: "filter"
    });
}

function clickedFilterClose() {
    console.log(`sortPop-clickedClose`);
    moduleData$b.filterMenuShow = "false";
}

function clickedFilterDone() {
    console.log(`sortPop-clickedClose`);
    moduleData$b.filterMenuShow = "false";
}

async function clickedMenuItem(index) {
    if (index == moduleData$b.selIndex) {
        return;
    }
    var lastItem = moduleData$b.sortMenuList[moduleData$b.selIndex];
    lastItem.textColor = "@color/kColorSecondaryButtonText";
    lastItem.selImageVisibility = "gone";
    lastItem.selected = "false";
    moduleData$b.selIndex = index;
    moduleData$b.tabIndex = moduleData$b.selIndex;
    onSelectedIndex(moduleData$b.tabIndex);
    var selItem = moduleData$b.sortMenuList[moduleData$b.selIndex];
    selItem.textColor = "@color/kColorMajorTheme100";
    selItem.selImageVisibility = "visible";
    selItem.selected = "true";
    moduleData$b.selectedTitle = moduleData$b.sortMenuList[moduleData$b.selIndex].title;
    console.log(`index==${moduleData$b.selIndex},title==${moduleData$b.sortMenuList[moduleData$b.selIndex].title}`);
    moduleData$b.sortMenuShow = "false";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: "ranking"
    });
}

function clickedCancel() {
    moduleData$b.sortMenuShow = "false";
    console.log(`clickedCancel`);
}

function setupFullHideSwitch() {
    moduleData$b.fullHideSwitch = _hideFullTrader ? "@drawable/edge_engine_common_switch_open" : "@drawable/edge_engine_common_switch_close";
}

function scaleSliderValueChanged(value) {
    console.log(`tl -- scaleSliderValueChanged==${value}`);
    if (value > 0) {
        assetInitValue = value;
    }
    if (assetInitValue != 0) {
        _aumMax = value;
    } else {
        _aumMax = null;
    }
}

function assetSliderValueChanged(value) {
    console.log(`tl -- assetSliderValueChanged==${value}`);
    if (value > 0) {
        aumInitValue = value;
    }
    if (aumInitValue != 0) {
        _assetMax = value;
    } else {
        _assetMax = null;
    }
}

async function winRateItemSelected(index) {
    var idx = parseInt(index);
    if (moduleData$b.winRateLastIndex != null && moduleData$b.winRateLastIndex != idx) {
        resetWinRateItem();
    }
    moduleData$b.winRateLastIndex = idx;
    var selItem = moduleData$b.winRateRange[moduleData$b.winRateLastIndex];
    selItem.background = "@color/kColorMajorTheme006";
    selItem.borderWidth = "1";
    _winRateMin = selItem.rate;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: "win_rate"
    });
}

function resetWinRateItem() {
    var lastItem = moduleData$b.winRateRange[moduleData$b.winRateLastIndex];
    lastItem.background = "@color/KBaseColorInputBackground";
    lastItem.borderWidth = "0";
}

function calculateWinRateViewHeight() {
    var column = -1;
    if (moduleData$b.winRateRange.length > 0) {
        column = moduleData$b.winRateRange.length % moduleData$b.winRateColumn;
        if (column > 0) {
            column = Math.floor(moduleData$b.winRateRange.length / moduleData$b.winRateColumn) + 1;
        } else {
            column = Math.floor(moduleData$b.winRateRange.length / moduleData$b.winRateColumn);
        }
        moduleData$b.winRateViewHeight = column * moduleData$b.winRateCellHeight + (column - 1) * moduleData$b.verticalSpace;
    }
}

function calculateFollowViewHeight() {
    var column = -1;
    if (moduleData$b.followerNumRange.length > 0) {
        column = moduleData$b.followerNumRange.length % moduleData$b.followColumn;
        if (column > 0) {
            column = Math.floor(moduleData$b.followerNumRange.length / moduleData$b.followColumn) + 1;
        } else {
            column = Math.floor(moduleData$b.followerNumRange.length / moduleData$b.followColumn);
        }
        moduleData$b.followViewHeight = column * moduleData$b.followCellHeight + (column - 1) * moduleData$b.verticalSpace;
    }
}

async function followItemSelected(index) {
    var idx = parseInt(index);
    if (moduleData$b.followLastIndex != null && moduleData$b.followLastIndex != idx) {
        resetFollowItem();
    }
    moduleData$b.followLastIndex = idx;
    var selItem = moduleData$b.followerNumRange[moduleData$b.followLastIndex];
    selItem.background = "@color/kColorMajorTheme006";
    selItem.borderWidth = "1";
    _followerNumMin = parseInt(selItem.followNum);
    let button_name = `follower_number(${selItem.followNum})`;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: button_name
    });
}

function resetFollowItem() {
    var lastItem = moduleData$b.followerNumRange[moduleData$b.followLastIndex];
    lastItem.background = "@color/KBaseColorInputBackground";
    lastItem.borderWidth = "0";
}

function clickedClose() {
    moduleData$b.filterMenuShow = "false";
    console.log(`clickedCancel`);
}

async function clickedFullHideSwitch() {
    _hideFullTrader = !_hideFullTrader;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: _hideFullTrader ? "hide_full_enable" : "hide_full_disable"
    });
    setupFullHideSwitch();
}

async function clickedReset() {
    if (_hideFullTrader != false) {
        _hideFullTrader = false;
        setupFullHideSwitch();
    }
    if (moduleData$b.assetProgress != parseInt(moduleData$b.assetMin)) {
        moduleData$b.assetProgress = parseInt(moduleData$b.assetMin);
    }
    if (moduleData$b.scaleProgress != parseInt(moduleData$b.aumMin)) {
        moduleData$b.scaleProgress = parseInt(moduleData$b.aumMin);
    }
    assetInitValue = 0;
    aumInitValue = 0;
    _hideFullTrader = null;
    _followerNumMin = null;
    _assetMax = null;
    _aumMax = null;
    _winRateMin = null;
    setupRankListParams({});
    resetWinRateItem();
    resetFollowItem();
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: "reset"
    });
}

async function clickedDone() {
    var params = {};
    if (_hideFullTrader != null) {
        params.hideFullTrader = _hideFullTrader;
    }
    if (_followerNumMin != null) {
        params.followerNumMin = _followerNumMin;
    }
    if (_assetMax != null) {
        if (_assetMax == moduleData$b.assetMax) ; else {
            params.assetMin = moduleData$b.assetMin;
            params.assetMax = _assetMax;
        }
    }
    if (_aumMax != null) {
        if (_aumMax == moduleData$b.aumMax) ; else {
            params.aumMin = moduleData$b.aumMin;
            params.aumMax = _aumMax;
        }
    }
    if (_winRateMin != null) {
        params.winRateMin = _winRateMin;
    }
    setupRankListParams(params);
    requestTraderList$1(false);
    moduleData$b.filterMenuShow = "false";
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_home",
        button_name: "confirm"
    });
    sliderValueChangedAnalytics();
}

async function sliderValueChangedAnalytics() {
    if (parseInt(moduleData$b.assetMin) != moduleData$b.assetProgress) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_home",
            button_name: "trader_asset"
        });
    }
    if (parseInt(moduleData$b.aumMin) != moduleData$b.assetProgress) {
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_home",
            button_name: "aum"
        });
    }
}

moduleEvent$b.showSortMenuPop = showSortMenuPop;

moduleEvent$b.clickedMenuItem = clickedMenuItem;

moduleEvent$b.start = start$b;

moduleEvent$b.clickedCancel = clickedCancel;

moduleEvent$b.showFilterMenuPop = showFilterMenuPop;

moduleEvent$b.clickedFilterClose = clickedFilterClose;

moduleEvent$b.clickedFilterDone = clickedFilterDone;

moduleEvent$b.scaleSliderValueChanged = scaleSliderValueChanged;

moduleEvent$b.assetSliderValueChanged = assetSliderValueChanged;

moduleEvent$b.setupFullHideSwitch = setupFullHideSwitch;

moduleEvent$b.clickedDone = clickedDone;

moduleEvent$b.clickedReset = clickedReset;

moduleEvent$b.clickedFullHideSwitch = clickedFullHideSwitch;

moduleEvent$b.clickedClose = clickedClose;

moduleEvent$b.followItemSelected = followItemSelected;

moduleEvent$b.winRateItemSelected = winRateItemSelected;

moduleEvent$b.requestTabs = requestTabs;

var isFirstLoadTraderInfo = true;

var traderInfoRequestUserSign = "";

async function start$a() {
    saveTraderInfo({});
    isFirstLoadTraderInfo = true;
    moduleData$a.userSign = "";
    moduleData$a.traderInfo = {};
    moduleData$a.traderData = {};
    moduleData$a.commonTags = [];
    moduleData$a.copyStatus = "3";
    moduleData$a.introduction = "";
    moduleData$a.showIntroduction = "gone";
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_trader_details"
    });
    await uploadLog("COPYTRADING", "traderInfo start");
}

function defaultData$a() {
    return {
        userSign: "",
        traderInfo: {},
        traderData: {},
        commonTags: [],
        copyStatus: "3",
        maxLines: "2",
        arrowImage: "@drawable/edge_engine_copytrading_arrow_down",
        introduction: "",
        showIntroduction: "gone"
    };
}

const {moduleData: moduleData$a, moduleEvent: moduleEvent$a} = moduleDefine("traderInfo", start$a, defaultData$a);

moduleEvent$a.onCreate = async function(eventParams) {
    await uploadLog("COPYTRADING", `traderInfo onCreate: ${eventParams}`);
    console.log(`traderInfo---\x3e>> onCreate = ${eventParams}`);
    const params = JSON.parse(eventParams);
    traderInfoRequestUserSign = params.userSign;
    console.log(`traderInfo---\x3e>> onCreate userSign = ${traderInfoRequestUserSign}`);
    saveUserSign(traderInfoRequestUserSign);
    requestTraderInfo$1(traderInfoRequestUserSign);
};

moduleEvent$a.onResume = async function() {
    if (isFirstLoadTraderInfo) {
        isFirstLoadTraderInfo = false;
    } else {
        await requestTraderInfo$1(traderInfoRequestUserSign);
    }
};

async function requestTraderInfo$1(userSign) {
    moduleData$a.userSign = userSign;
    const traderInfo = await sendRequest$2("v1/copytrading/trader-info", {
        userSign: userSign
    });
    const traderData = await sendRequest$2("v1/copytrading/trader/trader-data", {
        userSign: userSign
    });
    try {
        if (!traderInfo || traderInfo == null) {
            return;
        }
        if (traderData.totalCopyUserNum == null) {
            showToast($i18n.n_copy_trading_trader_stop_order);
            setTimeout((function() {
                $nativeAPI.containerBack();
            }), 1500);
            return;
        }
        saveTraderInfo({
            copyStatus: traderInfo.copyStatus,
            imgUrl: traderInfo.imgUrl,
            followedUserSign: traderInfo.followedUserSign,
            full: traderInfo.full
        });
        if (traderInfo.copyStatus == 1) {
            moduleData$a.copyStatus = "0";
        } else if (traderInfo.full == 1) {
            moduleData$a.copyStatus = "1";
        } else if (commonData.isTrader) {
            moduleData$a.copyStatus = "2";
        } else {
            moduleData$a.copyStatus = "3";
        }
        moduleData$a.traderInfo = traderInfo;
        if (traderInfo.info != null && traderInfo.info != "undefined" && traderInfo.info.length > 0) {
            moduleData$a.info = traderInfo.info;
            moduleData$a.showInfo = "visible";
        }
        if (traderData != null) {
            traderDataProcessing(traderData);
            moduleData$a.traderData = traderData;
        }
        const tagMappings = traderInfo.tagMappings;
        if (!tagMappings || tagMappings == null || tagMappings.length == 0) {
            moduleData$a.showTraderTags = "gone";
        } else {
            var tagsArr = tagMappings.split(",");
            var tags = [];
            for (let i = 0; i < tagsArr.length; i++) {
                tags.push({
                    tag: tagsArr[i],
                    type: "normal",
                    isShowCell: "visible"
                });
            }
            moduleData$a.commonTags = tags;
            moduleData$a.showTraderTags = "visible";
        }
        moduleData$a.copyNum = `${traderInfo.copyUserNum}/${traderInfo.fullUserNum}`;
        moduleData$a.totalProfit = await formatDecimal(traderInfo.totalProfit, 2, true);
        moduleData$a.totalProfitTitle = `${$i18n.n_copy_trading_total_revenue}(USDT)`;
        moduleData$a.profitRate = `${format(traderInfo.profitRate * 100, 2)}%`;
        let profitColor = getUpDownColor();
        if (parseFloat(traderInfo.profitRate) >= 0) {
            profitColor = getUpDownColor();
        } else {
            profitColor = getUpDownColor(false);
        }
        moduleData$a.profitColor = profitColor;
        moduleData$a.nickName = `${traderInfo.nickName}`;
        if (traderInfo.info != null && traderInfo.info.length > 0) {
            moduleData$a.introduction = traderInfo.info;
            moduleData$a.showIntroduction = "visible";
        } else {
            moduleData$a.introduction = "";
            moduleData$a.showIntroduction = "gone";
        }
        moduleData$a.imgUrl = `${traderInfo.imgUrl}`;
        moduleData$a.copyOrderNum = $i18n.$intercept.n_person_number_unit(String(traderInfo.copyOrderNum));
        moduleData$a.winRate = `${format(traderInfo.winRate * 100, 2)}%`;
        moduleData$a.time = (new Date).Format("MM/dd/yyyy hh:mm");
        moduleData$a.tabInfo = `{"tabs":[{"title":"${$i18n.n_copytrading_orders_performance}","template":"ordersPerformance","module":"ordersPerformance","onAppear":"ordersPerformance.onAppear"},{"title":"${$i18n.n_copy_trading_trader_current_order}","template":"traderDetailOrder","module":"traderDetailOrder","onAppear":"traderDetailOrder.onAppear"},{"title":"${$i18n.n_copy_trading_histroy_order}","template":"traderDetailHistoryOrder","module":"traderDetailHistoryOrder","onAppear":"traderDetailHistoryOrder.onAppear"},{"title":"${$i18n.n_copy_trading_follower}","template":"traderDetailFollower","module":"traderDetailFollower","onAppear":"traderDetailFollower.onAppear"}],"actionBar":{"title":"${traderInfo.nickName}","icon":"${traderInfo.imgUrl}"}}`;
    } catch (e) {
        console.log(`traderInfo data error=${e}`);
    }
}

function traderDataProcessing(traderData) {
    try {
        traderData.upColor = getUpDownColor();
        traderData.downColor = getUpDownColor(false);
        traderData.totalCopyUserNum = `${parseInt(traderData.totalCopyUserNum)}`;
        traderData.copyNumStr = `${parseInt(traderData.copyNum)}`;
        if (isNaN(parseFloat(traderData.totalProfit))) {
            traderData.totalProfitColor = "@color/kColorSecondaryText";
            traderData.totalProfitStr = "--";
        } else if (parseFloat(traderData.totalProfit) >= 0) {
            traderData.totalProfitColor = getUpDownColor();
            traderData.totalProfitStr = `+${traderData.totalProfit}`;
        } else {
            traderData.totalProfitColor = getUpDownColor(false);
            traderData.totalProfitStr = `${traderData.totalProfit}`;
        }
        if (isNaN(parseFloat(traderData.copyTotalProfit))) {
            traderData.copyTotalProfitColor = "@color/kColorSecondaryText";
            traderData.copyTotalProfitStr = "--";
        } else if (parseFloat(traderData.copyTotalProfit) >= 0) {
            traderData.copyTotalProfitColor = getUpDownColor();
            traderData.copyTotalProfitStr = `+${traderData.copyTotalProfit}`;
        } else {
            traderData.copyTotalProfitColor = getUpDownColor(false);
            traderData.copyTotalProfitStr = `${traderData.copyTotalProfit}`;
        }
        traderData.apyStr = percentProcessing(traderData.apy);
        traderData.winRateStr = percentProcessing(traderData.winRate);
        traderData.mddStr = percentProcessing(traderData.mdd);
        traderData.aumStr = `$${traderData.aum}`;
        traderData.takeRateStr = percentProcessing(traderData.takeRate);
        if (traderData.profitLost == null || traderData.profitLost.length == 0) {
            traderData.profitLostStr = "--";
        } else {
            traderData.profitLostStr = `${traderData.profitLost[0]}:${traderData.profitLost[1]}`;
        }
        let win = parseInt(traderData.winNum);
        let loss = parseInt(traderData.lossNum);
        traderData.showOneWinLoss = "gone";
        traderData.showTwoWinLoss = "visible";
        if (win == 0 && loss == 0) {
            traderData.winNWeight = 1;
            traderData.lossNWeight = 1;
        } else {
            if (win == 0) {
                traderData.showOneWinLoss = "visible";
                traderData.showTwoWinLoss = "gone";
                traderData.winLossBg = "#E94359";
            } else if (loss == 0) {
                traderData.showOneWinLoss = "visible";
                traderData.showTwoWinLoss = "gone";
                traderData.winLossBg = "#00A171";
            }
            traderData.winNWeight = `${parseInt(win)}`;
            traderData.lossNWeight = `${parseInt(loss)}`;
        }
        traderData.winN = `${parseInt(win)}`;
        traderData.lossN = `${parseInt(loss)}`;
        traderData.avgProfitStr = `${traderData.avgProfit[0]}(${percentProcessing(traderData.avgProfit[1])})`;
        traderData.avgLostStr = `${traderData.avgLost[0]}(${percentProcessing(traderData.avgLost[1])})`;
        if (isNaN(parseFloat(traderData.avgHoldTime))) {
            traderData.avgHoldTimeStr = "--";
        } else {
            let holdTime = parseFloat(traderData.avgHoldTime);
            if (holdTime < 6e4) {
                traderData.avgHoldTimeStr = `${parseInt(holdTime / 1e3)}${$i18n.n_exchange_timing_second}`;
            } else if (holdTime < 36e5) {
                traderData.avgHoldTimeStr = `${(holdTime / 6e4).toFixed(2)}${$i18n.n_minute}`;
            } else if (holdTime < 24 * 36e5) {
                traderData.avgHoldTimeStr = `${(holdTime / 36e5).toFixed(2)}${$i18n.n_hour}`;
            } else {
                traderData.avgHoldTimeStr = `${(holdTime / (24 * 36e5)).toFixed(2)}${$i18n.n_day}`;
            }
        }
        traderData.weekTradeNumStr = `${traderData.weekTradeNum}${$i18n.n_otc_merchant_info_count}`;
        traderData.daysOfEntry = `${Math.ceil((parseInt(traderData.ts) - parseInt(traderData.firstSignUp)) / 1e3 / 60 / 60 / 24 + 1)}${$i18n.n_day}`;
        if (traderData.symbolRates == null || traderData.symbolRates.length == 0) {
            traderData.likeSymbol = "--";
        } else {
            traderData.likeSymbol = JSON.parse(traderData.symbolRates[0]).s.replace("-", "");
        }
        traderData.lastTradeStr = `${new Date(traderData.lastTrade).Format("yyyy-MM-dd hh:mm:ss")}`;
    } catch (e) {
        console.log(`traderInfo traderDataProcessing error = ${e}`);
    }
}

function percentProcessing(numStr) {
    let num = parseFloat(numStr);
    if (isNaN(num)) {
        return "--";
    }
    return String((num * 100).toFixed(2)) + "%";
}

moduleEvent$a.onDestroy = async function() {
    moduleData$a.traderInfo = {};
    moduleData$a.traderData = {};
    moduleData$a.commonTags = [];
    moduleData$a.introduction = "";
    moduleData$a.showIntroduction = "gone";
};

async function onAppear$5() {
    console.log("traderInfo onAppear");
}

async function moduleAppear$3() {
    console.log("traderInfo moduleAppear");
}

moduleEvent$a.updownTapped = async function() {
    if (moduleData$a.maxLines == "2") {
        moduleData$a.maxLines = "0";
        moduleData$a.arrowImage = "@drawable/edge_engine_copytrading_arrow_up";
    } else {
        moduleData$a.maxLines = "2";
        moduleData$a.arrowImage = "@drawable/edge_engine_copytrading_arrow_down";
    }
};

moduleEvent$a.shareAction = async function() {
    let url = `holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/Contract/CopyTrading_TraderInfo?userSign=${traderInfoRequestUserSign}`;
    $nativeAPI.shareAbility({
        type: "renderSync",
        template: "trader_detail_share",
        waitTime: 2,
        jumpUrl: url
    });
    await uploadLog("COPYTRADING", `交易员详情分享链接url=${url}`);
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "share"
    });
};

moduleEvent$a.toCopy = function(isEdit) {
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: isEdit === "true" ? "edit" : "follow"
    });
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=copySetting&navConfig=full&userSign=${getUserSign()}&imgUrl=${getTraderInfo$1().imgUrl}&isEdit=${isEdit}`);
};

moduleEvent$a.showAllIntro = function() {
    if (moduleData$a.maxLines == "2") {
        moduleData$a.maxLines = "0";
        moduleData$a.arrowImage = "@drawable/edge_engine_copytrading_arrow_up";
    } else {
        moduleData$a.maxLines = "2";
        moduleData$a.arrowImage = "@drawable/edge_engine_copytrading_arrow_down";
    }
};

moduleEvent$a.onAppear = onAppear$5;

moduleEvent$a.moduleAppear = moduleAppear$3;

var filterCallBack;

var normalColor = "@color/kColorPrimaryText";

var selColor = "@color/kColorMajorTheme100";

async function start$9() {}

function defaultData$9() {
    return {
        currentIndex: 0,
        popFilterContent: [],
        popShow: "false"
    };
}

const {moduleData: moduleData$9, moduleEvent: moduleEvent$9} = moduleDefine("timelineFilter", start$9, defaultData$9);

function showDaysFilter(currentPeriod, callBack) {
    console.log(`dailyRevenueFilterClick - showDaysFilter`);
    filterCallBack = callBack;
    let dataList = [ {
        period: 1,
        title: $i18n.n_order_filter_nearly_a_week,
        type: "normal",
        index: 0
    }, {
        period: 2,
        title: $i18n.n_order_filter_nearly_a_month,
        type: "normal",
        index: 1
    }, {
        period: 3,
        title: $i18n.n_order_filter_nearly_three_month,
        type: "normal",
        index: 2
    } ];
    dataProcessing$2(dataList, currentPeriod);
    moduleData$9.popFilterContent = dataList;
    moduleData$9.popShow = "true";
    console.log(`dailyRevenueFilterClick - popFilterContent = ${JSON.stringify(moduleData$9.popFilterContent.rawArray())}`);
    console.log(`dailyRevenueFilterClick - showDaysFilter end`);
}

function showAllTimeFilter(currentPeriod, callBack) {
    filterCallBack = callBack;
    let dataList = [ {
        period: 0,
        title: $i18n.n_kline_one_day,
        type: "normal",
        index: 0
    }, {
        period: 1,
        title: $i18n.n_order_filter_nearly_a_week,
        type: "normal",
        index: 1
    }, {
        period: 2,
        title: $i18n.n_order_filter_nearly_a_month,
        type: "normal",
        index: 2
    }, {
        period: 3,
        title: $i18n.n_order_filter_nearly_three_month,
        type: "normal",
        index: 3
    } ];
    dataProcessing$2(dataList, currentPeriod);
    moduleData$9.popFilterContent = dataList;
    moduleData$9.popShow = "true";
}

function dataProcessing$2(dataList, currentPeriod) {
    for (var i = 0; i < dataList.length; i++) {
        let data = dataList[i];
        if (data.period == currentPeriod) {
            data.textColor = selColor;
            data.showChoose = "visible";
        } else {
            data.textColor = normalColor;
            data.showChoose = "gone";
        }
    }
}

function onItemClick(index) {
    console.log(`dailyRevenueFilterClick - onItemClick ${index}, data = ${JSON.stringify(moduleData$9.popFilterContent[index].rawObject())}`);
    filterCallBack(moduleData$9.popFilterContent[index].rawObject());
    moduleData$9.popShow = "false";
}

moduleEvent$9.onItemClick = onItemClick;

moduleEvent$9.popDismiss = function() {
    moduleData$9.popShow = "false";
};

async function start$8() {
    moduleData$8.isShowMore = false;
    moduleData$8.showMore = "gone";
    moduleData$8.moreText = $i18n.n_kline_more;
    moduleData$8.arrow = "@drawable/edge_engine_copytrading_arrow_down";
    moduleData$8.yieldFilterPeriod = 2;
    moduleData$8.yieldCount = 6;
    moduleData$8.yieldFilterText = $i18n.n_order_filter_nearly_a_month;
    moduleData$8.yieldList = [];
    moduleData$8.dailyRevenueFilterPeriod = 2;
    moduleData$8.dailyRevenueCount = 6;
    moduleData$8.dailyRevenueFilterText = $i18n.n_order_filter_nearly_a_month;
    moduleData$8.dailyRevenueList = [];
    moduleData$8.copyBtnBg = "@color/kColorPrimarySeparator";
    moduleData$8.copyBtnTextColor = "@color/kColorThreeLevelText";
    moduleData$8.copyBtnText = $i18n.n_asset_contract_to_copy_trading;
    requestData$1();
}

function defaultData$8() {
    return {
        isShowMore: false,
        showMore: "gone",
        moreText: $i18n.n_kline_more,
        arrow: "@drawable/edge_engine_arrow_down",
        yieldFilterPeriod: 2,
        yieldCount: 6,
        yieldFilterText: $i18n.n_order_filter_nearly_a_month,
        dailyRevenueFilterPeriod: 2,
        dailyRevenueCount: 6,
        dailyRevenueFilterText: $i18n.n_order_filter_nearly_a_month,
        dailyRevenueList: [],
        copyBtnBg: "@color/kColorPrimarySeparator",
        copyBtnTextColor: "@color/kColorThreeLevelText",
        copyBtnText: $i18n.n_asset_contract_to_copy_trading
    };
}

const {moduleData: moduleData$8, moduleEvent: moduleEvent$8} = moduleDefine("ordersPerformance", start$8, defaultData$8);

async function requestData$1() {
    requestYield$1();
    requestDailyRevenue$1();
}

async function requestYield$1() {
    var params = {
        userSign: getUserSign(),
        period: moduleData$8.yieldFilterPeriod
    };
    const yieldData = await sendRequest$2("v1/copytrading/trader/trader-profit-rate-chart", params);
    console.log(`dataProcess requestYield data = ${JSON.stringify(yieldData)}`);
    moduleData$8.yieldList = JSON.stringify(dataProcessing$1(yieldData, moduleData$8.yieldFilterPeriod == 0, true));
}

async function requestDailyRevenue$1() {
    var params = {
        userSign: getUserSign(),
        period: moduleData$8.dailyRevenueFilterPeriod
    };
    const dailyRevenueData = await sendRequest$2("v1/copytrading/trader/trader-profit-gross-chart", params);
    console.log(`dataProcess requestData data = ${JSON.stringify(dailyRevenueData)}`);
    moduleData$8.dailyRevenueList = JSON.stringify(dataProcessing$1(dailyRevenueData));
}

function dataProcessing$1(data, isHour = false, isPercent = false) {
    if (!data || data == null || data.x == null || data.x.length == 0) {
        return;
    }
    let list = [];
    for (var i = 0; i < data.x.length; i++) {
        let date = new Date(parseInt(data.x[i]));
        let xStr = date.Format("MM-dd");
        if (isHour) {
            xStr = date.Format("hh:mm");
        }
        let yStr = data.y[i];
        if (isPercent) {
            yStr = `${(parseFloat(yStr) * 100).toFixed(1)}`;
        }
        list.push({
            x: xStr,
            y: yStr
        });
    }
    return list;
}

async function onAppear$4() {
    console.log("ordersPerformance onAppear");
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "performance"
    });
    requestData$1();
}

async function moduleAppear$2() {
    console.log("ordersPerformance moduleAppear");
}

moduleEvent$8.showMore = function() {
    if (moduleData$8.isShowMore) {
        analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_details",
            button_name: "collapse"
        });
        moduleData$8.showMore = "gone";
        moduleData$8.moreText = $i18n.n_kline_more;
        moduleData$8.arrow = "@drawable/edge_engine_copytrading_arrow_down";
    } else {
        analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_details",
            button_name: "more"
        });
        moduleData$8.showMore = "visible";
        moduleData$8.moreText = $i18n.n_content_collapse;
        moduleData$8.arrow = "@drawable/edge_engine_copytrading_arrow_up";
    }
    moduleData$8.isShowMore = !moduleData$8.isShowMore;
};

moduleEvent$8.yieldFilterClick = function() {
    showAllTimeFilter(moduleData$8.yieldFilterPeriod, (function(chooseItem) {
        moduleData$8.yieldFilterPeriod = chooseItem.period;
        moduleData$8.yieldFilterText = chooseItem.title;
        analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_details",
            button_name: chooseItem.period == 0 ? "roi_24hours" : chooseItem.period == 1 ? "roi_7days" : chooseItem.period == 2 ? "roi_30days" : "roi_90days"
        });
        if (chooseItem.period == 1) {
            moduleData$8.yieldCount = 7;
        } else {
            moduleData$8.yieldCount = 6;
        }
        requestYield$1();
    }));
};

moduleEvent$8.dailyRevenueFilterClick = function() {
    console.log(`dailyRevenueFilterClick`);
    showDaysFilter(moduleData$8.dailyRevenueFilterPeriod, (function(chooseItem) {
        moduleData$8.dailyRevenueFilterPeriod = chooseItem.period;
        moduleData$8.dailyRevenueFilterText = chooseItem.title;
        analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_details",
            button_name: chooseItem.period == 1 ? "daily_pnl_7days" : chooseItem.period == 2 ? "daily_pnl_30days" : "daily_pnl_90days"
        });
        if (chooseItem.period == 1) {
            moduleData$8.dailyRevenueCount = 7;
        } else {
            moduleData$8.dailyRevenueCount = 6;
        }
        requestDailyRevenue$1();
    }));
};

moduleEvent$8.showTotalProfitsTips = function() {
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "total_pnl_assistance"
    });
    let content = `${$i18n.n_copy_trading_total_profits_tips_one}\n${$i18n.n_copy_trading_total_profits_tips_two}\n3.${$i18n.n_copytrading_data_update_tips}`;
    popUpContentOfOneButton($i18n.copy_trading_total_profits, content);
};

moduleEvent$8.showYieldTips = function() {
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "roi_assistance"
    });
    let content = `${$i18n.n_copy_trading_yield_tips_one}\n${$i18n.n_copy_trading_yield_tips_two}\n3.${$i18n.n_copytrading_data_update_tips}`;
    popUpContentOfOneButton($i18n.n_copy_trading_yield, content);
};

moduleEvent$8.showDailyRevenueTips = function() {
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "daily_pnl_assistance"
    });
    let content = `${$i18n.n_copy_trading_daily_revenue_tips_one}\n${$i18n.n_copy_trading_yield_tips_two}\n3.${$i18n.n_copytrading_data_update_tips}`;
    popUpContentOfOneButton($i18n.n_copytrading_daily_revenue, content);
};

moduleEvent$8.onAppear = onAppear$4;

moduleEvent$8.moduleAppear = moduleAppear$2;

async function start$7() {
    moduleData$7.isShowMore = false;
    moduleData$7.showMore = "gone";
    moduleData$7.moreText = $i18n.n_kline_more;
    moduleData$7.arrow = "@drawable/edge_engine_copytrading_arrow_down";
    moduleData$7.yieldFilterPeriod = 2;
    moduleData$7.yieldCount = 6;
    moduleData$7.yieldFilterText = $i18n.n_order_filter_nearly_a_month;
    moduleData$7.yieldList = [];
    moduleData$7.dailyRevenueFilterPeriod = 2;
    moduleData$7.dailyRevenueCount = 6;
    moduleData$7.dailyRevenueFilterText = $i18n.n_order_filter_nearly_a_month;
    moduleData$7.dailyRevenueList = [];
    moduleData$7.copyBtnBg = "@color/kColorPrimarySeparator";
    moduleData$7.copyBtnTextColor = "@color/kColorThreeLevelText";
    moduleData$7.copyBtnText = $i18n.n_asset_contract_to_copy_trading;
    requestData();
}

function defaultData$7() {
    return {
        isShowMore: false,
        showMore: "gone",
        moreText: $i18n.n_kline_more,
        arrow: "@drawable/edge_engine_arrow_down",
        yieldFilterPeriod: 2,
        yieldCount: 6,
        yieldFilterText: $i18n.n_order_filter_nearly_a_month,
        dailyRevenueFilterPeriod: 2,
        dailyRevenueCount: 6,
        dailyRevenueFilterText: $i18n.n_order_filter_nearly_a_month,
        dailyRevenueList: [],
        copyBtnBg: "@color/kColorPrimarySeparator",
        copyBtnTextColor: "@color/kColorThreeLevelText",
        copyBtnText: $i18n.n_asset_contract_to_copy_trading
    };
}

const {moduleData: moduleData$7, moduleEvent: moduleEvent$7} = moduleDefine("myOrdersPerformance", start$7, defaultData$7);

async function requestData() {
    requestYield();
    requestDailyRevenue();
}

async function requestYield() {
    var params = {
        userSign: commonData.userSign,
        period: moduleData$7.yieldFilterPeriod
    };
    const yieldData = await sendRequest$2("v1/copytrading/trader/trader-profit-rate-chart", params);
    console.log(`dataProcess requestYield data = ${JSON.stringify(yieldData)}`);
    moduleData$7.yieldList = JSON.stringify(dataProcessing(yieldData, moduleData$7.yieldFilterPeriod == 0, true));
}

async function requestDailyRevenue() {
    var params = {
        userSign: commonData.userSign,
        period: moduleData$7.dailyRevenueFilterPeriod
    };
    const dailyRevenueData = await sendRequest$2("v1/copytrading/trader/trader-profit-gross-chart", params);
    console.log(`dataProcess requestData data = ${JSON.stringify(dailyRevenueData)}`);
    moduleData$7.dailyRevenueList = JSON.stringify(dataProcessing(dailyRevenueData));
}

function dataProcessing(data, isHour = false, isPercent = false) {
    if (!data || data == null || data.x == null || data.x.length == 0) {
        return;
    }
    let list = [];
    for (var i = 0; i < data.x.length; i++) {
        let date = new Date(parseInt(data.x[i]));
        let xStr = date.Format("MM-dd");
        if (isHour) {
            xStr = date.Format("hh:mm");
        }
        let yStr = data.y[i];
        if (isPercent) {
            yStr = `${(parseFloat(yStr) * 100).toFixed(1)}`;
        }
        list.push({
            x: xStr,
            y: yStr
        });
    }
    return list;
}

async function onAppear$3() {
    console.log("ordersPerformance onAppear");
    requestData();
}

async function moduleAppear$1() {
    console.log("ordersPerformance moduleAppear");
}

moduleEvent$7.showMore = function() {
    if (moduleData$7.isShowMore) {
        moduleData$7.showMore = "gone";
        moduleData$7.moreText = $i18n.n_kline_more;
        moduleData$7.arrow = "@drawable/edge_engine_copytrading_arrow_down";
    } else {
        moduleData$7.showMore = "visible";
        moduleData$7.moreText = $i18n.n_content_collapse;
        moduleData$7.arrow = "@drawable/edge_engine_copytrading_arrow_up";
    }
    moduleData$7.isShowMore = !moduleData$7.isShowMore;
};

moduleEvent$7.yieldFilterClick = function() {
    showAllTimeFilter(moduleData$7.yieldFilterPeriod, (function(chooseItem) {
        moduleData$7.yieldFilterPeriod = chooseItem.period;
        moduleData$7.yieldFilterText = chooseItem.title;
        if (chooseItem.period == 1) {
            moduleData$7.yieldCount = 7;
        } else {
            moduleData$7.yieldCount = 6;
        }
        requestYield();
    }));
};

moduleEvent$7.dailyRevenueFilterClick = function() {
    console.log(`dailyRevenueFilterClick`);
    showDaysFilter(moduleData$7.dailyRevenueFilterPeriod, (function(chooseItem) {
        moduleData$7.dailyRevenueFilterPeriod = chooseItem.period;
        moduleData$7.dailyRevenueFilterText = chooseItem.title;
        if (chooseItem.period == 1) {
            moduleData$7.dailyRevenueCount = 7;
        } else {
            moduleData$7.dailyRevenueCount = 6;
        }
        requestDailyRevenue();
    }));
};

moduleEvent$7.showTotalProfitsTips = function() {
    let content = `${$i18n.n_copy_trading_total_profits_tips_one}\n${$i18n.n_copy_trading_total_profits_tips_two}\n3.${$i18n.n_copytrading_data_update_tips}`;
    popUpContentOfOneButton($i18n.copy_trading_total_profits, content);
};

moduleEvent$7.showYieldTips = function() {
    let content = `${$i18n.n_copy_trading_yield_tips_one}\n${$i18n.n_copy_trading_yield_tips_two}\n3.${$i18n.n_copytrading_data_update_tips}`;
    popUpContentOfOneButton($i18n.n_copy_trading_yield, content);
};

moduleEvent$7.showDailyRevenueTips = function() {
    let content = `${$i18n.n_copy_trading_daily_revenue_tips_one}\n${$i18n.n_copy_trading_total_profits_tips_two}\n3.${$i18n.n_copytrading_data_update_tips}`;
    popUpContentOfOneButton($i18n.n_copytrading_daily_revenue, content);
};

moduleEvent$7.onAppear = onAppear$3;

moduleEvent$7.moduleAppear = moduleAppear$1;

async function start$6() {
    console.log(`followSetting-start`);
}

function defaultData$6() {
    return {
        navConfig: "",
        myLabel: "",
        nickname: "",
        fullUserNum: "",
        takeRate: 0,
        openStatus: "gone",
        itemVisible: "visible",
        maximum: 200,
        labels: [],
        labelString: "",
        selectionTags: [],
        distributionSelectionPopShow: false,
        selectedRadioIndex: 0,
        distributionSelectionText: "",
        checkAgreement: false,
        selectedRadio: 0,
        copyUserNum: 0,
        introduction: ""
    };
}

const {moduleData: moduleData$6, moduleEvent: moduleEvent$6} = moduleDefine("followSetting", start$6, defaultData$6);

moduleEvent$6.onCreate = async function(eventParams) {
    const params = JSON.parse(eventParams);
    const userSign = params.userSign;
    moduleData$6.userSign = userSign;
    moduleData$6.navConfig = `{"left":{"icon":"edge_engine_top_bar_back_normal","action":{"type":"back","parameter":""},"text":null},"titleKey":"n_copy_trading_followsetting_title"}`;
    requestTraderInfo();
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_trader_me_settings"
    });
};

async function requestTraderInfo() {
    showLoading(true);
    let traderInfo = await sendRequest$2("v1/copytrading/trader-info", null);
    console.log(`followSetting, requestTraderInfo=${JSON.stringify(traderInfo)}`);
    showLoading(false);
    var tags = [];
    if (traderInfo != null) {
        moduleData$6.nickname = traderInfo.nickName;
        moduleData$6.fullUserNum = String(traderInfo.fullUserNum);
        moduleData$6.takeRate = parseFloat(traderInfo.takeRate);
        moduleData$6.copyUserNum = traderInfo.copyUserNum;
        if (traderInfo.info != null && traderInfo.info != "undefined") {
            moduleData$6.introduction = traderInfo.info;
            commonData.introduction = traderInfo.info;
        } else {
            commonData.introduction = "";
        }
        setupNumberList();
        if (traderInfo.tags != null) {
            tags = traderInfo.tags.split(",");
        }
        if (traderInfo.tagMappings != null) {
            moduleData$6.labelString = replaceAll(traderInfo.tagMappings, ",", "、");
        }
        if (traderInfo.isTrader === 1) {
            moduleData$6.openStatus = "visible";
            moduleData$6.itemVisible = "gone";
        }
    }
    let commonTags = await sendRequest$2("v1/copytrading/common-tags", null);
    console.log(`followSetting, requestCommonTags=${JSON.stringify(commonTags)}`);
    var labels = [];
    if (commonTags != null && commonTags.length > 0) {
        for (let index = 0; index < commonTags.length; index++) {
            let item = commonTags[index];
            if (tags.length > 0 && tags.indexOf(item.tag) >= 0) {
                let label = {
                    borderWidth: .5,
                    index: index,
                    tag: item.tag,
                    cellType: "1",
                    background: "@color/kColorMajorTheme006",
                    textColor: "@color/kColorMajorTheme100",
                    text: item.tagVal,
                    isSelect: true,
                    unavailable: false
                };
                labels.push(label);
            } else {
                let label = {
                    borderWidth: 0,
                    index: index,
                    tag: item.tag,
                    cellType: "1",
                    background: "@color/KBaseColorInputBackground",
                    textColor: "@color/kColorPrimaryText",
                    text: item.tagVal,
                    isSelect: false,
                    unavailable: false
                };
                labels.push(label);
            }
        }
        moduleData$6.labels = labels;
        resetLabels();
    }
    let applyConfigs = await sendRequest$2("v1/copytrading/trader/apply-configs", null);
    console.log(`followSetting, requestapplyConfigs=${JSON.stringify(applyConfigs)}`);
    var ratios = [];
    if (applyConfigs != null && applyConfigs.takeRateChoices != null && applyConfigs.takeRateChoices.length > 0) {
        for (let index = 0; index < applyConfigs.takeRateChoices.length; index++) {
            let item = applyConfigs.takeRateChoices[index];
            var selImageVisibility = "gone";
            var textColor = "@color/kColorPrimaryText";
            if (moduleData$6.takeRate === parseFloat(item)) {
                selImageVisibility = "visible";
                textColor = "@color/kColorMajorTheme100";
            }
            let ratio = {
                index: index,
                ratio: item,
                type: "1",
                selImageVisibility: selImageVisibility,
                textColor: textColor,
                title: String(parseFloat(item) * 100) + "%"
            };
            ratios.push(ratio);
        }
    }
    moduleData$6.distributionSelectionText = $i18n.n_copy_trading_followsetting_trader_share_ratio + String(moduleData$6.takeRate * 100) + "%";
    moduleData$6.ratios = ratios;
}

function resetLabels() {
    var selectCount = 0;
    for (let index = 0; index < moduleData$6.labels.length; index++) {
        let item = moduleData$6.labels[index];
        if (item.isSelect === true) {
            selectCount += 1;
        }
    }
    if (selectCount === 3) {
        for (let index = 0; index < moduleData$6.labels.length; index++) {
            let item = moduleData$6.labels[index];
            if (item.isSelect === false) {
                item.unavailable = true;
                item.borderWidth = 0;
                item.background = "@color/kContentSeperatorColor";
                item.textColor = "@color/kColorThreeLevelText";
            } else {
                item.borderWidth = .5;
                item.background = "@color/kColorMajorTheme006";
                item.textColor = "@color/kColorMajorTheme100";
            }
        }
    } else {
        for (let index = 0; index < moduleData$6.labels.length; index++) {
            let item = moduleData$6.labels[index];
            if (item.isSelect === false) {
                item.unavailable = false;
                item.borderWidth = 0;
                item.background = "@color/KBaseColorInputBackground";
                item.textColor = "@color/kColorPrimaryText";
            } else {
                item.borderWidth = .5;
                item.background = "@color/kColorMajorTheme006";
                item.textColor = "@color/kColorMajorTheme100";
            }
        }
    }
}

moduleEvent$6.openTapped = async function() {
    if (moduleData$6.openStatus === "visible") {
        moduleData$6.closeFollowPopShow = true;
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me_settings",
            button_name: "trade_mode_disable"
        });
    } else {
        moduleData$6.distributionSelectionPopShow = true;
        await analytics$1("appclick_copytrading", {
            business_category: "copytrading_app_trader_me_settings",
            button_name: "trade_mode_enable"
        });
    }
};

moduleEvent$6.cancelDialogClose = async function() {
    moduleData$6.closeFollowPopShow = false;
    moduleData$6.distributionSelectionPopShow = false;
    moduleData$6.openFollowPopShow = false;
    moduleData$6.nicknamePopShow = false;
};

moduleEvent$6.closeConfirm = async function() {
    moduleData$6.closeFollowPopShow = false;
    showLoading(true);
    const responseData = await sendRequest$2("v1/copytrading/trader/cancel-apply", null, 1, 0, {
        "Content-Type": "application/json"
    });
    showLoading(false);
    try {
        console.log(`handle cancel-apply data =${JSON.stringify(responseData)}`);
        if (responseData != null) {
            showToast($i18n.n_copy_trading_followsetting_trader_close_success);
            moduleData$6.openStatus = "gone";
            moduleData$6.itemVisible = "visible";
            requestTraderInfo();
        }
    } catch (e) {
        console.log(`handle cancel-apply data error=${e}`);
    }
};

moduleEvent$6.labelSettingTapped = async function() {
    if (moduleData$6.openStatus === "gone") {
        return;
    }
    moduleData$6.labelSettingPopShow = true;
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_me_settings",
        button_name: "my_tags"
    });
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_trader_tag"
    });
};

moduleEvent$6.clickedClose = async function() {
    moduleData$6.labelSettingPopShow = false;
    moduleData$6.closeFollowPopShow = false;
    moduleData$6.distributionSelectionPopShow = false;
};

moduleEvent$6.clickedItem = async function(index) {
    for (let i = 0; i < moduleData$6.ratios.length; i++) {
        let ratio = moduleData$6.ratios[i];
        if (index == ratio.index) {
            ratio.selImageVisibility = "visible";
            ratio.textColor = "@color/kColorMajorTheme100";
            await analytics$1("appclick_copytrading", {
                business_category: "copytrading_app_trader_me_settings",
                button_name: `set_pnl_sharing_ratio_${parseFloat(ratio.ratio) * 100}%`
            });
        } else {
            ratio.selImageVisibility = "gone";
            ratio.textColor = "@color/kColorPrimaryText";
        }
    }
    moduleData$6.selectedRadioIndex = index;
};

moduleEvent$6.radioConfirm = async function() {
    moduleData$6.distributionSelectionPopShow = false;
    let selectedRadio = moduleData$6.ratios[moduleData$6.selectedRadioIndex];
    moduleData$6.distributionSelectionText = $i18n.n_copy_trading_followsetting_trader_share_ratio + selectedRadio.title;
    moduleData$6.selectedRadio = selectedRadio.ratio;
    moduleData$6.link = '"' + commonData.webUrl + "/" + commonData.language + "/support/104916786098500" + '"';
    moduleData$6.richTextData = `{"content":"n_copy_trading_followsetting_license_hint","textColor":"kColorPrimaryText","textSize":12,"highlight":[{"content":"n_copy_trading_followsetting_license_title","link":${moduleData$6.link},"textColor":"kColorMajorTheme100","textSize":12}]}`;
    moduleData$6.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_n";
    moduleData$6.openFollowPopShow = true;
};

moduleEvent$6.openConfirm = async function(index) {
    if (moduleData$6.checkAgreement == false) {
        showToast($i18n.n_copy_trading_followsetting_license_tips);
        return;
    }
    moduleData$6.openFollowPopShow = false;
    let params = {
        takeRate: moduleData$6.selectedRadio
    };
    showLoading(true);
    const responseData = await sendRequest$2("v1/copytrading/trader/apply", params, 1, 0, {
        "Content-Type": "application/json"
    });
    showLoading(false);
    try {
        console.log(`handle trader/apply data =${JSON.stringify(responseData)}`);
        if (responseData != null) {
            showToast(`${$i18n.n_copy_trading_followsetting_start_success}`);
            moduleData$6.openStatus = "visible";
            moduleData$6.itemVisible = "gone";
            requestTraderInfo();
        }
    } catch (e) {
        console.log(`handle trader/apply data error=${e}`);
    }
};

moduleEvent$6.checkAgreementChange = async function() {
    if (moduleData$6.checkAgreement == false) {
        moduleData$6.checkAgreement = true;
        moduleData$6.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_s";
    } else {
        moduleData$6.checkAgreement = false;
        moduleData$6.checkAgreementBtn = "@drawable/edge_engine_copytrading_selection_n";
    }
};

moduleEvent$6.labelSelected = async function(index) {
    let labels = moduleData$6.labels;
    let item = labels[index];
    if (item.unavailable === true) {
        console.log(`labelSelected unavailable`);
        return;
    }
    if (item.isSelect === false) {
        item.isSelect = true;
        item.borderWidth = .5;
        item.background = "@color/kColorMajorTheme006";
        item.textColor = "@color/kColorMajorTheme100";
        tagsAnalytics(item.tag);
    } else {
        item.isSelect = false;
        item.borderWidth = 0;
        item.background = "@color/KBaseColorInputBackground";
        item.textColor = "@color/kColorPrimaryText";
    }
    var selectCount = 0;
    for (let index = 0; index < labels.length; index++) {
        let item = labels[index];
        if (item.isSelect === true) {
            selectCount += 1;
        }
    }
    if (selectCount === 3) {
        for (let index = 0; index < labels.length; index++) {
            let item = labels[index];
            if (item.isSelect === false) {
                item.unavailable = true;
                item.borderWidth = 0;
                item.background = "@color/kContentSeperatorColor";
                item.textColor = "@color/kColorThreeLevelText";
            } else {
                item.borderWidth = .5;
                item.background = "@color/kColorMajorTheme006";
                item.textColor = "@color/kColorMajorTheme100";
            }
        }
    } else {
        for (let index = 0; index < labels.length; index++) {
            let item = labels[index];
            if (item.isSelect === false) {
                item.unavailable = false;
                item.borderWidth = 0;
                item.background = "@color/KBaseColorInputBackground";
                item.textColor = "@color/kColorPrimaryText";
            } else {
                item.borderWidth = .5;
                item.background = "@color/kColorMajorTheme006";
                item.textColor = "@color/kColorMajorTheme100";
            }
        }
    }
    moduleData$6.labels = labels;
};

async function tagsAnalytics(tag) {
    var button_name = "";
    if (tag == "lt") {
        button_name = "long_term";
    } else if (tag == "st") {
        button_name = "short_term";
    } else if (tag == "hf") {
        button_name = "high_frquency";
    } else if (tag == "mom") {
        button_name = "momentum";
    } else if (tag == "arbi") {
        button_name = "arbitrage";
    } else if (tag == "pru") {
        button_name = "prudent";
    }
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_tag",
        button_name: button_name
    });
}

moduleEvent$6.labelConfirm = async function() {
    moduleData$6.labelSettingPopShow = false;
    var labels = "";
    var tags = "";
    for (let index = 0; index < moduleData$6.labels.length; index++) {
        let item = moduleData$6.labels[index];
        if (item.isSelect === true) {
            labels = labels + item.text + "、";
            tags = tags + item.tag + ",";
        }
    }
    labels = labels.slice(0, -1);
    tags = tags.slice(0, -1);
    moduleData$6.labelString = labels;
    let params = {
        tags: tags
    };
    const responseData = await sendRequest$2("v1/copytrading/change-tags", params, 1, 0, {
        "Content-Type": "application/json"
    });
    try {
        console.log(`handle change-tags data =${JSON.stringify(responseData)}`);
        if (responseData != null) {
            showToast(`${$i18n.n_security_success}`);
        }
    } catch (e) {
        console.log(`handle change-tags data error=${e}`);
    }
};

moduleEvent$6.followerTapped = function() {
    if (moduleData$6.openStatus === "gone") {
        return;
    }
    moduleData$6.followNumbersPopShow = true;
};

moduleEvent$6.customerServiceTapped = function() {
    moduleData$6.nicknamePopShow = false;
    let url = `https://www.huobi.com/baymaxchat/#/h5/?sceneCode=1&lang=${commonData.language}`;
    openURL(url);
};

moduleEvent$6.nicknameTapped = async function() {
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/account/userInfoPage?accountName=${moduleData$6.nickname}`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_me_settings",
        button_name: "nickname"
    });
};

moduleEvent$6.introductionTapped = async function() {
    if (moduleData$6.openStatus === "gone") {
        return;
    }
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=introductionSetting&xml=introductionSetting&navConfig=native`);
    await analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_me_settings",
        button_name: "introduction"
    });
};

async function updateIntroduction(introduction) {
    moduleData$6.introduction = introduction;
    commonData.introduction = introduction;
}

moduleEvent$6.onResume = async function() {
    requestTraderInfo();
};

moduleEvent$6.onDestroy = async function() {};

let isStarted$1 = false;

var pageNo$1 = 1;

var newList$2 = [];

async function start$5() {
    if (isStarted$1) {
        return;
    }
    pageNo$1 = 1;
    newList$2 = [];
    moduleData$5.list = [];
    moduleData$5.orders = [];
    moduleData$5.emptyVisible = "visible";
    moduleData$5.listVisible = "invisible";
    requestOrder$1(false);
    isStarted$1 = true;
}

var currentOrder = {
    emptyVisible: "visible",
    listVisible: "invisible",
    isCurrentChecked: false,
    currentOrderCount: $i18n.$intercept.n_copy_trading_current_order(String(0)),
    tradeListPopShow: "false",
    checkboxImg: "@drawable/edge_engine_unselected",
    list: [],
    orders: []
};

var clickItemRecord = {};

function defaultData$5() {
    return currentOrder;
}

const {moduleData: moduleData$5, moduleEvent: moduleEvent$5} = moduleDefine("traderDetailOrder", start$5, defaultData$5);

function setListVisible$2(visible) {
    if (true == visible) {
        moduleData$5.emptyVisible = "gone";
        moduleData$5.listVisible = "visible";
    } else {
        moduleData$5.emptyVisible = "visible";
        moduleData$5.listVisible = "invisible";
    }
}

var isRequest$2 = false;

async function requestOrder$1(isMore) {
    if (!isMore) {
        pageNo$1 = 1;
    } else {
        pageNo$1 += 1;
    }
    var params = {
        userSign: getUserSign(),
        pageSize: 30,
        pageNo: pageNo$1
    };
    if (isRequest$2) {
        return;
    }
    isRequest$2 = true;
    const data = await sendRequest$2("v1/copytrading/trader/open-unmatch-orders", params);
    isRequest$2 = false;
    try {
        if (pageNo$1 == 1 && (!data || data == null || !data.orders || data.orders == null || data.orders.length == 0)) {
            setListVisible$2(false);
            moduleData$5.list = [];
            newList$2 = [];
            return;
        }
        const {totalSize: totalSize, orders: orders} = data;
        moduleData$5.orders = orders;
        if (!isMore) {
            moduleData$5.list = [];
            newList$2 = [];
        } else {
            moduleData$5.loadMoreStatus = "2";
        }
        handleData$2(orders);
        setListVisible$2(true);
    } catch (e) {
        console.log(`handle order data error=${e}`);
    }
}

function handleData$2(orders) {
    for (let i = 0; i < orders.length; ++i) {
        let v = orders[i];
        v.index = newList$2.length;
        let {coin: coin, unit: unit} = coinUnit(v.symbol);
        if (v.direction == "long") {
            v.directionLabel = $i18n.n_contract_position_buy_label;
            v.directionColor = getUpDownColor();
            v.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            v.directionLabel = $i18n.n_contract_position_sell_label;
            v.directionColor = getUpDownColor(false);
            v.directionDesc = $i18n.n_contract_trade_open_low;
        }
        if (parseFloat(v.openProfit) >= 0) {
            v.openProfitColor = getUpDownColor();
            v.openProfitStr = `+${formatPrecision(v.openProfit, 4)}`;
        } else if (isNaN(parseFloat(v.openProfit))) {
            v.openProfitColor = "@color/kColorSecondaryText";
            v.openProfitStr = "--";
        } else {
            v.openProfitColor = getUpDownColor(false);
            v.openProfitStr = formatPrecision(v.openProfit, 4);
        }
        if (typeof v.openProfitRate === "string" && !isNaN(parseFloat(v.openProfitRate))) {
            const openProfitRate = formatPrecision(multiply(v.openProfitRate, "100"), 2);
            if (parseFloat(v.openProfitRate) >= 0) {
                v.openProfitRateStr = `+${openProfitRate}%`;
            } else {
                v.openProfitRateStr = `${openProfitRate}%`;
            }
        } else {
            v.openProfitRateStr = "--";
        }
        v.symbolDesc = symbolDesc(v.symbol);
        var positionModel = $i18n.n_copy_trading_isolated;
        if (v.positionModel == 2) {
            positionModel = $i18n.n_contract_super_margin;
        } else if (v.positionModel == 3) {
            positionModel = $i18n.n_contract_trade_margin;
        }
        v.modeTypeName = positionModel;
        v.leverDesc = `${v.lever}X`;
        v.orderId = v.orderIdShow;
        v.openPriceTitle = `${$i18n.n_contract_avg_position_price}(${unit})`;
        v.openAmountTitle = `${$i18n.n_option_market_list_setting_position_volume}(${coin})`;
        v.bondAmountTitle = `${$i18n.$intercept.n_contarct_position_original_margin("USDT")}`;
        v.bondAmountStr = formatPrecision(v.bondAmount, 4);
        let currentContractInfo = getModelByContractShortType(v.symbol);
        let precision = getContractSizePrecision(currentContractInfo);
        let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
        v.openPriceStr = formatPrecision(v.openPrice, priceTickPrecision);
        v.openAmountVolume = formatPrecision(v.openAmount, precision);
        v.stopProfitPriceTitle = `${$i18n.n_grid_trade_zhiying}(${unit})`;
        v.stopLossPriceTitle = `${$i18n.n_grid_trade_zhisun}(${unit})`;
        v.openFeeTitle = `${$i18n.n_copy_trading_open_fee}(${unit})`;
        let feePrecision = getFeeAmountPrecision(currentContractInfo);
        v.openFeeStr = formatPrecision(v.openFee, feePrecision);
        v.stopProfitPrice = parseZero(v.stopProfitPrice, priceTickPrecision);
        v.stopLossPrice = parseZero(v.stopLossPrice, priceTickPrecision);
        v.stopProfitPopVisible = v.positionModel == 1 ? "visible" : "gone";
        v.explosionPriceTitle = v.positionModel == 1 ? `${$i18n.n_copy_trading_estimate_storehouse_price}(${unit})` : `${$i18n.n_balance_contract_prediction_of_strong_parity}(${unit})`;
        v.explosionPriceVisible = v.positionModel == 1 ? "gone" : "visible";
        v.explosionPrice = parseZero(v.explosionPrice, priceTickPrecision);
        if (clickItemRecord[v.orderIdShow]) {
            v.orderIdVisible = clickItemRecord[v.orderIdShow];
        } else {
            v.orderIdVisible = "gone";
        }
        v.openTimeDesc = $i18n.n_copy_trading_open_time + ": " + new Date(v.openTime).Format("yyyy-MM-dd hh:mm:ss");
        v.type = "normal";
        if (v.tpslRiskRate) {
            v.tpslRiskRateDesc = multiply(v.tpslRiskRate, 100);
        }
        newList$2.push(v);
    }
    moduleData$5.list = newList$2;
}

function parseZero(price, precision = 4) {
    if (null == price || price == "--") {
        return "--";
    }
    if (parseFloat(price) == 0) {
        return "--";
    }
    return formatPrecision(price, precision);
}

function clickedItem$1(index) {
    if (index >= moduleData$5.list.length) {
        return;
    }
    let item = moduleData$5.list[index];
    console.log(`订单点击 at:${index} 数据：${JSON.stringify(item)}`);
    item.orderIdVisible = item.orderIdVisible == "visible" ? "gone" : "visible";
    clickItemRecord[item.orderIdShow] = item.orderIdVisible;
}

function showStopProfitAlert(index) {
    if (index >= moduleData$5.list.length) {
        return;
    }
    let item = moduleData$5.list[index];
    if ($data.stopProfitAlertPop.stopProfitPopShow !== "true") {
        $data.stopProfitAlertPop.stopProfitPopShow = "true";
        stopProfitAlertPop.show(item);
    }
}

async function onAppear$2() {
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "current_orders"
    });
    pageNo$1 = 1;
    requestOrder$1(false);
}

async function onLoadMore$1() {
    await requestOrder$1(true);
}

moduleEvent$5.clickedItem = clickedItem$1;

moduleEvent$5.refreshData = requestOrder$1;

moduleEvent$5.showStopProfitAlert = showStopProfitAlert;

moduleEvent$5.onAppear = onAppear$2;

moduleEvent$5.onLoadMore = onLoadMore$1;

var pageNo = 1;

var newList$1 = [];

async function start$4() {
    pageNo = 1;
    newList$1 = [];
    moduleData$4.list = [];
    moduleData$4.orders = [];
    moduleData$4.emptyVisible = "visible";
    moduleData$4.listVisible = "invisible";
    requestHistoryOrder(false);
}

function defaultData$4() {
    return {
        emptyVisible: "visible",
        listVisible: "invisible",
        isCurrentChecked: false,
        fokFailedReasonShow: false,
        checkboxImg: "@drawable/edge_engine_unselected",
        list: [],
        loadMoreStatus: 0,
        orders: []
    };
}

const {moduleData: moduleData$4, moduleEvent: moduleEvent$4} = moduleDefine("traderDetailHistoryOrder", start$4, defaultData$4);

function setListVisible$1(visible) {
    if (true == visible) {
        moduleData$4.emptyVisible = "gone";
        moduleData$4.listVisible = "visible";
    } else {
        moduleData$4.emptyVisible = "visible";
        moduleData$4.listVisible = "invisible";
    }
}

var isRequest$1 = false;

async function requestHistoryOrder(isMore) {
    if (!isMore) {
        pageNo = 1;
    } else {
        pageNo += 1;
    }
    var params = {
        userSign: getUserSign(),
        pageSize: 30,
        pageNo: pageNo,
        queryType: 2
    };
    if (isRequest$1) {
        return;
    }
    isRequest$1 = true;
    const data = await sendRequest$2("v1/copytrading/trader/open-matched-orders", params);
    isRequest$1 = false;
    if (!isMore) {
        moduleData$4.list = [];
        newList$1 = [];
    } else {
        moduleData$4.loadMoreStatus = "2";
    }
    handleData$1(data);
}

function handleData$1(data) {
    try {
        if (pageNo == 1 && (!data || data == null || !data.orders || data.orders == null || data.orders.length == 0)) {
            setListVisible$1(false);
            newList$1 = [];
            moduleData$4.list = [];
            return;
        }
        const {totalSize: totalSize, orders: orders} = data;
        moduleData$4.orders = orders;
        handleOrders(orders);
        setListVisible$1(true);
    } catch (e) {
        console.log(`handle order data error=${e}`);
    }
}

function handleOrders(orders) {
    for (let i = 0; i < orders.length; ++i) {
        let v = orders[i];
        v.type = "normal";
        let {coin: coin, unit: unit} = coinUnit(v.symbol);
        v.index = newList$1.length;
        if (v.direction == "long") {
            v.directionLabel = $i18n.n_contract_position_buy_label;
            v.directionColor = getUpDownColor();
            v.directionDesc = $i18n.n_contract_trade_open_more;
        } else {
            v.directionLabel = $i18n.n_contract_position_sell_label;
            v.directionColor = getUpDownColor(false);
            v.directionDesc = $i18n.n_contract_trade_open_low;
        }
        v.statusMore = "gone";
        if (v.status == 2) {
            v.statusDesc = $i18n.n_copy_trading_order_fail;
            v.statusDescColor = "#F95A50";
            v.statusMore = "visible";
        } else if (v.status == 3) {
            v.statusDesc = $i18n.n_copy_trading_closing_position;
            v.statusDescColor = "@color/kColorSecondaryText";
        } else {
            v.statusDesc = $i18n.n_copy_trading_order_success;
            v.statusDescColor = "#00A171";
        }
        v.symbolDesc = symbolDesc(v.symbol);
        var positionString = $i18n.n_copy_trading_isolated;
        if (v.positionModel == 2) {
            positionString = $i18n.n_contract_super_margin;
        } else if (v.positionModel == 3) {
            positionString = $i18n.n_contract_trade_margin;
        }
        v.modeTypeName = positionString;
        v.leverDesc = `${v.lever}X`;
        v.orderId = v.orderIdShow;
        v.openPriceTitle = `${$i18n.n_contract_avg_position_price}(${unit})`;
        v.openAmountTitle = `${$i18n.n_option_market_list_setting_position_volume}(${coin})`;
        v.profitTitle = `${$i18n.n_copy_trading_profit}(${unit})`;
        let currentContractInfo = getModelByContractShortType(v.symbol);
        let precision = getContractSizePrecision(currentContractInfo);
        let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
        v.closePriceStr = formatPrecision(v.closePrice, priceTickPrecision);
        v.openPriceStr = formatPrecision(v.openPrice, priceTickPrecision);
        v.openAmountVolume = formatPrecision(v.openAmount, precision);
        if (typeof v.profitRate === "string" && !isNaN(parseFloat(v.profitRate))) {
            const profitRate = formatPrecision(multiply(v.profitRate, "100"), 2);
            if (parseFloat(v.profit) > 0) {
                v.profitRateStr = `+${profitRate}%`;
            } else {
                v.profitRateStr = `${profitRate}%`;
            }
        } else {
            v.profitRateStr = "--";
        }
        if (parseFloat(v.profit) > 0) {
            v.profitStr = `+${v.profit}`;
        } else if (isNaN(parseFloat(v.profit))) {
            v.profitStr = "--";
        } else {
            v.profitStr = `${formatPrecision(v.profit, 4)}`;
        }
        v.profitDescColor = getColorByNumber$1(v.profit);
        v.closePriceTitle = `${$i18n.n_contract_share_history_position_close_price}(${unit})`;
        v.followTakesTitle = `${$i18n.n_copy_trading_order_profit}(${unit})`;
        v.followTakesColor = getColorByNumber$1(v.followTakes);
        newList$1.push(v);
    }
    moduleData$4.list = newList$1;
}

function getColorByNumber$1(number) {
    let profit = parseFloat(number);
    if (isNaN(profit)) {
        return "@color/kColorSecondaryText";
    } else if (profit >= 0) {
        return getUpDownColor();
    } else {
        return getUpDownColor(false);
    }
}

async function clickedItem(index) {
    if (index >= moduleData$4.list.length) {
        return;
    }
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "history_order_details"
    });
    let item = moduleData$4.list[index];
    console.log(`订单点击 at:${index} orderId:${item.orderId} 数据：${JSON.stringify(item)}`);
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&navConfig=native&rootName=traderOrderDetail&xml=traderOrderDetail&orderId=${item.id}`);
}

async function onAppear$1() {
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "history_orders"
    });
    pageNo = 1;
    requestHistoryOrder(false);
}

function popDismiss() {
    moduleData$4.fokFailedReasonShow = false;
}

async function onLoadMore() {
    await requestHistoryOrder(true);
}

moduleEvent$4.popDismiss = popDismiss;

moduleEvent$4.clickedItem = clickedItem;

moduleEvent$4.onAppear = onAppear$1;

moduleEvent$4.onLoadMore = onLoadMore;

var newList = [];

function defaultData$3() {
    return {
        emptyVisible: "visible",
        listVisible: "invisible",
        list: [],
        followers: [],
        filterImg: "@drawable/edge_engine_filter_down",
        loadMoreStatus: 0
    };
}

const {moduleData: moduleData$3, moduleEvent: moduleEvent$3} = moduleDefine("traderDetailFollower", start$3, defaultData$3);

let isStarted = false;

async function start$3() {
    if (isStarted) {
        return;
    }
    isStarted = true;
    requestOrder();
}

var isRequest = false;

async function requestOrder() {
    if (isRequest) {
        return;
    }
    var params = {
        userSign: getUserSign()
    };
    isRequest = true;
    const data = await sendRequest$2("v1/copytrading/trader/my-followers-top", params);
    isRequest = false;
    try {
        if (!data || data == null || data.length == 0) {
            setListVisible(false);
            moduleData$3.list = [];
            newList = [];
            return;
        }
        setListVisible(true);
        moduleData$3.list = [];
        newList = [];
        handleData(data);
    } catch (e) {
        console.log(`handle my-followers-top data error=${e}`);
    }
}

function handleData(followers) {
    for (let i = 0; i < followers.length; ++i) {
        let v = followers[i];
        v.index = i;
        v.type = "normal";
        v.profit = formatPrecision(v.profit, 4);
        v.tradeAgg = formatPrecision(v.tradeAgg, 4);
        newList.push(v);
    }
    moduleData$3.list = newList;
}

function setListVisible(visible) {
    if (true == visible) {
        moduleData$3.emptyVisible = "gone";
        moduleData$3.listVisible = "visible";
    } else {
        moduleData$3.emptyVisible = "visible";
        moduleData$3.listVisible = "invisible";
    }
}

async function onAppear() {
    requestOrder();
    analytics$1("appclick_copytrading", {
        business_category: "copytrading_app_trader_details",
        button_name: "followers"
    });
}

moduleEvent$3.onAppear = onAppear;

function defaultData$2() {
    return {
        tagsModelList: [],
        emptyVisible: "gone",
        listVisible: "gone",
        statusBarConfig: {
            statusBarMode: "true",
            adStatusBarColor: "KBaseColorContentBackground"
        },
        navConfig: `{"left":{"icon":"edge_engine_top_bar_back_normal","action":{"type":"back","parameter":""},"text":null},"titleKey":"n_copy_trading_order_detail","backgroundColor":"KBaseColorContentBackground"}`
    };
}

const {moduleData: moduleData$2, moduleEvent: moduleEvent$2} = moduleDefine("traderOrderDetail", start$2, defaultData$2);

async function start$2() {}

moduleEvent$2.onResume = async function() {};

moduleEvent$2.onCreate = async function(eventParams) {
    console.log("traderOrderDetail - start:%o", eventParams);
    if (!eventParams || eventParams == null) {
        showDetailEmpty(true);
        return;
    }
    const params = JSON.parse(eventParams);
    const id = params.orderId;
    if (!id || id == null) {
        showDetailEmpty(true);
        return;
    }
    showLoading(true);
    const data = await sendRequest$2("v1/copytrading/order", {
        id: id
    });
    showLoading(false);
    try {
        if (!data || data == null) {
            showDetailEmpty(true);
            return;
        }
        handleDetailData(data);
        showDetailEmpty(false);
    } catch (e) {
        console.log(`handle order error=${e}`);
    }
    await analytics$1("pageview_copytrading", {
        business_category: "copytrading_app_trader_history_details"
    });
};

function handleDetailData(data) {
    let {coin: coin, unit: unit} = coinUnit(data.symbol);
    moduleData$2.symbol = symbolDesc(data.symbol);
    if (data.direction == "long") {
        moduleData$2.direction = $i18n.n_contract_position_buy_label;
        moduleData$2.directionColor = getUpDownColor();
    } else {
        moduleData$2.direction = $i18n.n_contract_position_sell_label;
        moduleData$2.directionColor = getUpDownColor(false);
    }
    if (data.status == 2) {
        moduleData$2.orderStatus = $i18n.n_copy_trading_order_fail;
        moduleData$2.orderStatusColor = "#F95A50";
    } else if (data.status == 3) {
        moduleData$2.orderStatus = $i18n.n_copy_trading_closing_position;
        moduleData$2.orderStatusColor = "@color/kColorSecondaryText";
    } else {
        moduleData$2.orderStatus = $i18n.n_copy_trading_order_success;
        moduleData$2.orderStatusColor = "#00A171";
    }
    $i18n.n_copy_trading_isolated;
    if (data.positionModel == 2) {
        $i18n.n_contract_super_margin;
    } else if (data.positionModel == 3) {
        $i18n.n_contract_trade_margin;
    }
    data.direction == "long" ? $i18n.n_contract_trade_open_more : $i18n.n_contract_trade_open_low;
    let currentContractInfo = getModelByContractShortType(data.symbol);
    let precision = getContractSizePrecision(currentContractInfo);
    let priceTickPrecision = getPriceTickPrecision(currentContractInfo);
    let feePrecision = getFeeAmountPrecision(currentContractInfo);
    const profitRate = formatPrecision(multiply(data.profitRate, "100"), 2);
    const profitColor = getColorByNumber(data.profit);
    getColorByNumber(data.followTakes);
    let openAmountVolume = formatPrecision(data.openAmount, precision);
    moduleData$2.title_profit = `${$i18n.n_contract_profit}(${unit})`;
    if (parseFloat(data.profit) > 0) {
        moduleData$2.profit = `+${formatPrecision(data.profit, 4)}`;
    } else {
        moduleData$2.profit = `${formatPrecision(data.profit, 4)}`;
    }
    moduleData$2.profitColor = profitColor;
    moduleData$2.title_profitRate = $i18n.n_copy_trading_yield;
    if (parseFloat(profitRate) > 0) {
        moduleData$2.profitRate = `+${profitRate}%`;
    } else {
        moduleData$2.profitRate = `${profitRate}%`;
    }
    moduleData$2.profitRateColor = profitColor;
    moduleData$2.title_openPrice = `${$i18n.n_contract_avg_position_price}(${unit})`;
    moduleData$2.openPrice = formatPrecision(data.openPrice, priceTickPrecision);
    moduleData$2.title_openNumber = `${$i18n.n_option_market_list_setting_position_volume}(${coin})`;
    moduleData$2.openNumber = `${formatPrecision(openAmountVolume, precision)}`;
    moduleData$2.title_closePrice = `${$i18n.n_contract_share_history_position_close_price}(${unit})`;
    moduleData$2.closePrice = formatPrecision(data.closePrice, priceTickPrecision);
    moduleData$2.title_stopLoss = `${$i18n.n_grid_trade_zhisun}(${unit})`;
    moduleData$2.stopLoss = `${data.lossPrice ? formatPrecision(data.lossPrice, priceTickPrecision) : "--"}`;
    moduleData$2.title_stopProfit = `${$i18n.n_grid_trade_zhiying}(${unit})`;
    moduleData$2.stopProfit = `${data.profitPrice ? formatPrecision(data.profitPrice, priceTickPrecision) : "--"}`;
    moduleData$2.title_openFee = `${$i18n.n_copy_trading_open_fee}(${unit})`;
    moduleData$2.openFee = `${formatPrecision(data.openFee, feePrecision)}`;
    moduleData$2.title_closeFee = `${$i18n.n_copy_trading_close_fee}(${unit})`;
    moduleData$2.closeFee = `${formatPrecision(data.closeFee, feePrecision)}`;
    const closeTypeName = getCloseTypeName(data.closeType);
    moduleData$2.title_closeMethod = $i18n.n_copy_trading_close_method;
    moduleData$2.closeType = closeTypeName;
    moduleData$2.title_openTime = $i18n.n_copy_trading_open_time;
    moduleData$2.openTime = new Date(data.openTime).Format("yyyy-MM-dd hh:mm:ss");
    moduleData$2.title_closeTime = $i18n.n_copy_trading_close_time;
    var closeTimeValue = "";
    if (data.closeTime && data.closeTime != null && data.closeTime > 0) {
        closeTimeValue = new Date(data.closeTime).Format("yyyy-MM-dd hh:mm:ss");
    }
    moduleData$2.closeTime = closeTimeValue;
    moduleData$2.title_trader = $i18n.n_copy_trading_trader;
    moduleData$2.traderNick = data.traderNick;
    var otherModelList = [ {
        type: "other",
        title: moduleData$2.title_stopProfit,
        subTitle: moduleData$2.stopProfit
    }, {
        type: "other",
        title: moduleData$2.title_stopLoss,
        subTitle: moduleData$2.stopLoss
    }, {
        type: "other",
        title: moduleData$2.title_openFee,
        subTitle: moduleData$2.openFee
    }, {
        type: "other",
        title: moduleData$2.title_closeFee,
        subTitle: moduleData$2.closeFee
    }, {
        type: "other",
        title: moduleData$2.title_closeMethod,
        subTitle: moduleData$2.closeType
    }, {
        type: "other",
        title: moduleData$2.title_openTime,
        subTitle: moduleData$2.openTime
    }, {
        type: "other",
        title: moduleData$2.title_closeTime,
        subTitle: moduleData$2.closeTime
    }, {
        type: "other",
        title: moduleData$2.title_trader,
        subTitle: moduleData$2.traderNick
    } ];
    moduleData$2.otherModelList = otherModelList;
    var tagsList = [ {
        type: "normal",
        title: data.modeType == 1 ? $i18n.n_contract_trade_margin : $i18n.n_contract_super_margin
    }, {
        type: "normal",
        title: `${data.lever}X`
    }, {
        type: "normal",
        title: data.direction == "long" ? $i18n.n_contract_trade_open_more : $i18n.n_contract_trade_open_low
    } ];
    moduleData$2.tagsModelList = tagsList;
}

function getColorByNumber(number) {
    let profit = parseFloat(number);
    if (isNaN(profit)) {
        return "@color/kColorSecondaryText";
    } else if (profit >= 0) {
        return getUpDownColor();
    } else {
        return getUpDownColor(false);
    }
}

function showDetailEmpty(isEmpty) {
    if (isEmpty) {
        moduleData$2.emptyVisible = "visible";
        moduleData$2.listVisible = "gone";
    } else {
        moduleData$2.emptyVisible = "gone";
        moduleData$2.listVisible = "visible";
    }
}

function getCloseTypeName(closeType) {
    var closeTypeName = "";
    switch (closeType) {
      case 1:
        closeTypeName = $i18n.n_copy_trading_closeType_1;
        break;

      case 2:
        closeTypeName = $i18n.n_copy_trading_closeType_2;
        break;

      case 3:
        closeTypeName = $i18n.n_copy_trading_closeType_3;
        break;

      case 4:
        closeTypeName = $i18n.n_copy_trading_closeType_4;
        break;

      case 11:
        closeTypeName = $i18n.n_copy_trading_closeType_11;
        break;

      case 12:
        closeTypeName = $i18n.n_copy_trading_closeType_12;
        break;

      case 13:
        closeTypeName = $i18n.n_copy_trading_closeType_13;
        break;

      case 14:
        closeTypeName = $i18n.n_copy_trading_closeType_14;
        break;

      case 15:
        closeTypeName = $i18n.n_copy_trading_closeType_15;
        break;

      case -1:
        closeTypeName = $i18n.n_copy_trading_closeType_0_1;
        break;

      case -2:
        closeTypeName = $i18n.n_copy_trading_closeType_0_2;
        break;
    }
    return closeTypeName;
}

async function start$1() {
    console.log(`introductionSetting-start`);
}

function defaultData$1() {
    return {
        navConfig: "",
        introduction: "",
        counter: "0/500",
        borderWidth: "0.5",
        introductionFocus: true
    };
}

const {moduleData: moduleData$1, moduleEvent: moduleEvent$1} = moduleDefine("introductionSetting", start$1, defaultData$1);

moduleEvent$1.onCreate = async function(eventParams) {
    const introduction = commonData.introduction;
    if (introduction != null && introduction != "undefined") {
        moduleData$1.introduction = introduction;
    }
    moduleData$1.navConfig = `{"left":{"icon":"edge_engine_top_bar_back_normal","action":{"type":"back","parameter":""},"text":null},"right":{"icon":null,"action":{"type":"evalJS","parameter":"saveAction"},"text":"n_share_btn_save"},"titleKey":"n_copy_trading_trader_introduction_title"}`;
    moduleData$1.introductionFocus = true;
};

moduleEvent$1.saveAction = async function() {
    if (moduleData$1.introduction.length == 0) {
        return;
    }
    showLoading(true);
    let content = moduleData$1.introduction;
    const code = await sendRequestReturnCode("v1/copytrading/trader/trader-info-update", {
        content: content
    }, 1, 0, {
        "Content-Type": "application/json"
    });
    showLoading(false);
    if (code == 200) {
        showToast($i18n.n_copy_trading_trader_introduction_success);
        updateIntroduction(content);
        $nativeAPI.containerBack();
    } else {
        if (code == 80621) {
            showToast($i18n.n_copy_trading_trader_introduction_error_tips);
        }
    }
};

moduleEvent$1.onDestroy = async function() {};

moduleEvent$1.onTextChange = async function(key, text) {
    console.log(`wp onTextChange text=${text}`);
    if (text.length == 0) {
        moduleData$1.introduction = "";
        moduleData$1.counter = "0/500";
    } else {
        if (text.length > 500) {
            moduleData$1.introduction = text.substring(0, 500);
        }
        moduleData$1.counter = `${moduleData$1.introduction.length}/500`;
    }
};

moduleEvent$1.onFocusChange = async function(key, isFocus) {
    console.log(`wp onFocusChange isFocus=${isFocus}`);
    if (isFocus == true) {
        moduleData$1.borderWidth = "0.5";
    } else {
        moduleData$1.borderWidth = "0";
    }
};

async function start() {}

function defaultData() {
    return {
        popShow: "false"
    };
}

const {moduleData: moduleData, moduleEvent: moduleEvent} = moduleDefine("profitTipsPop", start, defaultData);

moduleEvent.quickMore = function() {
    moduleData.popShow = "false";
    openURL(`${commonData.webUrl}/${commonData.language}/support/44989519691569`);
};

moduleEvent.popShow = function(type) {
    console.log(`wp -- popShow ${type}}`);
    if (type == 0) {
        moduleData.content = $i18n.n_copytrading_profit_content;
    } else {
        moduleData.content = $i18n.n_copytrading_followe_profit_content;
    }
    moduleData.popShow = "true";
};

moduleEvent.popDismiss = function() {
    moduleData.popShow = "false";
};

function sendCommonConfig(param) {
    sendCommonConfig$1(param);
}

$event.gotoSearch = function() {};

$event.traderFilter = function() {};

var isFirstLoad = true;

async function moduleAppear() {
    console.log("main-moduleAppear");
    updateAvailable();
    startTimer$4();
    startTimer$2();
    startTimer$5();
    startTimer$3();
    requestTraderData();
    subPriceWebSocket("linearSwapWs");
    $data.orderBook.isAppear = true;
    requestFollowNumbers();
    startScroll();
    if (isFirstLoad) {
        requestTabs();
        isFirstLoad = false;
    }
    onAppear$c();
}

function moduleWillDisappear() {
    console.log("main-moduleWillDisappear");
    cleanPops();
    cleanAllPops();
    endScroll();
    onWillDisappear();
}

async function moduleDisappear() {
    console.log("main-moduleDisappear");
    clearTimer$4();
    clearTimer$2();
    clearTimer$5();
    clearTimer$3();
    unsubPriceWebSocket("linearSwapWs");
    $data.orderBook.isAppear = false;
}

async function sendSocketData(data) {
    if (data.type == "market") {
        commonData.marketData = JSON.parse(data.data);
    } else if (data.type == "linearSwapWs") {
        commonData.linearSwapWsData = JSON.parse(data.data);
        calcAD();
        refreshTradeData();
    }
}

async function onSymbolChange(symbolShortType) {
    try {
        $data.drawer.popShow = "false";
        console.log("onSymbolChange  symbolShortType:" + symbolShortType);
        await save("copyTrading", "currentCopyTradingSymbol", symbolShortType);
        await save("symbolMenu_copyTrading", "selSymbol", symbolShortType);
        const readSymbol = await read("copyTrading", "currentCopyTradingSymbol");
        console.log(`onSymbolChange, readSymbol=${JSON.stringify(readSymbol)}`);
        console.log(`onSymbolChange, readSymbol=${readSymbol}`);
        commonData.currentSymbol = symbolShortType;
        commonData.currentContractInfo = getModelByContractShortType(symbolShortType);
        start$D();
        start$w();
        refreshData();
        symbolChange$1();
        symbolChange();
    } catch (e) {
        console.log(`onSymbolChange, error=${e}`);
    }
}

$event.sendCommonConfig = sendCommonConfig;

$event.sendSocketData = sendSocketData;

$event.onSymbolChange = onSymbolChange;

$event.moduleAppear = moduleAppear;

$event.moduleDisappear = moduleDisappear;

$event.moduleWillDisappear = moduleWillDisappear;

async function getTraderList(params) {
    let isMore = params["isMore"];
    let searchWord = params["searchWord"];
    let rankType = params["rankType"];
    if (!isMore) {
        await onRefresh$3(searchWord, rankType);
    } else {
        await onLoadMore$8(searchWord, rankType);
    }
}

async function goToSearchPage() {
    console.log(`wp---- goToSearchPage`);
    openURL(`holigeit://open/v1?login=0&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=copytrading&rootName=traderSearch&navConfig=`);
}

$event.getTraderList = getTraderList;

$event.goToSearchPage = goToSearchPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
