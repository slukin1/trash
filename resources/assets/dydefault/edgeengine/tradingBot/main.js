var DP = 20, RM = 1, MAX_DP = 1e6, MAX_POWER = 1e6, NE = -7, PE = 21, NAME = "[big.js] ", INVALID = NAME + "Invalid ", INVALID_DP = INVALID + "decimal places", INVALID_RM = INVALID + "rounding mode", DIV_BY_ZERO = NAME + "Division by zero", P = {}, UNDEFINED = void 0, NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;

function _Big_() {
    function Big(n) {
        var x = this;
        if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);
        if (n instanceof Big) {
            x.s = n.s;
            x.e = n.e;
            x.c = n.c.slice();
        } else {
            parse(x, n);
        }
        x.constructor = Big;
    }
    Big.prototype = P;
    Big.DP = DP;
    Big.RM = RM;
    Big.NE = NE;
    Big.PE = PE;
    Big.version = "5.2.2";
    return Big;
}

function parse(x, n) {
    var e, i, nl;
    if (n === 0 && 1 / n < 0) n = "-0"; else if (!NUMERIC.test(n += "")) throw Error(INVALID + "number");
    x.s = n.charAt(0) == "-" ? (n = n.slice(1), -1) : 1;
    if ((e = n.indexOf(".")) > -1) n = n.replace(".", "");
    if ((i = n.search(/e/i)) > 0) {
        if (e < 0) e = i;
        e += +n.slice(i + 1);
        n = n.substring(0, i);
    } else if (e < 0) {
        e = n.length;
    }
    nl = n.length;
    for (i = 0; i < nl && n.charAt(i) == "0"; ) ++i;
    if (i == nl) {
        x.c = [ x.e = 0 ];
    } else {
        for (;nl > 0 && n.charAt(--nl) == "0"; ) ;
        x.e = e - i - 1;
        x.c = [];
        for (e = 0; i <= nl; ) x.c[e++] = +n.charAt(i++);
    }
    return x;
}

function round(x, dp, rm, more) {
    var xc = x.c, i = x.e + dp + 1;
    if (i < xc.length) {
        if (rm === 1) {
            more = xc[i] >= 5;
        } else if (rm === 2) {
            more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);
        } else if (rm === 3) {
            more = more || !!xc[0];
        } else {
            more = false;
            if (rm !== 0) throw Error(INVALID_RM);
        }
        if (i < 1) {
            xc.length = 1;
            if (more) {
                x.e = -dp;
                xc[0] = 1;
            } else {
                xc[0] = x.e = 0;
            }
        } else {
            xc.length = i--;
            if (more) {
                for (;++xc[i] > 9; ) {
                    xc[i] = 0;
                    if (!i--) {
                        ++x.e;
                        xc.unshift(1);
                    }
                }
            }
            for (i = xc.length; !xc[--i]; ) xc.pop();
        }
    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {
        throw Error(INVALID_RM);
    }
    return x;
}

function stringify(x, id, n, k) {
    var e, s, Big = x.constructor, z = !x.c[0];
    if (n !== UNDEFINED) {
        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {
            throw Error(id == 3 ? INVALID + "precision" : INVALID_DP);
        }
        x = new Big(x);
        n = k - x.e;
        if (x.c.length > ++k) round(x, n, Big.RM);
        if (id == 2) k = x.e + n + 1;
        for (;x.c.length < k; ) x.c.push(0);
    }
    e = x.e;
    s = x.c.join("");
    n = s.length;
    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {
        s = s.charAt(0) + (n > 1 ? "." + s.slice(1) : "") + (e < 0 ? "e" : "e+") + e;
    } else if (e < 0) {
        for (;++e; ) s = "0" + s;
        s = "0." + s;
    } else if (e > 0) {
        if (++e > n) for (e -= n; e--; ) s += "0"; else if (e < n) s = s.slice(0, e) + "." + s.slice(e);
    } else if (n > 1) {
        s = s.charAt(0) + "." + s.slice(1);
    }
    return x.s < 0 && (!z || id == 4) ? "-" + s : s;
}

P.abs = function() {
    var x = new this.constructor(this);
    x.s = 1;
    return x;
};

P.cmp = function(y) {
    var isneg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e;
    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;
    if (i != j) return i;
    isneg = i < 0;
    if (k != l) return k > l ^ isneg ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l;
    for (i = -1; ++i < j; ) {
        if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
    }
    return k == l ? 0 : k > l ^ isneg ? 1 : -1;
};

P.div = function(y) {
    var x = this, Big = x.constructor, a = x.c, b = (y = new Big(y)).c, k = x.s == y.s ? 1 : -1, dp = Big.DP;
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);
    if (!b[0]) throw Error(DIV_BY_ZERO);
    if (!a[0]) return new Big(k * 0);
    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), rl = r.length, q = y, qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1;
    q.s = k;
    k = d < 0 ? 0 : d;
    bz.unshift(0);
    for (;rl++ < bl; ) r.push(0);
    do {
        for (n = 0; n < 10; n++) {
            if (bl != (rl = r.length)) {
                cmp = bl > rl ? 1 : -1;
            } else {
                for (ri = -1, cmp = 0; ++ri < bl; ) {
                    if (b[ri] != r[ri]) {
                        cmp = b[ri] > r[ri] ? 1 : -1;
                        break;
                    }
                }
            }
            if (cmp < 0) {
                for (bt = rl == bl ? b : bz; rl; ) {
                    if (r[--rl] < bt[rl]) {
                        ri = rl;
                        for (;ri && !r[--ri]; ) r[ri] = 9;
                        --r[ri];
                        r[rl] += 10;
                    }
                    r[rl] -= bt[rl];
                }
                for (;!r[0]; ) r.shift();
            } else {
                break;
            }
        }
        qc[qi++] = cmp ? n : ++n;
        if (r[0] && cmp) r[rl] = a[ai] || 0; else r = [ a[ai] ];
    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);
    if (!qc[0] && qi != 1) {
        qc.shift();
        q.e--;
    }
    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);
    return q;
};

P.eq = function(y) {
    return !this.cmp(y);
};

P.gt = function(y) {
    return this.cmp(y) > 0;
};

P.gte = function(y) {
    return this.cmp(y) > -1;
};

P.lt = function(y) {
    return this.cmp(y) < 0;
};

P.lte = function(y) {
    return this.cmp(y) < 1;
};

P.minus = P.sub = function(y) {
    var i, j, t, xlty, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;
    if (a != b) {
        y.s = -b;
        return x.plus(y);
    }
    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;
    if (!xc[0] || !yc[0]) {
        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);
    }
    if (a = xe - ye) {
        if (xlty = a < 0) {
            a = -a;
            t = xc;
        } else {
            ye = xe;
            t = yc;
        }
        t.reverse();
        for (b = a; b--; ) t.push(0);
        t.reverse();
    } else {
        j = ((xlty = xc.length < yc.length) ? xc : yc).length;
        for (a = b = 0; b < j; b++) {
            if (xc[b] != yc[b]) {
                xlty = xc[b] < yc[b];
                break;
            }
        }
    }
    if (xlty) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
    }
    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (;b--; ) xc[i++] = 0;
    for (b = i; j > a; ) {
        if (xc[--j] < yc[j]) {
            for (i = j; i && !xc[--i]; ) xc[i] = 9;
            --xc[i];
            xc[j] += 10;
        }
        xc[j] -= yc[j];
    }
    for (;xc[--b] === 0; ) xc.pop();
    for (;xc[0] === 0; ) {
        xc.shift();
        --ye;
    }
    if (!xc[0]) {
        y.s = 1;
        xc = [ ye = 0 ];
    }
    y.c = xc;
    y.e = ye;
    return y;
};

P.mod = function(y) {
    var ygtx, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;
    if (!y.c[0]) throw Error(DIV_BY_ZERO);
    x.s = y.s = 1;
    ygtx = y.cmp(x) == 1;
    x.s = a;
    y.s = b;
    if (ygtx) return new Big(x);
    a = Big.DP;
    b = Big.RM;
    Big.DP = Big.RM = 0;
    x = x.div(y);
    Big.DP = a;
    Big.RM = b;
    return this.minus(x.times(y));
};

P.plus = P.add = function(y) {
    var t, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;
    if (a != b) {
        y.s = -b;
        return x.minus(y);
    }
    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;
    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);
    xc = xc.slice();
    if (a = xe - ye) {
        if (a > 0) {
            ye = xe;
            t = yc;
        } else {
            a = -a;
            t = xc;
        }
        t.reverse();
        for (;a--; ) t.push(0);
        t.reverse();
    }
    if (xc.length - yc.length < 0) {
        t = yc;
        yc = xc;
        xc = t;
    }
    a = yc.length;
    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;
    if (b) {
        xc.unshift(b);
        ++ye;
    }
    for (a = xc.length; xc[--a] === 0; ) xc.pop();
    y.c = xc;
    y.e = ye;
    return y;
};

P.pow = function(n) {
    var x = this, one = new x.constructor(1), y = one, isneg = n < 0;
    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + "exponent");
    if (isneg) n = -n;
    for (;;) {
        if (n & 1) y = y.times(x);
        n >>= 1;
        if (!n) break;
        x = x.times(x);
    }
    return isneg ? one.div(y) : y;
};

P.round = function(dp, rm) {
    var Big = this.constructor;
    if (dp === UNDEFINED) dp = 0; else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);
    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);
};

P.sqrt = function() {
    var r, c, t, x = this, Big = x.constructor, s = x.s, e = x.e, half = new Big(.5);
    if (!x.c[0]) return new Big(x);
    if (s < 0) throw Error(NAME + "No square root");
    s = Math.sqrt(x + "");
    if (s === 0 || s === 1 / 0) {
        c = x.c.join("");
        if (!(c.length + e & 1)) c += "0";
        s = Math.sqrt(c);
        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
        r = new Big((s == 1 / 0 ? "1e" : (s = s.toExponential()).slice(0, s.indexOf("e") + 1)) + e);
    } else {
        r = new Big(s);
    }
    e = r.e + (Big.DP += 4);
    do {
        t = r;
        r = half.times(t.plus(x.div(t)));
    } while (t.c.slice(0, e).join("") !== r.c.slice(0, e).join(""));
    return round(r, Big.DP -= 4, Big.RM);
};

P.times = P.mul = function(y) {
    var c, x = this, Big = x.constructor, xc = x.c, yc = (y = new Big(y)).c, a = xc.length, b = yc.length, i = x.e, j = y.e;
    y.s = x.s == y.s ? 1 : -1;
    if (!xc[0] || !yc[0]) return new Big(y.s * 0);
    y.e = i + j;
    if (a < b) {
        c = xc;
        xc = yc;
        yc = c;
        j = a;
        a = b;
        b = j;
    }
    for (c = new Array(j = a + b); j--; ) c[j] = 0;
    for (i = b; i--; ) {
        b = 0;
        for (j = a + i; j > i; ) {
            b = c[j] + yc[i] * xc[j - i - 1] + b;
            c[j--] = b % 10;
            b = b / 10 | 0;
        }
        c[j] = (c[j] + b) % 10;
    }
    if (b) ++y.e; else c.shift();
    for (i = c.length; !c[--i]; ) c.pop();
    y.c = c;
    return y;
};

P.toExponential = function(dp) {
    return stringify(this, 1, dp, dp);
};

P.toFixed = function(dp) {
    return stringify(this, 2, dp, this.e + dp);
};

P.toPrecision = function(sd) {
    return stringify(this, 3, sd, sd - 1);
};

P.toString = function() {
    return stringify(this);
};

P.valueOf = P.toJSON = function() {
    return stringify(this, 4);
};

var Big = _Big_();

function multiply(x, y) {
    return new Big(x).times(y).toString();
}

function format(value, precision) {
    const bigValue = new Big(value);
    let stringValue = bigValue.toString();
    stringValue = scientificToNumber(stringValue);
    if (stringValue.includes(".")) {
        let strArray = stringValue.split(".");
        if (strArray[1].length >= precision) {
            if (0 == precision) {
                return strArray[0];
            } else {
                let truncate = strArray[1].substring(0, precision);
                return `${strArray[0]}.${truncate}`;
            }
        } else {
            let zeroNumber = precision - strArray[1].length;
            var str = "";
            for (let i = 0; i < zeroNumber; i++) {
                str += "0";
            }
            return `${stringValue}${str}`;
        }
    } else {
        if (0 == precision) {
            return stringValue;
        } else {
            let zeroNumber = precision;
            var str = "";
            for (let i = 0; i < zeroNumber; i++) {
                str += "0";
            }
            return `${stringValue}.${str}`;
        }
    }
}

function bignumber(arr) {
    if (Array.isArray(arr)) {
        return arr.map((value => Big(value).toFixed()));
    } else {
        return Big(arr).toFixed();
    }
}

function scientificToNumber(num) {
    if (/\d+\.?\d*e[\+\-]*\d+/i.test(num)) {
        let zero = "0";
        let parts = String(num).toLowerCase().split("e");
        let e = parts[1];
        let zeroLen = Math.abs(e);
        let sign = e / zeroLen;
        let beforeArr = parts[0].split(".");
        if (sign < 0) {
            num = zero + "." + new Array(zeroLen).join(zero) + beforeArr.join("");
        } else {
            let dec = beforeArr[1];
            if (dec) {
                zeroLen = zeroLen - dec.length;
                num = beforeArr.join("") + new Array(zeroLen + 1).join(zero);
            }
        }
    }
    return num;
}

function parseFloatOrDefault(value, defaultValue = 0) {
    const parsed = parseFloat(value);
    return isNaN(parsed) ? defaultValue : parsed;
}

var clickable = true;

const UnitType = {
    unitTypeSymbol: "symbol",
    unitTypeUSDT: "usdt"
};

const TabType = {
    tabTypePosition: "position",
    tabTypeOpenOrders: "openOrders",
    tabTypeOrders: "orders",
    tabTypeHistory: "history"
};

var upColorList;

var downColorList;

var contractInfoData = new Map;

var commonData = {
    userSign: "",
    contractH5Url: "",
    currencyRate: "6.4",
    currencyCharacter: "CNY",
    priceColorType: 0,
    colorMode: 0,
    OS: 0,
    appVersion: "",
    isInReview: 1,
    isLogin: 0,
    webUrl: "",
    language: "",
    marketData: {},
    linearSwapWsData: {},
    linearSwapPeriodKlineWs: {},
    unitType: UnitType.unitTypeSymbol,
    lastUnitType: UnitType.unitTypeSymbol,
    openSingleMargin: true,
    curTabType: TabType.tabTypePosition,
    isChild: false,
    navbarHeight: 44,
    statusBarHeight: 44,
    source: "app",
    userInfo: {},
    copytradingSelSymbol: "",
    accountInfo: {},
    available: 0,
    unionMode: false
};

async function subPriceWebSocket(type = "linearSwapWs", params = {}) {
    await $nativeAPI.tradingBotBridge({
        action: "subPriceWebSocket",
        type: type,
        params: JSON.stringify(params)
    });
}

async function unsubPriceWebSocket(type = "linearSwapWs", params = {}) {
    await $nativeAPI.tradingBotBridge({
        action: "unsubPriceWebSocket",
        type: type,
        params: JSON.stringify(params)
    });
}

function getModelByContractShortType(contractShortType) {
    if (contractInfoData.has(contractShortType)) {
        return contractInfoData.get(contractShortType);
    }
    return null;
}

function getSymbolLinearSwapPeriodKlineWsData(contractShortType) {
    if (isInvalidString(contractShortType)) return null;
    let data = commonData.linearSwapPeriodKlineWs[contractShortType];
    if (null != data && Object.getOwnPropertyNames(data).length > 0) {
        return data;
    }
    if (commonData.linearSwapWsData.hasOwnProperty(contractShortType)) {
        let data = commonData.linearSwapWsData[contractShortType];
        var tempObject = {};
        tempObject.symbol = data.symbol;
        tempObject.close = data.close;
        tempObject.open = data.open;
        return tempObject;
    }
    return null;
}

function getContractSize(contractInfo) {
    if (contractInfo && contractInfo.hasOwnProperty("contract_size")) {
        return contractInfo.contract_size;
    }
    return 0;
}

function getPriceTickPrecision(contractInfo) {
    if (contractInfo == null || isInvalidString(contractInfo.price_tick)) {
        return 4;
    }
    var sizeString = bignumber(contractInfo.price_tick);
    return sizeString.split(".")[1].length;
}

function isInvalidString(str) {
    return !str || str.length === 0 || str == "undefined";
}

async function requestContractInfoData() {
    console.log("requestContractInfoData");
    var params = {
        business_type: "all",
        trade_partition: "all"
    };
    var respData = await sendRequest("linear-swap-order/x/v1/linear_swap_contract_info", params, 0, 8);
    if (respData != null && respData.length > 0) {
        for (var dataCell of respData) {
            contractInfoData.set(dataCell.contract_code, dataCell);
            contractInfoData.set(dataCell.contract_short_type, dataCell);
        }
    }
    return respData;
}

async function getAccountInfo() {
    var params = {
        business_type: "all",
        trade_partition: "all",
        margin_account: "USDT"
    };
    var header = {
        "Content-Type": "application/json"
    };
    if (commonData.unionMode) {
        const responseObj = await sendRequest("unified/v5/account/balance", {}, 0, 8, header = header);
        if (responseObj != null) {
            const detailList = responseObj["details"];
            if (detailList != null) {
                for (const item of detailList) {
                    if (item.currency == "USDT") {
                        commonData.available = item.withdraw_available;
                        break;
                    }
                }
            }
        }
    }
    const accountInfo = await sendRequest("linear-swap-order/x/v1/linear_swap_cross_account_info", params, 1, 8, header = header);
    if (accountInfo != null && accountInfo.length > 0) {
        commonData.accountInfo = accountInfo;
        if (!commonData.unionMode) {
            commonData.available = accountInfo[0]["withdraw_available"];
        }
    }
    return accountInfo;
}

async function sendRequest(path, params = {}, method = 0, hostType = 0, header = {}) {
    console.log(`request ${path}, params:${JSON.stringify(params)}`);
    if (hostType == 5 || hostType == 6) {
        header["Content-Type"] = "application/json";
    }
    const param = {
        path: path,
        method: method,
        hostType: hostType,
        header: header,
        params: params
    };
    try {
        var responseString = await $nativeAPI.request(JSON.stringify(param));
        var response = JSON.parse(responseString);
        if (8 == hostType) {
            var status = response.status;
            var code = response.code;
            var err_code = response.err_code;
            var err_msg = response.err_msg;
            if (status == "ok" || code == "200") {
                var {code: code, data: data} = response;
                console.log(`request ${path} done`);
                if (typeof data === "number") {
                    let start = `"data":`;
                    let startIndex = responseString.indexOf(start);
                    let end = `,"ts":`;
                    let endIndex = responseString.indexOf(end);
                    let dataString = responseString.substring(startIndex + start.length, endIndex);
                    console.log(`data is typeof number, dataString = ${dataString}`);
                    return dataString;
                }
                return data;
            } else {
                console.log(`request failed, code=${err_code}, message=${err_msg}`);
                return null;
            }
        } else {
            return response;
        }
    } catch (e) {
        console.log(`request error, error=${e}`);
        return null;
    }
}

function handleSpotResponse(response, toast = false) {
    if (!response || response == null) {
        if (toast) {
            showToast($i18n.n_check_network);
        }
        return null;
    }
    var {code: code, data: data} = response;
    if (code == 200) {
        if (data == null) {
            return {};
        }
        return data;
    } else if (toast) {
        if (!isInvalidString(response.message)) {
            showToast(response.message);
        }
    }
    return null;
}

async function sendRequestWithCache(path, callback, params = {}, method = 0, hostType = 0, header = {}, cacheKeyList = null) {
    var cacheKey = getCacheKey(path, params, cacheKeyList);
    const cache = await read("apiCache", cacheKey);
    if (cache && callback) {
        callback(cache, true);
    }
    let requestData = await sendRequest(path, params, method, hostType, header);
    if (8 != hostType) {
        requestData = handleSpotResponse(requestData, false);
    }
    if (requestData && callback) {
        callback(requestData, false);
        await save("apiCache", cacheKey, requestData);
    }
    return requestData;
}

function getCacheKey(path, params, cacheKeyList = null) {
    var cacheKey = "";
    if (cacheKeyList == null) {
        var paramStr = JSON.stringify(params);
        cacheKey = `${path}_${paramStr}_${commonData.language}_${commonData.colorMode}_${commonData.isLogin}`;
    } else if (cacheKeyList.length == 0) {
        cacheKey = `${path}_${commonData.language}_${commonData.colorMode}_${commonData.isLogin}`;
    } else {
        var cacheKeyListStr = cacheKeyList.join("_");
        cacheKey = `${path}_${cacheKeyListStr}_${commonData.language}_${commonData.colorMode}_${commonData.isLogin}`;
    }
    return cacheKey;
}

async function copyText(content, label = "", toast = $i18n.n_replicated) {
    try {
        await $nativeAPI.clipBoard(JSON.stringify({
            label: label,
            content: content,
            toast: toast
        }));
    } catch (error) {
        console.log(`copy clipboard error:${error}`);
    }
}

function getPriceColor(ratio) {
    if (ratio == null) {
        ratio = 0;
    }
    const ratio_abs = Math.abs(ratio);
    var colorLevel = 0;
    if (ratio_abs > 0 && ratio_abs < 3) {
        colorLevel = 1;
    } else if (ratio_abs >= 3 && ratio_abs < 8) {
        colorLevel = 2;
    } else if (ratio_abs >= 8) {
        colorLevel = 3;
    }
    var colorHexStr = null;
    if (ratio > 0) {
        colorHexStr = upColorList[colorLevel];
    } else {
        colorHexStr = downColorList[colorLevel];
    }
    return colorHexStr;
}

function formatPriceString(priceStr, precision) {
    const priceNum = Number(priceStr);
    const bigValue = new Big(priceNum);
    const precisionNum = Number(precision);
    const priceString = bigValue.toFixed(precisionNum, {
        notation: "fixed",
        precisionNum: precisionNum
    });
    return priceString;
}

function getPriceString(priceStr, precision) {
    const priceNum = Number(priceStr);
    const bigValue = new Big(priceNum);
    const precisionNum = Number(precision);
    const priceString = bigValue.toFixed(precisionNum, {
        notation: "fixed",
        precisionNum: precisionNum
    });
    const finalPriceStr = priceString.replace(/\d(?=(\d{3})+\.)/g, "$&,");
    return finalPriceStr;
}

async function openURL(url) {
    if (!clickable) {
        return;
    }
    console.log(`open url:`, url);
    if (url && url != null && url.length > 0) {
        await $nativeAPI.openRoute(url);
    }
    clickable = false;
    setTimeout((() => {
        clickable = true;
    }), 1e3);
}

async function openPage(page, type = "native", params = {}) {
    await $nativeAPI.tradingBotBridge({
        action: "openPage",
        type: type,
        page: page,
        params: JSON.stringify(params)
    });
}

async function iOSCannotGoBackCurrentPage(page, type = "native", params = {}) {
    await $nativeAPI.tradingBotBridge({
        action: "cannotGoBack",
        type: type,
        page: page,
        params: JSON.stringify(params)
    });
}

async function H5FilterSetData(params = {}) {
    await $nativeAPI.tradingBotBridge({
        action: "H5FilterSetData",
        params: JSON.stringify(params)
    });
}

async function H5FilterPopClose(params = {}) {
    await $nativeAPI.tradingBotBridge({
        action: "H5FilterPopClose"
    });
}

async function changeLeverDialog(params = {}) {
    await $nativeAPI.tradingBotBridge({
        action: "changeLeverDialog",
        params: JSON.stringify(params)
    });
}

async function showToast(msg) {
    await $nativeAPI.hbToast(msg);
}

async function save(module, key, data) {
    await $nativeAPI.storage({
        action: "save",
        name: module,
        key: key,
        data: JSON.stringify(data)
    });
}

async function read(module, key) {
    const data = await $nativeAPI.storage({
        action: "read",
        name: module,
        key: key
    });
    if (data && data != "") {
        return JSON.parse(data);
    }
    return null;
}

function sendLoginStatus$1(data) {
    commonData.isLogin = parseInt(data.isLogin);
    if (data.userInfo != null) {
        commonData.userInfo.name = data.userInfo.name;
        commonData.userInfo.uId = data.userInfo.uId;
        commonData.userInfo.isChildAccount = parseInt(data.userInfo.isChildAccount);
        commonData.userInfo.headImage = data.userInfo.headImage;
        commonData.userInfo.isNFT = parseInt(data.userInfo.isNFT);
        commonData.userInfo.countryId = data.userInfo.countryId;
        commonData.userInfo.registerCountryId = data.userInfo.registerCountryId;
    }
    console.log(`isLogin = ${commonData.isLogin}`);
}

async function sendCommonConfig$1(param) {
    console.log(`common.js, sendCommonConfig=${JSON.stringify(param)}`);
    commonData.contractH5Url = param.contractH5Url;
    if (!isInvalidString(param.source)) {
        commonData.source = param.source;
    }
    commonData.currencyRate = param.currencyRate;
    if (param.currencyRate != null && 0 == param.currencyRate.length) {
        commonData.currencyRate = "1";
    }
    commonData.currencyCharacter = param.currencyCharacter;
    commonData.priceColorType = parseInt(param.priceColorType);
    commonData.colorMode = parseInt(param.colorMode);
    commonData.unionMode = parseBoolean(param.unionMode);
    commonData.OS = parseInt(param.OS);
    commonData.appVersion = param.appVersion;
    commonData.language = param.language;
    commonData.webUrl = param.webUrl;
    let swapUnitType = await read("tradingBot", "LINEAR_SWAP");
    commonData.unitType = swapUnitType;
    commonData.lastUnitType = swapUnitType;
    commonData.isChild = param.isChild;
    var redColorList = [ "#E94359", "#E94359", "#E94359", "#E94359" ];
    var greenColorList = [ "#00A171", "#00A171", "#00A171", "#00A171" ];
    if (parseInt(commonData.priceColorType) == 0) {
        upColorList = redColorList;
        downColorList = greenColorList;
    } else {
        upColorList = greenColorList;
        downColorList = redColorList;
    }
    commonData.statusBarHeight = param.statusBarHeight;
}

function getUpDownColor(isUpper = true, level = 1) {
    const lev = level < 4 ? level : 0;
    if (isUpper) {
        return upColorList[lev];
    }
    return downColorList[lev];
}

function getColorWithAlpha(color, alpha = 1) {
    var dec = 255 * alpha;
    var alphaHex = parseInt(dec).toString(16);
    console.log(`alphaHex = ${alphaHex}`);
    if (/^#/.test(color) && color.length == 7 && alphaHex.length < 3) {
        if (alphaHex.length == 1) {
            alphaHex = `0${alphaHex}`;
        }
        color = color.substring(0, 1) + alphaHex + color.substring(1);
        console.log(`color = ${color}`);
    } else {
        console.log("getColorWithAlpha 颜色透明度处理异常");
    }
    return color;
}

let symbolDescMap = {};

function symbolDesc(symbol) {
    if (!symbolDescMap.hasOwnProperty(symbol)) {
        symbolDescMap[symbol] = $i18n.$intercept.n_contract_swap_trade_name(symbol.replace("-", ""));
    }
    return symbolDescMap[symbol];
}

function moduleDefine(moduleName, startFunction, defaultDataFunction) {
    console.log(`loadModule`, moduleName);
    $data[moduleName] = defaultDataFunction();
    $event[moduleName] = {
        start: startFunction
    };
    return {
        moduleEvent: $event[moduleName],
        moduleData: $data[moduleName]
    };
}

Date.prototype.Format = function(fmt) {
    var o = {
        "M+": this.getMonth() + 1,
        "d+": this.getDate(),
        "h+": this.getHours(),
        "m+": this.getMinutes(),
        "s+": this.getSeconds(),
        "q+": Math.floor((this.getMonth() + 3) / 3),
        S: this.getMilliseconds()
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o) if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    return fmt;
};

function showLoading(isShow = true) {
    $nativeAPI.showLoading(isShow ? 1 : 0);
}

function getPNGIconURLByCurrency(currency) {
    let baseUrl = commonData.webUrl ? commonData.webUrl : "";
    return `${baseUrl}/-/x/hb/p/api/contents/currency/icon_png/${currency.toLowerCase()}.png`;
}

function parseBoolean(string) {
    switch (String(string).toLowerCase()) {
      case "true":
      case "1":
      case "yes":
      case "y":
        return true;

      case "false":
      case "0":
      case "no":
      case "n":
        return false;

      default:
        return undefined;
    }
}

function notNull(string) {
    if (string == null || string == "") {
        return false;
    }
    return true;
}

async function analytics$1(event = "", properties = {}) {
    const propertiesJson = JSON.stringify(properties);
    console.log(`analytics event: ${event}, propertiesJson = ${propertiesJson}`);
    var map = {
        event: event,
        properties: propertiesJson
    };
    await $nativeAPI.analytics(map);
}

async function showDrawer(symbolList, currentSymbol) {
    commonData.copytradingSelSymbol = await read("symbolMenu_copyTrading", "selSymbol");
    await save("symbolMenu_copyTrading", "selSymbol", currentSymbol);
    await $nativeAPI.tradingBotBridge({
        action: "showDrawer",
        symbolList: JSON.stringify(symbolList)
    });
    setTimeout((async function() {
        await save("symbolMenu_copyTrading", "selSymbol", commonData.copytradingSelSymbol);
    }), 1e3);
}

function formatDecimal(num, precision = 4, needThousands = true) {
    if (isNaN(num) || String(num).length === 0) {
        return "0";
    }
    let str = format(num, precision);
    return needThousands ? thousandsFormatter(str) : str;
}

function thousandsFormatter(number) {
    let [integerPart, decimalPart] = number.toString().split(".");
    integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    if (decimalPart) {
        return integerPart + "." + decimalPart;
    } else {
        return integerPart;
    }
}

async function start$p() {}

function defaultData$q() {
    return {
        titleVisibility: "visible",
        oneButtonVisibility: "gone",
        twoButtonVisibility: "visible",
        centerButtonText: $i18n.n_copy_trading_me_know,
        leftButtonText: $i18n.n_cancel,
        rightButtonText: $i18n.n_sure,
        popTitle: $i18n.n_copy_trading_tip,
        popContent1: "",
        popContent2: "",
        popShow: "false",
        callback1: null,
        callback2: null
    };
}

const {moduleData: moduleData$p, moduleEvent: moduleEvent$p} = moduleDefine("commonPop", start$p, defaultData$q);

function popUpContentOfOneButton(title, conetent, centerText, titleVisibility = "visible", callback = null) {
    moduleData$p.oneButtonVisibility = "visible";
    moduleData$p.twoButtonVisibility = "gone";
    moduleData$p.titleVisibility = titleVisibility;
    moduleData$p.popContent2 = "";
    if (title && title !== null) {
        moduleData$p.popTitle = title;
    }
    if (conetent && conetent !== null) {
        moduleData$p.popContent1 = conetent;
    }
    if (centerText && centerText !== null) {
        moduleData$p.centerButtonText = centerText;
    }
    moduleData$p.callback1 = callback;
    moduleData$p.popShow = "true";
}

function popUpTwoContentOfOneButton(title, conetent1, conetent2, centerText, titleVisibility = "visible", callback = null) {
    moduleData$p.oneButtonVisibility = "visible";
    moduleData$p.twoButtonVisibility = "gone";
    moduleData$p.titleVisibility = titleVisibility;
    if (title && title !== null) {
        moduleData$p.popTitle = title;
    }
    if (conetent1 && conetent1 !== null) {
        moduleData$p.popContent1 = conetent1;
    }
    if (conetent2 && conetent2 !== null) {
        moduleData$p.popContent2 = conetent2;
    }
    if (centerText && centerText !== null) {
        moduleData$p.centerButtonText = centerText;
    }
    moduleData$p.callback1 = callback;
    moduleData$p.popShow = "true";
}

moduleEvent$p.leftButtonClick = function() {
    if (moduleData$p.callback1 != null) {
        moduleData$p.callback1();
    }
    moduleData$p.popShow = "false";
};

moduleEvent$p.rightButtonClick = function() {
    if (moduleData$p.callback2 != null) {
        moduleData$p.callback2();
    }
    moduleData$p.popShow = "false";
};

moduleEvent$p.popDismiss = function() {
    moduleData$p.popShow = "false";
};

var botRankParams$1 = [];

var curSelectedIndex = 1;

function initData() {
    console.log("tradeGlobalData.js initData");
    botRankParams$1 = [];
    for (let i = 0; i < 5; i++) {
        var item = {
            symbol: "",
            searchType: 1,
            rankType: 3,
            sortMenuIndex: 0,
            timeRangeType: 0,
            queryStrategyType: 99,
            profitRateType: 0,
            listData: [],
            trendType: 3
        };
        item.index = i;
        switch (i) {
          case 0:
            item.queryStrategyType = 99;
            break;

          case 1:
            item.queryStrategyType = -1;
            break;

          case 2:
            item.queryStrategyType = 2;
            break;

          case 3:
            item.queryStrategyType = 3;
            break;

          case 4:
            item.searchType = 2;
            break;
        }
        botRankParams$1.push(item);
    }
}

function getCurrentParams$2(index = curSelectedIndex) {
    return botRankParams$1[index];
}

function setCurrentListData(list, index) {
    botRankParams$1[index].listData = list;
}

function getCurrentListData(index = curSelectedIndex) {
    return botRankParams$1[index].listData;
}

function onSelectedIndex$3(index) {
    curSelectedIndex = index;
}

initData();

async function start$o() {
    refreshAccountShowHide();
}

function defaultData$p() {
    return {
        totalAssetsTitle: `${$i18n.n_all_asset_title}(USDT)`,
        totalAssetDisplay: "",
        todayProfitDisplay: "",
        todayRateDisplay: "",
        traderInfo: {
            totalAssetFormat: "",
            todayProfitFormat: "",
            todayRateFormat: ""
        },
        assetBalanceUSDTChartY: [],
        balanceRate30: 1,
        icShowHide: "@drawable/edge_engine_trading_bot_eye_show",
        assetVisibility: "gone",
        klineVisibility: "gone"
    };
}

const {moduleData: moduleData$o, moduleEvent: moduleEvent$o} = moduleDefine("tradeTopAsset", start$o, defaultData$p);

async function onAppear() {
    console.log("tradeTopAsset onAppear");
    analytics();
}

async function analytics() {}

async function requestTopAssetInfo() {
    if (commonData.isLogin == 0) {
        return;
    }
    let traderInfo = await sendRequest("v1/quantization/gridding/asset-info");
    traderInfo = handleSpotResponse(traderInfo, false);
    if (!traderInfo || traderInfo == null) {
        if (isNaN(parseFloat(moduleData$o.traderInfo.totalAssetUSDT))) {
            moduleData$o.traderInfo.totalAssetFormat = "--";
        }
        let tempTodayProfit = parseFloat(moduleData$o.traderInfo.todayProfitUSDT);
        if (isNaN(tempTodayProfit)) {
            moduleData$o.traderInfo.todayProfitFormat = "--";
        }
        let tempTodayRate = parseFloat(moduleData$o.traderInfo.todayProfitRate);
        if (isNaN(tempTodayRate)) {
            moduleData$o.traderInfo.todayRateFormat = "--";
            moduleData$o.todayRateColor = "@color/kColorThreeLevelText";
        }
        refreshAccountShowHide();
        return;
    }
    if (isNaN(parseFloat(traderInfo.totalAssetUSDT))) {
        traderInfo.totalAssetFormat = "--";
    } else {
        traderInfo.totalAssetFormat = formatDecimal(traderInfo.totalAssetUSDT, 2, true);
    }
    let tempTodayProfit = parseFloat(traderInfo.todayProfitUSDT);
    if (isNaN(tempTodayProfit)) {
        traderInfo.todayProfitFormat = "--";
    } else {
        traderInfo.todayProfitFormat = `${tempTodayProfit >= 0 ? "+" : ""}${format(tempTodayProfit, 2)}`;
    }
    let tempTodayRate = parseFloat(traderInfo.todayProfitRate);
    if (isNaN(tempTodayRate)) {
        traderInfo.todayRateFormat = "--";
        moduleData$o.todayRateColor = "@color/kColorThreeLevelText";
    } else {
        traderInfo.todayRateFormat = `${tempTodayRate >= 0 ? "+" : ""}${format(multiply(traderInfo.todayProfitRate, 100), 2)}%`;
        moduleData$o.todayRateColor = tempTodayRate >= 0 ? getUpDownColor() : getUpDownColor(false);
    }
    let balanceLen = 0;
    if (traderInfo.assetBalanceUSDTChartY && traderInfo.assetBalanceUSDTChartY != null) {
        balanceLen = traderInfo.assetBalanceUSDTChartY.length;
        if (balanceLen >= 2) {
            moduleData$o.balanceRate30 = parseFloat(traderInfo.assetBalanceUSDTChartY[balanceLen - 1]) - parseFloat(traderInfo.assetBalanceUSDTChartY[0]);
            console.log(`tradeTopAsset.js  balanceLen=${balanceLen} last=${traderInfo.assetBalanceUSDTChartY[balanceLen - 1]} first=${traderInfo.assetBalanceUSDTChartY[0]} moduleData.balanceRate30=${moduleData$o.balanceRate30}`);
        } else {
            moduleData$o.balanceRate30 = 1;
        }
    }
    moduleData$o.assetBalanceUSDTChartY = traderInfo.assetBalanceUSDTChartY;
    moduleData$o.klineVisibility = balanceLen > 0 ? "visible" : "gone";
    moduleData$o.traderInfo = traderInfo;
    refreshAccountShowHide();
}

moduleEvent$o.showHide = async function() {
    let isShowAccount = await read("tradingBot", "showAccount");
    await save("tradingBot", "showAccount", !isShowAccount);
    refreshAccountShowHide();
};

async function refreshAccountShowHide() {
    let isShowAccount = await read("tradingBot", "showAccount");
    console.log(`refreshAccountShowHide isShowAccount: ${isShowAccount}`);
    if (isShowAccount == null || isShowAccount) {
        moduleData$o.icShowHide = "@drawable/edge_engine_trading_bot_eye_show";
        var data = moduleData$o.traderInfo;
        moduleData$o.totalAssetDisplay = data.totalAssetFormat;
        moduleData$o.todayProfitDisplay = data.todayProfitFormat;
        moduleData$o.todayRateDisplay = data.todayRateFormat;
    } else {
        moduleData$o.icShowHide = "@drawable/edge_engine_trading_bot_eye_hide";
        moduleData$o.totalAssetDisplay = "******";
        moduleData$o.todayProfitDisplay = "******";
        moduleData$o.todayRateDisplay = "******";
    }
}

moduleEvent$o.totalAssetsDialog = async function() {
    popUpContentOfOneButton($i18n.n_all_asset_title, $i18n.n_trade_bot_total_assets_desc);
    await analytics$1("tradingbot_click_home_myassets");
};

moduleEvent$o.todayProfitDialog = async function() {
    var traderInfo = moduleData$o.traderInfo;
    var content = $i18n.n_trade_total_todays_profit_of_all_robotst;
    if (!isInvalidString(traderInfo.contractTodayProfitUSDT)) {
        content = content + "\n" + $i18n.$intercept.n_trade_contract_grid_profit(formatDecimal(traderInfo.contractTodayProfitUSDT));
    }
    if (!isInvalidString(traderInfo.otherTodayProfitUSDT)) {
        content = content + "\n" + $i18n.$intercept.n_trade_spot_grid_profit(formatDecimal(traderInfo.otherTodayProfitUSDT));
    }
    popUpContentOfOneButton($i18n.n_today_profit, content);
    await analytics$1("tradingbot_click_home_myroi");
};

async function gotoMyBot() {
    openURL(`${commonData.webUrl}/${commonData.language}/tradingbot/h5/my-strategies?showbar=1`);
    await analytics$1("tradingbot_click_home_mybots");
}

async function loginStateChange() {
    if (commonData.isLogin == 0) {
        moduleData$o.assetVisibility = "gone";
    } else {
        moduleData$o.assetVisibility = "visible";
        refreshAccountShowHide();
        requestTopAssetInfo();
    }
}

moduleEvent$o.loginStateChange = loginStateChange;

moduleEvent$o.gotoMyBot = gotoMyBot;

moduleEvent$o.requestTopAssetInfo = requestTopAssetInfo;

moduleEvent$o.onAppear = onAppear;

async function start$n() {}

function defaultData$o() {
    return {
        coupons: [],
        couponPopShow: false,
        couponTipStr: $i18n.$intercept.n_exchange_coupon_available_number("--"),
        couponTipWeight: "400",
        showCouponPoint: "gone",
        listVisibility: "visible",
        emptyVisibility: "gone",
        backgroundColor: "@color/kColorMajorTheme100",
        textColor: "@color/KBaseTextColor",
        maxCouponOnce: 2
    };
}

var couponStr = "";

var curCouponList = [];

var callbackSet = new Set;

var selectedItemMap = new Map;

var tempSelectedItemMap = new Map;

var totalCouponCount = 0;

var loadServerCouponData = false;

const {moduleData: moduleData$n, moduleEvent: moduleEvent$n} = moduleDefine("couponPop", start$n, defaultData$o);

async function requestCoupon(force = true) {
    if (!force && loadServerCouponData) {
        return;
    }
    var params = {
        types: 15,
        state: 0
    };
    var data = await sendRequest("v1/open/voucher/user/list", params);
    data = handleSpotResponse(data, false);
    try {
        if (!data || data == null) {
            moduleData$n.coupons = curCouponList;
            moduleData$n.listVisibility = curCouponList.length > 0 ? "visible" : "gone";
            moduleData$n.emptyVisibility = curCouponList.length > 0 ? "gone" : "visible";
            return;
        } else if (!data.couponList || data.couponList == null || data.couponList == 0) {
            curCouponList = [];
            moduleData$n.couponList = [];
            selectedItemMap.clear();
            moduleData$n.listVisibility = "gone";
            moduleData$n.emptyVisibility = "visible";
            refreshUI();
            loadServerCouponData = true;
            callBackWhenDataChange();
        } else {
            await handleData(data.couponList);
            loadServerCouponData = true;
        }
    } catch (e) {
        console.log(`handle couponList  error=${e}`);
    }
}

async function handleData(couponList) {
    curCouponList = [];
    let idList = [];
    for (let i = 0; i < couponList.length; ++i) {
        let item = couponList[i];
        item.index = i;
        item.type = "normal";
        var unSelectedImage = selectedItemMap.size < moduleData$n.maxCouponOnce ? "@drawable/edge_engine_contract_grid_multiple_n" : "@drawable/edge_engine_contract_grid_multiple_d";
        item.selectImage = selectedItemMap.has(item.id) ? "@drawable/edge_engine_contract_grid_multiple_s" : unSelectedImage;
        item.baseCurrency = item.baseCurrency.toUpperCase();
        item.unfold = false;
        item.unfoldVisibility = "gone";
        item.foldVisibility = "visible";
        if (item.validAt > 0) {
            item.time = $i18n.$intercept.n_coupon_time_dealine(new Date(item.validAt).Format("yyyy/MM/dd"));
        } else {
            item.time = "--";
        }
        curCouponList.push(item);
        console.log(`Bryant handleData  item.selectImage=${item.selectImage} item.id=${item.id} curCouponList=${curCouponList.length}`);
        idList.push(item.id);
    }
    couponStr = JSON.stringify(idList.sort());
    let tempCouponStr = await read("tradingBot", "coupon");
    if (idList.length > 0 && tempCouponStr != couponStr) {
        moduleData$n.showCouponPoint = "visible";
    } else {
        moduleData$n.showCouponPoint = "gone";
    }
    moduleData$n.coupons = curCouponList;
    moduleData$n.listVisibility = curCouponList.length > 0 ? "visible" : "gone";
    moduleData$n.emptyVisibility = curCouponList.length > 0 ? "gone" : "visible";
    let needRefresh = false;
    if (selectedItemMap.size > 0) {
        let allIdSet = new Set(idList);
        for (const [key, value] of selectedItemMap.entries()) {
            if (!allIdSet.has(key)) {
                selectedItemMap.delete(key);
                tempSelectedItemMap.delete(key);
                needRefresh = true;
            }
        }
    }
    refreshUI();
    if (needRefresh) {
        callBackWhenDataChange();
    }
}

function popUpContentOfCoupon() {
    tempSelectedItemMap = new Map(selectedItemMap);
    moduleData$n.couponPopShow = true;
    save("tradingBot", "coupon", couponStr);
    moduleData$n.showCouponPoint = "gone";
}

function getExperienceParams() {
    let params = [];
    if (selectedItemMap.size > 0) {
        for (const [key, value] of selectedItemMap.entries()) {
            params.push({
                id: value.id,
                amount: value.amount
            });
        }
    }
    return JSON.stringify(params);
}

moduleEvent$n.popDismiss = function() {
    console.log(`Bryant popDismiss`);
    moduleData$n.couponPopShow = false;
    if (curCouponList.length > 0) {
        for (var i = 0; i < curCouponList.length; i++) {
            var item = curCouponList[i];
            var unSelectedImage = selectedItemMap.size < moduleData$n.maxCouponOnce ? "@drawable/edge_engine_contract_grid_multiple_n" : "@drawable/edge_engine_contract_grid_multiple_d";
            item.selectImage = selectedItemMap.has(item.id) ? "@drawable/edge_engine_contract_grid_multiple_s" : unSelectedImage;
            item.unfold = false;
            item.unfoldVisibility = "gone";
            item.foldVisibility = "visible";
        }
        moduleData$n.coupons = curCouponList;
    }
};

function resetLoadServerCouponData() {
    loadServerCouponData = false;
}

async function resetData() {
    if (curCouponList.length > 0) {
        curCouponList = curCouponList.filter((function(item) {
            item.selectImage = "@drawable/edge_engine_contract_grid_multiple_n";
            item.unfold = false;
            item.unfoldVisibility = "gone";
            item.foldVisibility = "visible";
            return !selectedItemMap.has(item.id);
        }));
        moduleData$n.coupons = curCouponList;
    }
    selectedItemMap.clear();
    tempSelectedItemMap.clear();
    refreshUI();
    callBackWhenDataChange();
    loadServerCouponData = false;
    requestCoupon(true);
}

moduleEvent$n.couponTapAction = function(index) {
    console.log(`Bryant couponTapAction  index=${index}`);
    if (index >= curCouponList.length) {
        return;
    }
    var item = curCouponList[index];
    if (tempSelectedItemMap.has(item.id)) {
        tempSelectedItemMap.delete(item.id);
        item.selectImage = "@drawable/edge_engine_contract_grid_multiple_n";
    } else {
        if (tempSelectedItemMap.size >= moduleData$n.maxCouponOnce) {
            return;
        }
        tempSelectedItemMap.set(item.id, item);
        item.selectImage = "@drawable/edge_engine_contract_grid_multiple_s";
    }
    console.log(`Bryant couponTapAction  item.selectImage=${item.selectImage} item.id=${item.id} tempSelectedItemMap=${tempSelectedItemMap.size}`);
    curCouponList.forEach((function(curCoupon) {
        var unSelectedImage = tempSelectedItemMap.size < moduleData$n.maxCouponOnce ? "@drawable/edge_engine_contract_grid_multiple_n" : "@drawable/edge_engine_contract_grid_multiple_d";
        curCoupon.selectImage = tempSelectedItemMap.has(curCoupon.id) ? "@drawable/edge_engine_contract_grid_multiple_s" : unSelectedImage;
    }));
    moduleData$n.coupons = curCouponList;
};

moduleEvent$n.unfoldRulesTapAction = function(index) {
    console.log(`Bryant unfoldRulesTapAction  index=${index}`);
    if (index >= curCouponList.length) {
        return;
    }
    var item = curCouponList[index];
    item.unfold = !item.unfold;
    item.unfoldVisibility = item.unfold ? "visible" : "gone";
    item.foldVisibility = item.unfold ? "gone" : "visible";
    moduleData$n.coupons = curCouponList;
};

moduleEvent$n.convertTapAction = function() {
    console.log(`Bryant convertTapAction couponSelect callbackSet=${callbackSet.size}`);
    selectedItemMap = tempSelectedItemMap;
    refreshUI();
    moduleEvent$n.popDismiss();
    callBackWhenDataChange();
};

function callBackWhenDataChange() {
    callbackSet.forEach((callback => {
        callback();
    }));
}

function addSelectCouponCallBack(callback) {
    callbackSet.add(callback);
}

function delSelectCouponCallBack(callback) {
    callbackSet.delete(callback);
}

function refreshUI() {
    totalCouponCount = 0;
    for (const [key, value] of selectedItemMap.entries()) {
        totalCouponCount += parseFloat(value.amount);
    }
    if (totalCouponCount == 0) {
        moduleData$n.couponTipStr = $i18n.$intercept.n_exchange_coupon_available_number(String(curCouponList.length));
        moduleData$n.couponTipWeight = "400";
    } else {
        moduleData$n.couponTipStr = $i18n.$intercept.n_bot_detail_coupon_selected_total(`${totalCouponCount} USDT`);
        moduleData$n.couponTipWeight = "500";
    }
}

moduleEvent$n.howGetCoupon = function() {
    console.log(`Bryant howGetCoupon`);
};

function setMaxCouponOnce(maxCouponOnce) {
    moduleData$n.maxCouponOnce = maxCouponOnce;
}

async function start$m() {}

function defaultData$n() {
    var data = {
        confirmPop: {
            warningMsg: "",
            warningVisibility: "gone",
            remindMsg: "",
            symbol: "",
            gridModeDisplay: "",
            trendTypeDisplay: "",
            trendTypeColor: "",
            trendTypeBorderColor: "",
            leverDisplay: "",
            paramsList: []
        },
        originParam: {},
        popShow: "false",
        fromType: 0,
        callback: null,
        checkCount: 0,
        precision: 4,
        submitStatusPopShow: "false"
    };
    return data;
}

const {moduleData: moduleData$m, moduleEvent: moduleEvent$m} = moduleDefine("botCreateConfirmPop", start$m, defaultData$n);

function createBotWithParams(params, fromType, callback) {
    moduleData$m.originParam = params;
    moduleData$m.fromType = fromType;
    moduleData$m.callback = callback;
    showConfirmPop$1(params);
}

function showConfirmPop$1(params) {
    moduleData$m.confirmPop.warningMsg = params.warningMsg;
    if (params.warningMsg.length > 0) {
        moduleData$m.confirmPop.warningVisibility = "visible";
    } else {
        moduleData$m.confirmPop.warningVisibility = "gone";
    }
    moduleData$m.confirmPop.remindMsg = $i18n.$intercept.n_bot_confirm_remind_msg(`${params.volume} USDT`);
    moduleData$m.confirmPop.symbol = params.symbol;
    moduleData$m.confirmPop.symbolDisplay = symbolDesc(params.symbol);
    moduleData$m.confirmPop.gridModeDisplay = $i18n.n_trade_bot_contract_grid;
    moduleData$m.precision = getPriceTickPrecision(getModelByContractShortType(params.symbol));
    switch (parseInt(params.trendType)) {
      case 1:
        moduleData$m.confirmPop.trendTypeDisplay = $i18n.n_contract_grid_buy;
        moduleData$m.confirmPop.trendTypeColor = getUpDownColor();
        moduleData$m.confirmPop.trendTypeBorderColor = getColorWithAlpha(moduleData$m.confirmPop.trendTypeColor, .3);
        break;

      case 2:
        moduleData$m.confirmPop.trendTypeDisplay = $i18n.n_contract_grid_sell;
        moduleData$m.confirmPop.trendTypeColor = getUpDownColor(false);
        moduleData$m.confirmPop.trendTypeBorderColor = getColorWithAlpha(moduleData$m.confirmPop.trendTypeColor, .3);
        break;

      case 0:
        moduleData$m.confirmPop.trendTypeDisplay = $i18n.n_contract_grid_neutral;
        moduleData$m.confirmPop.trendTypeColor = "@color/kColorSecondaryText";
        moduleData$m.confirmPop.trendTypeBorderColor = "@color/kColorPrimarySeparator";
        break;
    }
    moduleData$m.confirmPop.leverDisplay = `${params.lever}X`;
    moduleData$m.confirmPop.paramsList = [];
    var priceItem = {
        cellType: "1",
        title: $i18n.n_contract_grid_preview_title_price,
        content: `${formatDecimal(params.minPrice, moduleData$m.precision)}-${formatDecimal(params.maxPrice, moduleData$m.precision)}`
    };
    moduleData$m.confirmPop.paramsList.push(priceItem);
    var numberItem = {
        cellType: "1",
        title: $i18n.n_bot_confirm_type_and_number,
        content: `${params.runType == "1" ? $i18n.n_grid_trade_dengbi : $i18n.n_grid_trade_dengcha} | ${params.gridNum}`
    };
    moduleData$m.confirmPop.paramsList.push(numberItem);
    var profitRateItem = {
        cellType: "1",
        title: $i18n.n_contract_grid_create_single_of_profit_rate,
        content: `${params.singleProfitRateDisplay}`
    };
    moduleData$m.confirmPop.paramsList.push(profitRateItem);
    var line1 = {
        cellType: "2"
    };
    moduleData$m.confirmPop.paramsList.push(line1);
    var totalVolumeItem = {
        cellType: "1",
        title: $i18n.n_trade_bot_title_total_investment,
        content: `${formatDecimal(params.totalVolume, 4, true)} USDT`
    };
    moduleData$m.confirmPop.paramsList.push(totalVolumeItem);
    var volumeItem = {
        cellType: "1",
        title: $i18n.n_contract_grid_preview_title_volume,
        content: `${formatDecimal(params.volume, 4, true)} USDT`
    };
    moduleData$m.confirmPop.paramsList.push(volumeItem);
    var couponVolumeItem = {
        cellType: "1",
        title: $i18n.n_content_live_exp_gold,
        content: `${formatDecimal(params.couponVolume, 4, true)} USDT`
    };
    moduleData$m.confirmPop.paramsList.push(couponVolumeItem);
    if (params.trendType == 1) {
        if (params.liquidationPriceBuyDisplay != undefined) {
            var liquidationBuyItem = {
                cellType: "1",
                title: $i18n.n_balance_contract_prediction_of_strong_parity,
                content: params.liquidationPriceBuyDisplay
            };
            moduleData$m.confirmPop.paramsList.push(liquidationBuyItem);
        }
    } else if (params.trendType == 2) {
        if (params.liquidationPriceSellDisplay != undefined) {
            var liquidationSellItem = {
                cellType: "1",
                title: $i18n.n_balance_contract_prediction_of_strong_parity,
                content: params.liquidationPriceSellDisplay
            };
            moduleData$m.confirmPop.paramsList.push(liquidationSellItem);
        }
    } else {
        if (params.liquidationPriceBuyDisplay != undefined) {
            var liquidationBuyItem = {
                cellType: "1",
                title: $i18n.n_bot_detail_buy_liquidation_price,
                content: params.liquidationPriceBuyDisplay
            };
            moduleData$m.confirmPop.paramsList.push(liquidationBuyItem);
        }
        if (params.liquidationPriceSellDisplay != undefined) {
            var liquidationSellItem = {
                cellType: "1",
                title: $i18n.n_bot_detail_sell_liquidation_price,
                content: params.liquidationPriceSellDisplay
            };
            moduleData$m.confirmPop.paramsList.push(liquidationSellItem);
        }
    }
    if (!isEmptyString(params.triggerPrice) || !isEmptyString(params.takeProfitPrice) || !isEmptyString(params.stopLossPrice) || params.showBot == true) {
        var line2 = {
            cellType: "2"
        };
        moduleData$m.confirmPop.paramsList.push(line2);
        if (!isEmptyString(params.triggerPrice)) {
            var triggerItem = {
                cellType: "1",
                title: $i18n.n_contract_grid_create_trigger_price,
                content: `${formatDecimal(params.triggerPrice, moduleData$m.precision)} USDT`
            };
            moduleData$m.confirmPop.paramsList.push(triggerItem);
        }
        if (!isEmptyString(params.takeProfitPrice)) {
            if (params.trendType == 0) {
                var terminateMaxPriceItem = {
                    cellType: "1",
                    title: $i18n.n_bot_edit_stop_price_max,
                    content: `${formatDecimal(params.takeProfitPrice, moduleData$m.precision)} USDT`
                };
                moduleData$m.confirmPop.paramsList.push(terminateMaxPriceItem);
            } else {
                var tpItem = {
                    cellType: "1",
                    title: $i18n.n_grid_trade_zhiying,
                    content: `${formatDecimal(params.takeProfitPrice, moduleData$m.precision)} USDT`
                };
                moduleData$m.confirmPop.paramsList.push(tpItem);
            }
        }
        if (!isEmptyString(params.stopLossPrice)) {
            if (params.trendType == 0) {
                var terminateMinPriceItem = {
                    cellType: "1",
                    title: $i18n.n_bot_edit_stop_price_min,
                    content: `${formatDecimal(params.stopLossPrice, moduleData$m.precision)} USDT`
                };
                moduleData$m.confirmPop.paramsList.push(terminateMinPriceItem);
            } else {
                var slItem = {
                    cellType: "1",
                    title: $i18n.n_grid_trade_zhisun,
                    content: `${formatDecimal(params.stopLossPrice, moduleData$m.precision)} USDT`
                };
                moduleData$m.confirmPop.paramsList.push(slItem);
            }
        }
        if (params.showBot == true) {
            var showBotItem = {
                cellType: "1",
                title: $i18n.n_contract_grid_create_show_in_ranking,
                content: $i18n.n_otc_yes
            };
            moduleData$m.confirmPop.paramsList.push(showBotItem);
        }
    }
    moduleData$m.popShow = "true";
}

function confirmPopDismiss() {
    moduleData$m.popShow = "false";
}

function submitStatusPopCancel() {
    moduleData$m.submitStatusPopShow = "false";
    moduleData$m.popShow = "false";
    moduleData$m.callback();
}

function submitStatusPopDismiss() {
    moduleData$m.submitStatusPopShow = "false";
}

async function confirmClick$1() {
    await submit();
    let paramsCopied = 0;
    let paramsCopyId = 0;
    if (!isEmptyString(moduleData$m.originParam.copyId)) {
        paramsCopied = parseInt(moduleData$m.originParam.copied);
        paramsCopyId = parseInt(moduleData$m.originParam.copyId);
    }
    await analytics$1("tradingbot_create_app", {
        copied: paramsCopied,
        copyId: paramsCopyId,
        source: commonData.source
    });
}

async function submit() {
    showLoading(true);
    moduleData$m.checkCount = 0;
    var params = {
        symbol: String(moduleData$m.originParam.symbol),
        minPrice: String(moduleData$m.originParam.minPrice),
        maxPrice: String(moduleData$m.originParam.maxPrice),
        trendType: parseInt(moduleData$m.originParam.trendType),
        runType: parseInt(moduleData$m.originParam.runType),
        gridNum: String(moduleData$m.originParam.gridNum),
        lever: parseInt(moduleData$m.originParam.lever),
        investAmount: String(moduleData$m.originParam.totalVolume),
        marginAmount: String(moduleData$m.originParam.volume),
        couponAmount: String(moduleData$m.originParam.couponVolume),
        coupons: JSON.parse(moduleData$m.originParam.coupons),
        hideFlag: moduleData$m.originParam.showBot == true ? 1 : 2,
        source: commonData.source,
        copySource: parseInt(moduleData$m.originParam.copySource)
    };
    if (!isEmptyString(moduleData$m.originParam.copyId)) {
        params.copyId = parseInt(moduleData$m.originParam.copyId);
        params.copied = parseInt(moduleData$m.originParam.copied);
    } else {
        params.copyId = 0;
        params.copied = 0;
    }
    if (!isEmptyString(moduleData$m.originParam.triggerPrice)) {
        params.triggerPrice = String(moduleData$m.originParam.triggerPrice);
        params.triggerPriceType = parseInt(moduleData$m.originParam.triggerPriceType);
    }
    if (!isEmptyString(moduleData$m.originParam.takeProfitPrice)) {
        params.takeProfitPrice = String(moduleData$m.originParam.takeProfitPrice);
        params.takeProfitPriceType = parseInt(moduleData$m.originParam.takeProfitPriceType);
    }
    if (!isEmptyString(moduleData$m.originParam.stopLossPrice)) {
        params.stopLossPrice = String(moduleData$m.originParam.stopLossPrice);
        params.stopLossPriceType = parseInt(moduleData$m.originParam.stopLossPriceType);
    }
    params.marketPrice = moduleData$m.originParam.marketPrice;
    params.minRunMargin = String(moduleData$m.originParam.minRunMargin);
    var header = {
        "Content-Type": "application/json"
    };
    var response = await sendRequest("v1/gridstrategy/submit", params = params, 1, 0, header = header);
    var respData = handleSpotResponse(response, true);
    if (respData != null) {
        console.log(`conrtactEditPage.js ========= submit data =${respData}`);
        await checkStatus(respData);
    } else {
        if (response && response != null && response.code == 80353) {
            resetData();
            moduleData$m.popShow = "false";
        }
        showLoading(false);
    }
}

async function checkStatus(strategyId) {
    var params = {
        strategyId: strategyId
    };
    var respData = await sendRequest("v1/gridstrategy/strategy/get-status", params = params);
    respData = handleSpotResponse(respData, false);
    if (respData != null) {
        console.log(`conrtactEditPage.js ========= checkStatus data =${respData}`);
        if (respData == 2) {
            moduleData$m.checkCount += 1;
            if (moduleData$m.checkCount > 10) {
                showLoading(false);
                moduleData$m.submitStatusPopShow = "true";
            } else {
                setTimeout((async function() {
                    await checkStatus(strategyId);
                }), 500);
            }
        } else if (respData == 3) {
            showLoading(false);
            showToast($i18n.n_bot_detail_toast_handle_fail);
        } else {
            await updateSuccess(strategyId);
        }
    } else {
        showLoading(false);
    }
}

async function updateSuccess(strategyId) {
    showLoading(false);
    moduleData$m.popShow = "false";
    moduleData$m.callback();
    showToast($i18n.n_bot_detail_build_bot_success);
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/trade/botCompletion?fromType=${moduleData$m.fromType}&strategyId=${strategyId}`);
    resetData();
}

function goToMyBot() {
    moduleData$m.submitStatusPopShow = "false";
    moduleData$m.popShow = "false";
    moduleData$m.callback();
    openURL(`${commonData.webUrl}/${commonData.language}/tradingbot/h5/my-strategies?showbar=1&currentType=contract`);
}

function isEmptyString(str) {
    return !str || str.length === 0;
}

moduleEvent$m.createBotWithParams = createBotWithParams;

moduleEvent$m.confirmClick = confirmClick$1;

moduleEvent$m.confirmPopDismiss = confirmPopDismiss;

moduleEvent$m.submitStatusPopDismiss = submitStatusPopDismiss;

moduleEvent$m.goToMyBot = goToMyBot;

moduleEvent$m.submitStatusPopCancel = submitStatusPopCancel;

var defaultData$m = {
    minGridNum: 2,
    maxGridNum: 169,
    maxTradeFee: "0.00014",
    buffer: "0.05",
    lossRatio: "1"
};

var linearSwapCrossAccountInfoMaps = new Map;

var configDataMaps = new Map;

const maxSafeInteger = new Big(Number.MAX_SAFE_INTEGER);

var gridDashPriceList = [];

function setConfigData(configData) {
    if (configData && configData != null) {
        configDataMaps.set(configData.symbol, configData);
    }
}

function getConfigData(symbol) {
    if (configDataMaps.has(symbol)) {
        return configDataMaps.get(symbol);
    }
    return defaultData$m;
}

function setCrossAccountInfo(accountInfo) {
    accountInfo.withdraw_available;
    if (accountInfo.futures_contract_detail != null && accountInfo.futures_contract_detail.length > 0) {
        for (var dataCell of accountInfo.futures_contract_detail) {
            linearSwapCrossAccountInfoMaps.set(dataCell.contract_code, dataCell);
        }
    }
    if (accountInfo.contract_detail != null && accountInfo.contract_detail.length > 0) {
        for (var dataCell of accountInfo.contract_detail) {
            linearSwapCrossAccountInfoMaps.set(dataCell.contract_code, dataCell);
        }
    }
}

function calculateSingleProfitRate$1(lowest, highest, gridNum, runType, symbol) {
    var returnData = {
        priceErrorTip: "",
        gridErrorTip: "",
        singleProfitRateDisplay: "--"
    };
    let configData = getConfigData(symbol);
    var gridNumInvalid = isInvalidString(gridNum);
    if (!gridNumInvalid) {
        gridNum = Number(gridNum);
        if (gridNum < configData.minGridNum || gridNum > configData.maxGridNum) {
            returnData.gridErrorTip = $i18n.$intercept.n_bot_detail_error_grid_number_range(`${configData.minGridNum}-${configData.maxGridNum}`);
            gridNumInvalid = true;
        }
    }
    if (isInvalidString(lowest) || isInvalidString(highest)) {
        return returnData;
    }
    let bigLowest = new Big(lowest);
    let bigHighest = new Big(highest);
    if (bigLowest.gte(bigHighest)) {
        returnData.priceErrorTip = $i18n.n_contract_grid_create_price_remind;
        return returnData;
    }
    if (gridNumInvalid || isInvalidString(symbol)) {
        return returnData;
    }
    let contractInfo = getModelByContractShortType(symbol);
    let price_tick;
    if (contractInfo != null && !isInvalidString(contractInfo.price_tick)) {
        price_tick = new Big(contractInfo.price_tick);
    }
    if (runType == 0) {
        let diff = bigHighest.minus(bigLowest).div(gridNum);
        if (price_tick instanceof Big && diff.lt(price_tick)) {
            returnData.gridErrorTip = $i18n.n_bot_detail_error_increase_range_or_reduce_grids;
            return returnData;
        }
        let min = bigHighest.div(bigHighest.minus(diff)).minus(1).minus(Number(configData.maxTradeFee) * 2);
        if (min.lte(0)) {
            returnData.gridErrorTip = $i18n.n_bot_detail_error_single_profit_rate_too_low;
        }
        let max = diff.div(lowest).minus(Number(configData.maxTradeFee) * 2);
        returnData.singleProfitRateDisplay = `${format(min.times(100), 2) + "%"}-${format(max.times(100), 2) + "%"}`;
        return returnData;
    } else {
        let ratio = bigHighest.div(bigLowest) ** (1 / gridNum);
        if (price_tick instanceof Big && bigLowest.times(ratio - 1).lt(price_tick)) {
            returnData.gridErrorTip = $i18n.n_bot_detail_error_increase_range_or_reduce_grids;
            return returnData;
        }
        let profit = ratio - 1 - Number(configData.maxTradeFee) * 2;
        if (profit <= 0) {
            returnData.gridErrorTip = $i18n.n_bot_detail_error_single_profit_rate_too_low;
        }
        returnData.singleProfitRateDisplay = format(100 * profit, 2) + "%";
        return returnData;
    }
}

function calculateMinInvestmentAmount(lowest, highest, gridNum, lever, runType, trendType, symbol, currentSymbolPrice) {
    gridDashPriceList = [];
    if (isInvalidString(lowest) || isInvalidString(highest) || isInvalidString(gridNum) || isInvalidString(symbol) || isInvalidString(currentSymbolPrice)) {
        return 0;
    }
    let configData = getConfigData(symbol);
    console.log(`contractCalculator.js ---\x3e>> calculateMinInvestmentAmount lowest:${lowest} highest:${highest} gridNum:${gridNum} runType:${runType} lever:${lever} trendType:${trendType}`);
    console.log(`contractCalculator.js ---\x3e>> calculateMinInvestmentAmount currentSymbolPrice:${currentSymbolPrice} configData.maxTradeFee：${configData.maxTradeFee} configData.buffer：${configData.buffer} configData.lossRatio：${configData.lossRatio}`);
    lever = Number(lever);
    let currentContractInfo = getModelByContractShortType(symbol);
    let contractSize = getContractSize(currentContractInfo);
    if (contractSize <= 0 || lever <= 0) {
        return 0;
    }
    gridNum = Number(gridNum);
    if (gridNum < configData.minGridNum || gridNum > configData.maxGridNum) {
        return 0;
    }
    let bigLowest = new Big(lowest);
    let bigHighest = new Big(highest);
    if (bigLowest.gte(bigHighest)) {
        return 0;
    }
    let bigCurrentSymbolPrice = new Big(currentSymbolPrice);
    let bigPriceSum = new Big(0);
    let bigBuyLossSum = new Big(0);
    let bigSellLossSum = new Big(0);
    let bigMaxLoss = new Big(0);
    let buyLen = 0;
    let sellLen = 0;
    let diff = bigHighest.minus(bigLowest).div(gridNum);
    let ratio = new Big(bigHighest.div(bigLowest) ** (1 / gridNum));
    let curr;
    let tobeDelete = bigLowest;
    let index = 0;
    let minDifference = maxSafeInteger;
    let precision = getPriceTickPrecision(currentContractInfo);
    for (var i = 0; i <= gridNum; i++) {
        if (i == 0) {
            curr = bigLowest;
        } else {
            curr = runType == 0 ? diff.plus(curr) : ratio.times(curr);
        }
        gridDashPriceList.push(Number(curr.toFixed(precision)));
        if (trendType == 1) {
            bigPriceSum = bigPriceSum.plus(curr);
            if (bigCurrentSymbolPrice.cmp(bigLowest) > 0 && i > 0) {
                bigBuyLossSum = bigBuyLossSum.plus(curr);
            }
        } else if (trendType == 2) {
            bigPriceSum = bigPriceSum.plus(bigCurrentSymbolPrice.cmp(curr) >= 0 ? bigCurrentSymbolPrice : curr);
            if (bigCurrentSymbolPrice.cmp(bigHighest) <= 0 && i < gridNum) {
                bigSellLossSum = bigSellLossSum.plus(curr);
            }
        } else {
            bigPriceSum = bigPriceSum.plus(curr);
            if (bigCurrentSymbolPrice.cmp(curr) >= 0) {
                bigBuyLossSum = bigBuyLossSum.plus(curr);
                buyLen++;
            } else {
                bigSellLossSum = bigSellLossSum.plus(curr);
                sellLen++;
            }
        }
        if (bigCurrentSymbolPrice.minus(curr).abs().lt(minDifference)) {
            tobeDelete = curr;
            index = i;
            minDifference = bigCurrentSymbolPrice.minus(curr).abs();
        }
    }
    if (trendType == 1) {
        bigPriceSum = bigPriceSum.minus(tobeDelete);
        if (bigCurrentSymbolPrice.cmp(bigLowest) > 0) {
            bigMaxLoss = bigLowest.times(gridNum).minus(bigBuyLossSum).abs();
        }
    } else if (trendType == 2) {
        bigPriceSum = bigPriceSum.minus(bigCurrentSymbolPrice.cmp(tobeDelete) >= 0 ? bigCurrentSymbolPrice : tobeDelete);
        if (bigCurrentSymbolPrice.cmp(bigHighest) <= 0) {
            bigMaxLoss = bigHighest.times(gridNum).minus(bigSellLossSum).abs();
        }
    } else {
        bigPriceSum = bigPriceSum.minus(tobeDelete);
        if (bigCurrentSymbolPrice.cmp(tobeDelete) >= 0) {
            bigBuyLossSum = bigBuyLossSum.minus(tobeDelete);
            buyLen--;
        } else {
            bigSellLossSum = bigSellLossSum.minus(tobeDelete);
            sellLen--;
        }
        let duoLoss = bigLowest.times(buyLen).minus(bigBuyLossSum).abs();
        let kongLoss = bigHighest.times(sellLen).minus(bigSellLossSum).abs();
        bigMaxLoss = duoLoss.cmp(kongLoss) >= 0 ? duoLoss : kongLoss;
    }
    gridDashPriceList.splice(index, 1);
    if (index == 0) {
        gridDashPriceList.splice(gridNum - 1, 1);
    } else if (index == gridNum) {
        gridDashPriceList.splice(0, 1);
    } else {
        gridDashPriceList.splice(gridNum - 1, 1);
        gridDashPriceList.splice(0, 1);
    }
    gridDashPriceList.push(Number(bigCurrentSymbolPrice.toFixed(precision)));
    console.log(`contractCalculator.js ---\x3e>> K线绘制虚线价格数组：${gridDashPriceList} contractSize:${contractSize}`);
    let marginBuffer = defaultData$m.buffer;
    if (!isInvalidString(configData.buffer)) {
        marginBuffer = configData.buffer;
    }
    let lossRatio = defaultData$m.lossRatio;
    if (!isInvalidString(configData.lossRatio)) {
        lossRatio = configData.lossRatio;
    }
    console.log(`contractCalculator.js ---\x3e>> calculateMinInvestmentAmount  marginBuffer：${marginBuffer} lossRatio：${lossRatio}`);
    let firstPar = bigPriceSum.times((1 / lever + Number(configData.maxTradeFee) * 2) * contractSize).times(1 + Number(marginBuffer));
    let secondPar = bigMaxLoss.times(contractSize).times(lossRatio);
    let result = firstPar.plus(secondPar);
    console.log(`contractCalculator.js ---\x3e>> firstPar:${firstPar.toString()} secondPar:${secondPar.toString()} result:${result.toString()}`);
    let roundedUp = format(result.times(1e4).plus(1).div(1e4).toString(), 4);
    return Number(roundedUp);
}

function invalidateGridPrice(lowest, highest, gridNum, symbol) {
    console.log(`contractCalculator.js ---\x3e>> invalidateGridPrice K线绘制虚线价格数组：${gridDashPriceList} lowest:${lowest} highest:${highest} gridNum:${gridNum}`);
    $data.contractGridPage.gridPriceData = gridDashPriceList;
    let precision = getPriceTickPrecision(getModelByContractShortType(symbol));
    if (isInvalidString(lowest) || isInvalidString(highest)) {
        if (!isInvalidString(lowest)) {
            lowest = formatPriceString(lowest, precision);
        }
        if (!isInvalidString(highest)) {
            highest = formatPriceString(highest, precision);
        }
        $data.contractGridPage.minMaxPrice = [ lowest, highest ];
    } else {
        let bigLowest = new Big(lowest);
        let bigHighest = new Big(highest);
        if (bigLowest.gte(bigHighest)) {
            $data.contractGridPage.minMaxPrice = [ "", "" ];
        } else {
            $data.contractGridPage.minMaxPrice = [ bigLowest.toFixed(precision), bigHighest.toFixed(precision) ];
        }
    }
}

function calculateUnopenedLiquidationPrice$2(lowest, highest, gridNum, minInvestment, invest, lever, runType, trendType, symbol, currentSymbolPrice) {
    var returnData = {
        buyLiquidationPrice: "--",
        sellLiquidationPrice: "--"
    };
    if (isInvalidString(minInvestment) || isInvalidString(invest) || isInvalidString(currentSymbolPrice) || isInvalidString(symbol) || !linearSwapCrossAccountInfoMaps.has(symbol)) {
        return returnData;
    }
    lever = Number(lever);
    let currentContractInfo = getModelByContractShortType(symbol);
    let contractSize = getContractSize(currentContractInfo);
    if (contractSize <= 0 || lever <= 0 || parseFloat(minInvestment) == 0) {
        return returnData;
    }
    let configData = getConfigData(symbol);
    gridNum = Number(gridNum);
    if (gridNum < configData.minGridNum || gridNum > configData.maxGridNum) {
        return returnData;
    }
    let bigLowest = new Big(lowest);
    let bigHighest = new Big(highest);
    let bigCurrentSymbolPrice = new Big(currentSymbolPrice);
    let bigBuyPriceSum = new Big(0);
    let bigSellPriceSum = new Big(0);
    let buyLen = 0;
    let sellLen = 0;
    let diff = bigHighest.minus(bigLowest).div(gridNum);
    let ratio = new Big(bigHighest.div(bigLowest) ** (1 / gridNum));
    let curr;
    let tobeDelete = bigLowest;
    let minDifference = maxSafeInteger;
    let precision = getPriceTickPrecision(currentContractInfo);
    for (var i = 0; i <= gridNum; i++) {
        if (i == 0) {
            curr = bigLowest;
        } else {
            curr = runType == 0 ? diff.plus(curr).toFixed(precision) : ratio.times(curr).toFixed(precision);
        }
        if (trendType == 1) {
            bigBuyPriceSum = bigBuyPriceSum.plus(bigCurrentSymbolPrice.cmp(curr) >= 0 ? curr : bigCurrentSymbolPrice);
            buyLen++;
        } else if (trendType == 2) {
            bigSellPriceSum = bigSellPriceSum.plus(bigCurrentSymbolPrice.cmp(curr) >= 0 ? bigCurrentSymbolPrice : curr);
            sellLen++;
        } else {
            if (bigCurrentSymbolPrice.cmp(curr) >= 0) {
                bigBuyPriceSum = bigBuyPriceSum.plus(curr);
                buyLen++;
            } else {
                bigSellPriceSum = bigSellPriceSum.plus(curr);
                sellLen++;
            }
        }
        if (bigCurrentSymbolPrice.minus(curr).abs().lt(minDifference)) {
            tobeDelete = curr;
            minDifference = bigCurrentSymbolPrice.minus(curr).abs();
        }
    }
    if (trendType == 1) {
        bigBuyPriceSum = bigBuyPriceSum.minus(bigCurrentSymbolPrice.cmp(tobeDelete) >= 0 ? tobeDelete : bigCurrentSymbolPrice);
        buyLen--;
    } else if (trendType == 2) {
        bigSellPriceSum = bigSellPriceSum.minus(bigCurrentSymbolPrice.cmp(tobeDelete) >= 0 ? bigCurrentSymbolPrice : tobeDelete);
        sellLen--;
    } else {
        if (bigCurrentSymbolPrice.cmp(tobeDelete) >= 0) {
            bigBuyPriceSum = bigBuyPriceSum.minus(tobeDelete);
            buyLen--;
        } else {
            bigSellPriceSum = bigSellPriceSum.minus(tobeDelete);
            sellLen--;
        }
    }
    let linearSwapAccountInfo = linearSwapCrossAccountInfoMaps.get(symbol);
    let sheet = parseInt(Number(invest) / Number(minInvestment));
    if (buyLen > 0) {
        let openPrice = bigBuyPriceSum.div(buyLen);
        returnData.buyLiquidationPrice = format(openPrice.plus(bigBuyPriceSum.times(sheet * contractSize).times(linearSwapAccountInfo.adjust_factor).div(lever).minus(invest).div(sheet * buyLen * contractSize)), precision);
    }
    if (sellLen > 0) {
        let openPrice = bigSellPriceSum.div(sellLen);
        returnData.sellLiquidationPrice = format(openPrice.minus(bigSellPriceSum.times(sheet * contractSize).times(linearSwapAccountInfo.adjust_factor).div(lever).minus(invest).div(sheet * sellLen * contractSize)), precision);
    }
    return returnData;
}

async function start$l() {}

function defaultData$l() {
    var defaultRunTypeList = [];
    for (let i = 0; i < 2; i++) {
        var item = {};
        item.cellType = "1";
        item.index = i;
        item.textColor = "@color/kColorSecondaryButtonText";
        item.selImageVisibility = "gone";
        switch (i) {
          case 0:
            item.title = $i18n.n_grid_trade_dengcha;
            item.titleDisplay = $i18n.n_grid_trade_dengcha;
            item.param = "0";
            break;

          case 1:
            item.title = $i18n.n_grid_trade_dengbi;
            item.titleDisplay = $i18n.n_grid_trade_dengbi;
            item.param = "1";
            break;
        }
        defaultRunTypeList.push(item);
    }
    var defaultPriceTypeList = [];
    for (let i = 0; i < 2; i++) {
        var item = {};
        item.cellType = "1";
        item.index = i;
        item.textColor = "@color/kColorSecondaryButtonText";
        item.selImageVisibility = "gone";
        switch (i) {
          case 0:
            item.title = $i18n.n_contract_latest_price;
            item.titleDisplay = $i18n.n_contract_grid_create_newest_price_short;
            item.param = 1;
            break;

          case 1:
            item.title = $i18n.n_contract_mark_price;
            item.titleDisplay = $i18n.n_contract_grid_create_marked_price_short;
            item.param = 2;
            break;
        }
        defaultPriceTypeList.push(item);
    }
    var data = {
        popShow: "false",
        popType: "",
        popOptionList: [],
        defaultRunTypeList: defaultRunTypeList,
        defaultPriceTypeList: defaultPriceTypeList,
        popFrom: "",
        callBackFunction: ""
    };
    return data;
}

const {moduleData: moduleData$l, moduleEvent: moduleEvent$l} = moduleDefine("commonOptionPop", start$l, defaultData$l);

function showOptionPop$3(popType, currentType, optionListType, callback) {
    moduleData$l.popType = popType;
    var optionList = moduleData$l.defaultPriceTypeList;
    if (optionListType == 1) {
        optionList = moduleData$l.defaultRunTypeList;
    }
    optionList.forEach((function(item) {
        if (item.param == currentType) {
            item.textColor = "@color/kColorMajorTheme100";
            item.selImageVisibility = "visible";
        } else {
            item.textColor = "@color/kColorSecondaryButtonText";
            item.selImageVisibility = "gone";
        }
    }));
    moduleData$l.popType = popType;
    moduleData$l.callBackFunction = callback;
    moduleData$l.popOptionList = optionList;
    moduleData$l.popShow = "true";
}

function optionClick$3(index) {
    var element = moduleData$l.popOptionList[index];
    moduleData$l.callBackFunction(moduleData$l.popType, element);
    optionPopDismiss();
}

function optionPopDismiss() {
    moduleData$l.popShow = "false";
    moduleData$l.popOptionList = [];
    moduleData$l.popType = "";
}

function getOptionDisplayItem(optionType, optionListType = 0) {
    let optionList = moduleData$l.defaultPriceTypeList;
    if (optionListType == 1) {
        optionList = moduleData$l.defaultRunTypeList;
    }
    if (optionType == undefined || optionType == 0) {
        optionType = 1;
    }
    var display = "";
    optionList.forEach((element => {
        if (element.param == optionType) {
            display = element.titleDisplay;
        }
    }));
    return display;
}

moduleEvent$l.optionPopDismiss = optionPopDismiss;

moduleEvent$l.optionClick = optionClick$3;

var botRankParams = {
    symbol: "",
    searchType: 2,
    rankType: 3,
    sortMenuIndex: 0,
    timeRangeType: 0,
    profitRateType: 0,
    trendType: 1
};

var symbolData$1 = {
    currentSymbol: "BTC-USDT",
    currentSymbolPrice: ""
};

function getCurrentParams$1() {
    return botRankParams;
}

var strategyId = "";

var strategyInfo = {
    status: -1
};

var symbolData = {
    currentSymbol: "",
    currentSymbolPrice: ""
};

function setStrategyId(id) {
    strategyId = id;
}

function setStrategyInfo(info) {
    strategyInfo = info;
    symbolData.currentSymbol = strategyInfo.symbol;
    if (info.takeProfitPriceType == undefined || info.takeProfitPriceType == 0 || info.takeProfitPriceType == null) {
        info.takeProfitPriceType = 1;
        info.takeProfitPrice = "";
    }
    if (!notNull(info.takeProfitPrice)) {
        info.takeProfitPrice = "";
    }
    if (strategyInfo.stopLossPriceType == undefined || strategyInfo.stopLossPriceType == 0 || strategyInfo.stopLossPriceType == null) {
        strategyInfo.stopLossPriceType = 1;
    }
    if (!notNull(info.stopLossPrice)) {
        info.stopLossPrice = "";
    }
    if (info.triggerPriceType == undefined || info.triggerPriceType == 0 || info.triggerPriceType == null) {
        info.triggerPriceType = 1;
    }
    if (!notNull(info.triggerPrice)) {
        info.triggerPrice = "";
    }
}

function getStrategyRunningStatus(status) {
    if (status == 5 || status == 6 || status == 3) {
        return false;
    }
    return true;
}

var timerObject$2;

var currentSymbol = "";

var currentSymbolPrice = "";

var loadServerConfigData$1 = false;

var lastVolumeProgress$1 = -1;

var seekBarTrackingCount$1 = 0;

async function start$k() {}

function defaultData$k() {
    var data = {
        botTrend: {
            bottom: {
                titleDisplay: $i18n.n_contract_grid_create_buy,
                bgColor: "@color/eColorInputFillDisabled",
                titleColor: "@color/kColorThreeLevelText",
                enable: false,
                createVisibility: "visible",
                agreementVisibility: "gone",
                needCheckAgreementStatus: true
            }
        },
        volume: {
            volume: "",
            volumeMinHint: ">0",
            volumeLever: "5",
            volumeLeverDisplay: "5X",
            marketPrice: "",
            minRunMargin: 0,
            available: 0,
            availableDisplay: "--",
            volumePercent: 0,
            liquidationPriceSellTitle: $i18n.n_bot_detail_sell_liquidation_price,
            liquidationPriceSell: "",
            liquidationPriceSellDisplay: "--",
            liquidationSellVisibility: "gone",
            liquidationPriceBuyTitle: $i18n.n_bot_detail_sell_liquidation_price,
            liquidationPriceBuy: "",
            liquidationPriceBuyDisplay: "--",
            liquidationBuyVisibility: "gone",
            liquidationPriceErrorMsg: $i18n.n_bot_detail_error_liq_price_warning,
            liquidationPriceErrorVisibility: "gone",
            borderWidth: "0",
            errorMsg: $i18n.n_contract_grid_create_volume_remind,
            errorVisibility: "gone",
            totalVolume: "",
            totalVolumeVisibility: "gone"
        },
        setting: {
            visibility: "gone",
            iconSrc: "@drawable/edge_engine_trade_bot_arrow_down",
            trigger: {
                iconSrc: "@drawable/edge_engine_common_switch_close",
                visibility: "gone",
                triggerPrice: "",
                triggerPriceType: "1",
                triggerPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
                errorMsg: "",
                errorVisibility: "gone",
                borderWidth: "0"
            },
            tpsl: {
                visibility: "gone",
                iconSrc: "@drawable/edge_engine_common_switch_close",
                title: $i18n.n_contract_trade_trend_stop,
                takeProfitPriceTitle: $i18n.n_grid_trade_zhiying,
                takeProfitPrice: "",
                takeProfitPriceType: "1",
                takeProfitPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
                takeProfitPriceErrorMsg: "",
                takeProfitPriceErrorVisibility: "gone",
                takeProfitPriceBorderWidth: "0",
                stopLossPriceTitle: $i18n.n_grid_trade_zhisun,
                stopLossPrice: "",
                stopLossPriceType: "1",
                stopLossPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
                stopLossPriceErrorMsg: "",
                stopLossPriceErrorVisibility: "gone",
                stopLossPriceBorderWidth: "0"
            },
            showBot: {
                visibility: "visible",
                iconSrc: "@drawable/edge_engine_common_switch_open"
            }
        },
        copyParams: {
            symbolDisplay: "",
            gridModeDisplay: "",
            trendTypeDispaly: "",
            paramsList: []
        },
        warningVisibility: "gone",
        originCopyParams: {},
        copyPopShow: "false",
        needPopShowAgain: false,
        precision: 4,
        fromPage: 0,
        copySource: 0
    };
    return data;
}

const {moduleData: moduleData$k, moduleEvent: moduleEvent$k} = moduleDefine("botCopyPop", start$k, defaultData$k);

function startTimer$2() {
    resetLoadServerCouponData();
    clearTimer$2();
    timerObject$2 = setInterval(timerCallback$2, 5e3);
    timerCallback$2();
}

function clearTimer$2() {
    if (timerObject$2 != null) {
        clearInterval(timerObject$2);
        timerObject$2 = null;
    }
}

async function timerCallback$2() {
    await requestContractInfoData();
    let precision = getPriceTickPrecision(getModelByContractShortType(currentSymbol));
    if (moduleData$k.precision != precision) {
        await updateDateWhenPrecisionChange();
    }
    requestCommonConfig$1();
    updateAvailable$2();
    checkAgreementStatus$1();
    requestCoupon(false);
}

async function requestCommonConfig$1() {
    if (!loadServerConfigData$1) {
        await sendRequestWithCache("v1/gridstrategy/strategy/common-config?symbol=" + currentSymbol, callback = configDataCallback$1);
    }
}

function configDataCallback$1(configData, isCache) {
    console.log(`requestCommonConfig  configDataCallback begin isCache = ${isCache}  configData:${JSON.stringify(configData)}`);
    if (configData && configData != "") {
        setMaxCouponOnce(configData.maxCouponOnce);
        setConfigData(configData);
        loadServerConfigData$1 = loadServerConfigData$1 | !isCache;
        console.log(`requestCommonConfig  configDataCallback end loadServerConfigData = ${loadServerConfigData$1}  configData:${JSON.stringify(configData)}`);
    }
}

async function clearContent$1() {
    var restoreData = defaultData$k();
    moduleData$k.volume = restoreData.volume;
    moduleData$k.setting = restoreData.setting;
    moduleData$k.warningVisibility = restoreData.warningVisibility;
    moduleData$k.originCopyParams = restoreData.originCopyParams;
    moduleData$k.copyParams = restoreData.copyParams;
    moduleData$k.precision = restoreData.precision;
    moduleData$k.fromPage = restoreData.fromPage;
    updateAvailable$2();
    checkAllParams$2();
}

async function onStart$3() {
    lastVolumeProgress$1 = -1;
    seekBarTrackingCount$1 = 0;
    if (moduleData$k.needPopShowAgain == true) {
        moduleData$k.needPopShowAgain = false;
        moduleData$k.copyPopShow = "true";
        startTimer$2();
    }
}

async function setCopyParams$1(copyParams, fromPage, copySource) {
    await clearContent$1();
    if (copyParams.userType == undefined) {
        copyParams.userType = 1;
    }
    moduleData$k.originCopyParams = copyParams;
    moduleData$k.fromPage = fromPage;
    moduleData$k.copySource = copySource;
    moduleData$k.copyParams.remindMsg = $i18n.n_bot_edit_copy_warning;
    moduleData$k.copyParams.symbolDisplay = symbolDesc(copyParams.symbol);
    subSymbolPrice(copyParams.symbol);
    moduleData$k.copyParams.gridModeDisplay = $i18n.n_trade_bot_contract_grid;
    moduleData$k.precision = getPriceTickPrecision(getModelByContractShortType(copyParams.symbol));
    if (getStrategyRunningStatus(copyParams.status) == false && fromPage == 2 || copyParams.status == 0 && fromPage != 2) {
        moduleData$k.warningVisibility = "visible";
    } else {
        moduleData$k.warningVisibility = "gone";
    }
    switch (parseInt(copyParams.trendType)) {
      case 1:
        moduleData$k.copyParams.trendTypeDisplay = $i18n.n_contract_grid_buy;
        moduleData$k.copyParams.trendTypeColor = getUpDownColor();
        moduleData$k.copyParams.trendTypeBorderColor = getColorWithAlpha(moduleData$k.copyParams.trendTypeColor, .3);
        moduleData$k.volume.liquidationVisibility = "visible";
        moduleData$k.volume.liquidationBuyVisibility = "gone";
        moduleData$k.volume.liquidationSellVisibility = "gone";
        moduleData$k.setting.tpsl.title = $i18n.n_contract_trade_trend_stop;
        moduleData$k.setting.tpsl.takeProfitPriceTitle = $i18n.n_grid_trade_zhiying;
        moduleData$k.setting.tpsl.stopLossPriceTitle = $i18n.n_grid_trade_zhisun;
        moduleData$k.botTrend.bottom.titleDisplay = $i18n.n_contract_grid_create_buy;
        moduleData$k.volume.liquidationBuyVisibility = "visible";
        moduleData$k.volume.liquidationPriceBuyTitle = $i18n.n_balance_contract_prediction_of_strong_parity;
        moduleData$k.volume.liquidationSellVisibility = "gone";
        break;

      case 2:
        moduleData$k.copyParams.trendTypeDisplay = $i18n.n_contract_grid_sell;
        moduleData$k.copyParams.trendTypeColor = getUpDownColor(false);
        moduleData$k.copyParams.trendTypeBorderColor = getColorWithAlpha(moduleData$k.copyParams.trendTypeColor, .3);
        moduleData$k.volume.liquidationVisibility = "visible";
        moduleData$k.volume.liquidationBuyVisibility = "gone";
        moduleData$k.volume.liquidationSellVisibility = "gone";
        moduleData$k.setting.tpsl.title = $i18n.n_contract_trade_trend_stop;
        moduleData$k.setting.tpsl.takeProfitPriceTitle = $i18n.n_grid_trade_zhiying;
        moduleData$k.setting.tpsl.stopLossPriceTitle = $i18n.n_grid_trade_zhisun;
        moduleData$k.botTrend.bottom.titleDisplay = $i18n.n_contract_grid_create_sell;
        moduleData$k.volume.liquidationBuyVisibility = "gone";
        moduleData$k.volume.liquidationSellVisibility = "visible";
        moduleData$k.volume.liquidationPriceSellTitle = $i18n.n_balance_contract_prediction_of_strong_parity;
        break;

      case 0:
        moduleData$k.copyParams.trendTypeDisplay = $i18n.n_contract_grid_neutral;
        moduleData$k.copyParams.trendTypeColor = "@color/kColorSecondaryText";
        moduleData$k.copyParams.trendTypeBorderColor = "@color/kColorPrimarySeparator";
        moduleData$k.volume.liquidationVisibility = "gone";
        moduleData$k.volume.liquidationBuyVisibility = "visible";
        moduleData$k.volume.liquidationSellVisibility = "visible";
        moduleData$k.setting.tpsl.title = $i18n.n_bot_edit_stop_price;
        moduleData$k.setting.tpsl.takeProfitPriceTitle = $i18n.n_bot_edit_stop_price_max;
        moduleData$k.setting.tpsl.stopLossPriceTitle = $i18n.n_bot_edit_stop_price_min;
        moduleData$k.botTrend.bottom.titleDisplay = $i18n.n_contract_grid_create_neutral;
        moduleData$k.volume.liquidationSellVisibility = "visible";
        moduleData$k.volume.liquidationPriceBuyTitle = $i18n.n_bot_detail_buy_liquidation_price;
        moduleData$k.volume.liquidationBuyVisibility = "visible";
        moduleData$k.volume.liquidationPriceSellTitle = $i18n.n_bot_detail_sell_liquidation_price;
        break;
    }
    await updateDateWhenPrecisionChange();
    moduleData$k.copyPopShow = "true";
    addSelectCouponCallBack(couponSelect$2);
    refreshSymbolPrice$1();
    startTimer$2();
}

async function updateDateWhenPrecisionChange() {
    let copyParams = moduleData$k.originCopyParams;
    moduleData$k.precision = getPriceTickPrecision(getModelByContractShortType(copyParams.symbol));
    var paramsList = [];
    var textColor = "@color/kColorPrimaryText";
    var backgroundColor = "";
    var totalProfitsDisplay = "0 USDT";
    var totalProfitRateDisplay = "0%";
    var signBit = "+";
    if (parseFloat(copyParams.totalProfitAmount) > 0) {
        textColor = getUpDownColor();
        backgroundColor = getColorWithAlpha(textColor, .1);
        signBit = "+";
    } else if (parseFloat(copyParams.totalProfitAmount) < 0) {
        textColor = getUpDownColor(false);
        backgroundColor = getColorWithAlpha(textColor, .1);
        signBit = "";
    }
    if (copyParams.userType == 1) {
        totalProfitsDisplay = `${signBit}${formatDecimal(copyParams.totalProfitAmount)} USDT`;
        totalProfitRateDisplay = `${signBit}${formatDecimal(multiply(copyParams.totalProfitRate, 100), 2, false)}%`;
        var profitsItem = {
            cellType: "3",
            title: $i18n.copy_trading_total_profits,
            totalProfits: totalProfitsDisplay,
            totalProfitRateVisibility: "visible",
            totalProfitRate: totalProfitRateDisplay,
            textColor: textColor,
            backgroundColor: backgroundColor
        };
        paramsList.push(profitsItem);
    } else {
        totalProfitsDisplay = `${signBit}${formatDecimal(multiply(copyParams.totalProfitRate, 100), 2, false)}%`;
        totalProfitRateDisplay = "";
        var profitsItem = {
            cellType: "3",
            title: $i18n.n_trade_bot_profit_rate_of_some_days.replace("%s", `${copyParams.runTimeDay}`).replace("{{0}}", `${copyParams.runTimeDay}`),
            totalProfits: totalProfitsDisplay,
            totalProfitRateVisibility: "gone",
            textColor: textColor,
            backgroundColor: backgroundColor
        };
        paramsList.push(profitsItem);
    }
    var priceItem = {
        cellType: "1",
        title: $i18n.n_grid_trade_price_range,
        content: `${formatDecimal(copyParams.minPrice, moduleData$k.precision)}-${formatDecimal(copyParams.maxPrice, moduleData$k.precision)}`
    };
    paramsList.push(priceItem);
    var numberItem = {
        cellType: "1",
        title: $i18n.n_bot_confirm_type_and_number,
        content: `${copyParams.runType == "1" ? $i18n.n_grid_trade_dengbi : $i18n.n_grid_trade_dengcha} | ${copyParams.gridNum}`
    };
    paramsList.push(numberItem);
    var profitRateItem = {
        cellType: "1",
        title: $i18n.n_bot_edit_single_rate_deduct_fee,
        content: copyParams.runType == "1" ? `${formatDecimal(multiply(copyParams.minGridProfitRate ? copyParams.minGridProfitRate : "0", 100), 2, false)}%` : `${formatDecimal(multiply(copyParams.minGridProfitRate ? copyParams.minGridProfitRate : "0", 100), 2, false)}% - ${formatDecimal(multiply(copyParams.maxGridProfitRate ? copyParams.maxGridProfitRate : "0", 100), 2, false)}%`
    };
    paramsList.push(profitRateItem);
    var markCode = "--";
    if (!isInvalidString(copyParams.markCode)) {
        markCode = copyParams.markCode;
    }
    var shareCodeItem = {
        cellType: "5",
        title: $i18n.n_trade_bot_share_code,
        content: markCode
    };
    paramsList.push(shareCodeItem);
    var line1 = {
        cellType: "2"
    };
    paramsList.push(line1);
    var diyItem = {
        cellType: "4",
        title: $i18n.n_bot_edit_diy_params
    };
    paramsList.push(diyItem);
    moduleData$k.copyParams.paramsList = paramsList;
}

async function subSymbolPrice(symbol) {
    loadServerConfigData$1 = false;
    try {
        console.log("subSymbolPrice  symbol:" + symbol);
        await unsubSymbolPriceWebSocket(currentSymbol);
        currentSymbol = symbol;
        await subSymbolPriceWebSocket(currentSymbol);
    } catch (e) {
        console.log(`subSymbolPrice, error=${e}`);
    }
}

async function subSymbolPriceWebSocket(symbol) {
    if (isInvalidString(symbol)) {
        return;
    }
    if (moduleData$k.fromPage != 1 || moduleData$k.fromPage == 1 && symbolData$1.currentSymbol != symbol) {
        await subPriceWebSocket("linearSwapPeriodKlineWs", {
            symbol: currentSymbol,
            period: "1day"
        });
    }
    if (moduleData$k.fromPage != 1) {
        subPriceWebSocket("linearSwapWs");
    }
}

async function unsubSymbolPriceWebSocket(symbol) {
    if (isInvalidString(symbol)) {
        return;
    }
    if (moduleData$k.fromPage != 1 || moduleData$k.fromPage == 1 && symbolData$1.currentSymbol != symbol) {
        await unsubPriceWebSocket("linearSwapPeriodKlineWs", {
            symbol: symbol,
            period: "1day"
        });
    }
    if (moduleData$k.fromPage != 1) {
        unsubPriceWebSocket("linearSwapWs");
    }
}

function refreshSymbolPrice$1() {
    if (moduleData$k.copyPopShow == "false") {
        return;
    }
    let data = getSymbolLinearSwapPeriodKlineWsData(currentSymbol);
    if (null != data && Object.getOwnPropertyNames(data).length > 0) {
        currentSymbolPrice = formatPriceString(data.close.toString(), moduleData$k.precision);
    } else {
        currentSymbolPrice = "";
    }
    checkAllParams$2();
}

function remindClick$5(type) {
    console.log(`remindClick type = ${type}`);
    switch (type) {
      case "volume":
        popUpContentOfOneButton($i18n.n_trade_bot_title_investment, $i18n.n_trade_bot_desc_investment);
        break;

      case "liquidation_buy":
        popUpContentOfOneButton($i18n.n_trade_bot_title_liq_price_buy, $i18n.n_trade_bot_desc_liq_price_buy);
        break;

      case "liquidation_sell":
        popUpContentOfOneButton($i18n.n_trade_bot_title_liq_price_sell, $i18n.n_trade_bot_desc_liq_price_sell);
        break;

      case "trigger":
        popUpContentOfOneButton($i18n.n_trade_bot_title_trigger_price, $i18n.n_trade_bot_desc_trigger_price);
        break;

      case "tpsl":
        if (moduleData$k.originCopyParams.trendType == "1" || moduleData$k.originCopyParams.trendType == "2") {
            popUpContentOfOneButton($i18n.n_trade_bot_title_profit_or_loss, $i18n.n_trade_bot_desc_profit_or_loss);
        } else {
            popUpContentOfOneButton($i18n.n_bot_edit_stop_price, $i18n.n_trade_bot_desc_stop_bottom_price);
        }
        break;

      case "showBot":
        popUpContentOfOneButton($i18n.n_contract_grid_create_show_in_ranking, $i18n.n_trade_bot_desc_show_in_ranking);
        break;

      case "coupon":
        popUpTwoContentOfOneButton($i18n.n_coupon_used_rules, $i18n.n_bot_detail_coupon_use_rules_desc, $i18n.n_bot_detail_coupon_use_rules_desc3);
        break;
    }
}

async function agreementClick$1() {
    moduleData$k.needPopShowAgain = true;
    moduleData$k.copyPopShow = "false";
    await openURL("holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=tradingBot&rootName=botServiceAgreement&xml=bot_service_agreement&navConfig=native");
}

async function diyParamClick() {
    moduleData$k.copyPopShow = "false";
    moduleData$k.needPopShowAgain = false;
    unsubSymbolPriceWebSocket(currentSymbol);
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/trade/contractGrid?source=${commonData.source}&symbol=${moduleData$k.originCopyParams.symbol}&minPrice=${moduleData$k.originCopyParams.minPrice}&maxPrice=${moduleData$k.originCopyParams.maxPrice}&runType=${moduleData$k.originCopyParams.runType}&gridNum=${moduleData$k.originCopyParams.gridNum}&trendType=${moduleData$k.originCopyParams.trendType}`);
    $nativeAPI.closeKeyboard();
}

async function changeLever$1(lever) {
    moduleData$k.volume.volumeLever = lever;
    moduleData$k.volume.volumeLeverDisplay = lever + "X";
    checkAllParams$2();
}

async function volumeLeverClick$1() {
    console.log(`volumeLeverClick`);
    var params = {};
    params.contractCode = currentSymbol;
    params.lever = moduleData$k.volume.volumeLever;
    params.callBackName = "botCopyPop.changeLever";
    await changeLeverDialog(params);
    $nativeAPI.closeKeyboard();
}

function availableClick$1() {
    console.log(`availableClick`);
    moduleData$k.copyPopShow = "false";
    moduleData$k.needPopShowAgain = true;
    unsubSymbolPriceWebSocket(currentSymbol);
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/balance/transfer?coin=USDT&account=11`);
    $nativeAPI.closeKeyboard();
}

function volumeChange$1(volumePercent) {
    console.log(`volumeChange volumePercent = ${volumePercent} lastVolumeProgress = ${lastVolumeProgress$1} seekBarTrackingCount= ${seekBarTrackingCount$1}`);
    if (lastVolumeProgress$1 == volumePercent) return;
    lastVolumeProgress$1 = volumePercent;
    seekBarTrackingCount$1++;
    moduleData$k.volume.volume = formatDecimal(moduleData$k.volume.available * parseFloat(volumePercent) / 100, 4, false);
    refreshTotalInvest$2();
    setTimeout((() => {
        seekBarTrackingCount$1--;
        console.log(`volumeChange 触发setTimeout seekBarTrackingCount= ${seekBarTrackingCount$1}`);
        if (seekBarTrackingCount$1 <= 0) {
            checkAllParams$2();
        }
    }), 50);
}

async function couponClick$2() {
    console.log(`couponClick`);
    popUpContentOfCoupon();
}

async function couponSelect$2() {
    console.log(`botCopyPop.js couponSelect`);
    checkAllParams$2();
}

function settingClick$1() {
    console.log(`settingClick`);
    if (moduleData$k.setting.visibility == "visible") {
        moduleData$k.setting.visibility = "gone";
        moduleData$k.setting.iconSrc = "@drawable/edge_engine_trade_bot_arrow_down";
    } else {
        moduleData$k.setting.visibility = "visible";
        moduleData$k.setting.iconSrc = "@drawable/edge_engine_trade_bot_arrow_up";
    }
}

function triggerClick$1() {
    console.log(`triggerClick`);
    if (moduleData$k.setting.trigger.visibility == "visible") {
        moduleData$k.setting.trigger.visibility = "gone";
        moduleData$k.setting.trigger.iconSrc = "@drawable/edge_engine_common_switch_close";
        $nativeAPI.closeKeyboard();
    } else {
        moduleData$k.setting.trigger.visibility = "visible";
        moduleData$k.setting.trigger.iconSrc = "@drawable/edge_engine_common_switch_open";
    }
    checkAllParams$2();
}

function tpslClick$1() {
    console.log(`tpslClick`);
    if (moduleData$k.setting.tpsl.visibility == "visible") {
        moduleData$k.setting.tpsl.visibility = "gone";
        moduleData$k.setting.tpsl.iconSrc = "@drawable/edge_engine_common_switch_close";
        $nativeAPI.closeKeyboard();
    } else {
        moduleData$k.setting.tpsl.visibility = "visible";
        moduleData$k.setting.tpsl.iconSrc = "@drawable/edge_engine_common_switch_open";
    }
    checkAllParams$2();
}

function showBotClick$2() {
    console.log(`showBotClick`);
    if (moduleData$k.setting.showBot.visibility == "visible") {
        moduleData$k.setting.showBot.visibility = "gone";
        moduleData$k.setting.showBot.iconSrc = "@drawable/edge_engine_common_switch_close";
    } else {
        moduleData$k.setting.showBot.visibility = "visible";
        moduleData$k.setting.showBot.iconSrc = "@drawable/edge_engine_common_switch_open";
    }
}

function showOptionPop$2(type) {
    console.log(`showOptionPop = ${type}`);
    $nativeAPI.closeKeyboard();
    switch (type) {
      case "triggerPrice":
        showOptionPop$3(type, moduleData$k.setting.trigger.triggerPriceType, 2, optionClick$2);
        break;

      case "takeProfitPrice":
        showOptionPop$3(type, moduleData$k.setting.tpsl.takeProfitPriceType, 2, optionClick$2);
        break;

      case "stopLossPrice":
        showOptionPop$3(type, moduleData$k.setting.tpsl.stopLossPriceType, 2, optionClick$2);
        break;
    }
}

function optionClick$2(popType, element) {
    switch (popType) {
      case "triggerPrice":
        moduleData$k.setting.trigger.triggerPriceType = element.param;
        moduleData$k.setting.trigger.triggerPriceTypeDisplay = element.titleDisplay;
        break;

      case "takeProfitPrice":
        moduleData$k.setting.tpsl.takeProfitPriceType = element.param;
        moduleData$k.setting.tpsl.takeProfitPriceTypeDisplay = element.titleDisplay;
        break;

      case "stopLossPrice":
        moduleData$k.setting.tpsl.stopLossPriceType = element.param;
        moduleData$k.setting.tpsl.stopLossPriceTypeDisplay = element.titleDisplay;
        break;
    }
}

function onTextChange$2(type, text) {
    console.log(`onTextChange type = ${type}, text = ${text}`);
    if (seekBarTrackingCount$1 <= 0) {
        checkAllParams$2();
    }
}

function onFocusChange$2(type, hasFocus) {
    console.log(`onFocusChange type = ${type}, hasFocus = ${hasFocus}`);
    moduleData$k.precision = getPriceTickPrecision(getModelByContractShortType(currentSymbol));
}

function createClick$1() {
    $nativeAPI.closeKeyboard();
    showConfirmPop();
}

function copyPopCancelClick() {
    moduleData$k.needPopShowAgain = false;
    copyPopDismiss();
}

function showConfirmPop() {
    checkAllParams$2();
    checkEmpty$1(true);
    if (moduleData$k.botTrend.bottom.enable == false) {
        return;
    }
    var params = {};
    params.symbol = moduleData$k.originCopyParams.symbol;
    if (moduleData$k.originCopyParams.userType == 1) {
        params.copied = 1;
    } else {
        params.copied = 2;
    }
    params.copyId = moduleData$k.originCopyParams.strategyId;
    params.minPrice = moduleData$k.originCopyParams.minPrice;
    params.maxPrice = moduleData$k.originCopyParams.maxPrice;
    params.trendType = moduleData$k.originCopyParams.trendType;
    params.runType = moduleData$k.originCopyParams.runType;
    params.gridNum = moduleData$k.originCopyParams.gridNum;
    params.singleProfitRateDisplay = moduleData$k.originCopyParams.runType == "1" ? `${formatDecimal(multiply(moduleData$k.originCopyParams.minGridProfitRate ? moduleData$k.originCopyParams.minGridProfitRate : "0", 100), 2, false)}%` : `${formatDecimal(multiply(moduleData$k.originCopyParams.minGridProfitRate ? moduleData$k.originCopyParams.minGridProfitRate : "0", 100), 2, false)}% - ${formatDecimal(multiply(moduleData$k.originCopyParams.maxGridProfitRate ? moduleData$k.originCopyParams.maxGridProfitRate : "0", 100), 2, false)}%`;
    params.lever = moduleData$k.volume.volumeLever;
    params.volume = formatDecimal(parseFloatOrDefault(moduleData$k.volume.volume), 4, false);
    params.couponVolume = totalCouponCount;
    params.totalVolume = parseFloatOrDefault(moduleData$k.volume.volume) + parseFloat(totalCouponCount);
    params.coupons = getExperienceParams();
    params.liquidationPriceBuyDisplay = moduleData$k.volume.liquidationBuyVisibility == "visible" ? moduleData$k.volume.liquidationPriceBuyDisplay : "--";
    params.liquidationPriceSellDisplay = moduleData$k.volume.liquidationSellVisibility == "visible" ? moduleData$k.volume.liquidationPriceSellDisplay : "--";
    params.triggerPrice = moduleData$k.setting.trigger.visibility == "visible" ? moduleData$k.setting.trigger.triggerPrice : "";
    params.triggerPriceType = moduleData$k.setting.trigger.triggerPriceType;
    params.takeProfitPrice = moduleData$k.setting.tpsl.visibility == "visible" ? moduleData$k.setting.tpsl.takeProfitPrice : "";
    params.takeProfitPriceType = moduleData$k.setting.tpsl.takeProfitPriceType;
    params.stopLossPrice = moduleData$k.setting.tpsl.visibility == "visible" ? moduleData$k.setting.tpsl.stopLossPrice : "";
    params.stopLossPriceType = moduleData$k.setting.tpsl.stopLossPriceType;
    params.showBot = moduleData$k.setting.showBot.visibility == "visible" ? true : false;
    params.marketPrice = moduleData$k.volume.marketPrice;
    params.minRunMargin = moduleData$k.volume.minRunMargin;
    params.warningMsg = moduleData$k.volume.liquidationPriceErrorMsg;
    params.copySource = moduleData$k.copySource;
    createBotWithParams(params, 1, copyPopCancelClick);
}

function copyPopDismiss() {
    console.log(`copyPopDismiss`);
    clearTimer$2();
    moduleData$k.copyPopShow = "false";
    unsubSymbolPriceWebSocket(currentSymbol);
}

async function updateAvailable$2() {
    let accountInfo = await getAccountInfo();
    if (accountInfo != null && accountInfo.length > 0) {
        moduleData$k.volume.available = commonData.available;
        moduleData$k.volume.availableDisplay = formatDecimal(commonData.available) + " USDT";
        setCrossAccountInfo(accountInfo[0]);
        checkAllParams$2();
    }
}

function checkEmpty$1(showError = false) {
    var paramEmpty = false;
    let ret = new Big(moduleData$k.volume.minRunMargin).minus(totalCouponCount);
    if (ret.cmp(0) <= 0) ; else {
        if (moduleData$k.volume.volume.length == 0) {
            paramEmpty = true;
            if (showError == true) {
                moduleData$k.volume.errorMsg = $i18n.n_bot_detail_error_empty_volume;
                moduleData$k.volume.errorVisibility = "visible";
                moduleData$k.volume.borderWidth = "1";
            }
        }
    }
    return paramEmpty;
}

function calculateInvestmentAmount$1() {
    moduleData$k.volume.marketPrice = currentSymbolPrice;
    moduleData$k.volume.minRunMargin = calculateMinInvestmentAmount(moduleData$k.originCopyParams.minPrice, moduleData$k.originCopyParams.maxPrice, moduleData$k.originCopyParams.gridNum, moduleData$k.volume.volumeLever, moduleData$k.originCopyParams.runType, moduleData$k.originCopyParams.trendType, currentSymbol, getCalculatePrice$1());
    if (moduleData$k.volume.minRunMargin > 0) {
        let ret = new Big(moduleData$k.volume.minRunMargin).minus(totalCouponCount);
        moduleData$k.volume.volumeMinHint = `≥${ret.cmp(0) > 0 ? ret.toString() : 0}`;
    } else {
        moduleData$k.volume.volumeMinHint = ">0";
    }
}

async function refreshTotalInvest$2() {
    let total = 0;
    if (isInvalidString(moduleData$k.volume.volume) || isNaN(parseFloat(moduleData$k.volume.volume))) {
        total = totalCouponCount;
    } else {
        total = parseFloat(moduleData$k.volume.volume) + totalCouponCount;
    }
    moduleData$k.volume.totalVolume = $i18n.$intercept.n_bot_detail_total_investment_tips(`${total}`);
    moduleData$k.volume.totalVolumeVisibility = total > 0 ? "visible" : "gone";
}

function checkAllParams$2() {
    refreshTotalInvest$2();
    var paramEmpty = checkEmpty$1(false);
    var volumeError = checkVolume$1();
    var triggerPriceError = checkTriggerPrice$2();
    var tpslPriceError = checkTpslPrice$2();
    if (!paramEmpty && !volumeError && !triggerPriceError && !tpslPriceError) {
        moduleData$k.botTrend.bottom.bgColor = "@color/kColorMajorTheme100";
        moduleData$k.botTrend.bottom.titleColor = "@color/KBaseTextColor";
        moduleData$k.botTrend.bottom.enable = true;
    } else {
        moduleData$k.botTrend.bottom.bgColor = "@color/eColorInputFillDisabled";
        moduleData$k.botTrend.bottom.titleColor = "@color/kColorThreeLevelText";
        moduleData$k.botTrend.bottom.enable = false;
    }
}

function checkVolume$1() {
    var volumeError = false;
    calculateInvestmentAmount$1();
    let ret = new Big(moduleData$k.volume.minRunMargin).minus(totalCouponCount);
    if (notNull(moduleData$k.volume.volume) || ret.cmp(0) <= 0) {
        if (parseFloatOrDefault(moduleData$k.volume.volume) > parseFloat(moduleData$k.volume.available) && moduleData$k.volume.availableDisplay != "--") {
            var errorMsg = $i18n.n_bot_detail_error_exceed_available;
            moduleData$k.volume.errorMsg = errorMsg;
            moduleData$k.volume.errorVisibility = "visible";
            moduleData$k.volume.borderWidth = "1";
            if (moduleData$k.volume.minRunMargin > 0) {
                calculateUnopenedLiquidationPrice$1();
            } else {
                resetLiquidationPrice$1();
            }
            volumeError = true;
        } else if (moduleData$k.volume.minRunMargin > 0) {
            let ret = new Big(moduleData$k.volume.minRunMargin).minus(totalCouponCount);
            let userMinInvest = Number(ret.cmp(0) > 0 ? ret.toString() : "0");
            if (userMinInvest > parseFloat(moduleData$k.volume.available) && moduleData$k.volume.availableDisplay != "--") {
                var errorMsg = $i18n.$intercept.n_bot_detail_error_available_insufficient_new(`${userMinInvest}`);
                moduleData$k.volume.errorMsg = errorMsg;
                moduleData$k.volume.errorVisibility = "visible";
                moduleData$k.volume.borderWidth = "1";
                resetLiquidationPrice$1();
                volumeError = true;
            } else if (userMinInvest > parseFloatOrDefault(moduleData$k.volume.volume)) {
                var errorMsg = $i18n.$intercept.n_bot_detail_error_amount_great_then(`${userMinInvest} USDT`);
                moduleData$k.volume.errorMsg = errorMsg;
                moduleData$k.volume.errorVisibility = "visible";
                moduleData$k.volume.borderWidth = "1";
                resetLiquidationPrice$1();
                volumeError = true;
            } else {
                moduleData$k.volume.errorVisibility = "gone";
                moduleData$k.volume.borderWidth = "0";
                calculateUnopenedLiquidationPrice$1();
            }
        } else {
            resetLiquidationPrice$1();
            moduleData$k.volume.errorVisibility = "gone";
            moduleData$k.volume.borderWidth = "0";
        }
    } else {
        resetLiquidationPrice$1();
        moduleData$k.volume.errorVisibility = "gone";
        moduleData$k.volume.borderWidth = "0";
    }
    return volumeError;
}

function checkTriggerPrice$2() {
    var triggerPriceError = false;
    if (moduleData$k.setting.trigger.visibility != "visible") {
        return false;
    }
    if (notNull(moduleData$k.setting.trigger.triggerPrice)) {
        if (parseFloat(moduleData$k.setting.trigger.triggerPrice) <= 0) {
            moduleData$k.setting.trigger.errorMsg = $i18n.n_bot_detail_error_trigger_price_gt_zero;
            moduleData$k.setting.trigger.errorVisibility = "visible";
            moduleData$k.setting.trigger.borderWidth = "1";
            triggerPriceError = true;
        } else {
            moduleData$k.setting.trigger.errorVisibility = "gone";
            moduleData$k.setting.trigger.borderWidth = "0";
        }
    } else {
        moduleData$k.setting.trigger.errorVisibility = "gone";
        moduleData$k.setting.trigger.borderWidth = "0";
    }
    return triggerPriceError;
}

function checkTpslPrice$2() {
    var tpslPriceError = false;
    if (moduleData$k.setting.tpsl.visibility != "visible") {
        return false;
    }
    if (parseInt(moduleData$k.originCopyParams.trendType) == 1) {
        if (notNull(moduleData$k.setting.tpsl.takeProfitPrice)) {
            if (parseFloat(moduleData$k.setting.tpsl.takeProfitPrice) <= parseFloat(currentSymbolPrice)) {
                moduleData$k.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_profit_great_then_last_price;
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$k.setting.tpsl.takeProfitPrice) <= parseFloat(moduleData$k.originCopyParams.maxPrice)) {
                moduleData$k.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_profit_great_then_max_price;
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
            moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$k.setting.tpsl.stopLossPrice)) {
            if (parseFloat(moduleData$k.setting.tpsl.stopLossPrice) >= parseFloat(currentSymbolPrice)) {
                moduleData$k.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_loss_less_then_last_price;
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$k.setting.tpsl.stopLossPrice) >= parseFloat(moduleData$k.originCopyParams.minPrice)) {
                moduleData$k.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_loss_less_then_min_price;
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "gone";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "gone";
            moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "0";
        }
    } else if (parseInt(moduleData$k.originCopyParams.trendType) == 2) {
        if (notNull(moduleData$k.setting.tpsl.takeProfitPrice)) {
            if (parseFloat(moduleData$k.setting.tpsl.takeProfitPrice) >= parseFloat(currentSymbolPrice)) {
                moduleData$k.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_profit_less_then_last_price;
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$k.setting.tpsl.takeProfitPrice) >= parseFloat(moduleData$k.originCopyParams.minPrice)) {
                moduleData$k.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_profit_less_then_min_price;
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
            moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$k.setting.tpsl.stopLossPrice)) {
            if (parseFloat(moduleData$k.setting.tpsl.stopLossPrice) <= parseFloat(currentSymbolPrice)) {
                moduleData$k.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_loss_great_then_last_price;
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$k.setting.tpsl.stopLossPrice) <= parseFloat(moduleData$k.originCopyParams.maxPrice)) {
                moduleData$k.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_loss_great_then_max_price;
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "gone";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "gone";
            moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "0";
        }
    } else {
        if (notNull(moduleData$k.setting.tpsl.takeProfitPrice)) {
            if (parseFloat(moduleData$k.setting.tpsl.takeProfitPrice) <= parseFloat(moduleData$k.originCopyParams.maxPrice)) {
                moduleData$k.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_stop_top_great_then_max_price;
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$k.setting.tpsl.takeProfitPrice) <= parseFloat(currentSymbolPrice) || notNull(moduleData$k.setting.trigger.triggerPrice) && parseFloat(moduleData$k.setting.tpsl.takeProfitPrice) <= parseFloat(moduleData$k.setting.trigger.triggerPrice)) {
                var maxPrice = parseFloat(currentSymbolPrice);
                if (notNull(moduleData$k.setting.trigger.triggerPrice) && maxPrice < parseFloat(moduleData$k.setting.trigger.triggerPrice)) {
                    maxPrice = parseFloat(moduleData$k.setting.trigger.triggerPrice);
                }
                moduleData$k.setting.tpsl.takeProfitPriceErrorMsg = $i18n.$intercept.n_bot_detail_error_stop_top_price_great_then(`${maxPrice} USDT`);
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
                moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$k.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
            moduleData$k.setting.tpsl.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$k.setting.tpsl.stopLossPrice)) {
            if (parseFloat(moduleData$k.setting.tpsl.stopLossPrice) >= parseFloat(moduleData$k.originCopyParams.minPrice)) {
                moduleData$k.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_stop_bottom_less_then_min_price;
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$k.setting.tpsl.stopLossPrice) >= parseFloat(currentSymbolPrice) || notNull(moduleData$k.setting.trigger.triggerPrice) && parseFloat(moduleData$k.setting.tpsl.stopLossPrice) >= parseFloat(moduleData$k.setting.trigger.triggerPrice)) {
                var minPrice = parseFloat(currentSymbolPrice);
                if (notNull(moduleData$k.setting.trigger.triggerPrice.length) && minPrice > parseFloat(moduleData$k.setting.trigger.triggerPrice)) {
                    minPrice = parseFloat(moduleData$k.setting.trigger.triggerPrice);
                }
                moduleData$k.setting.tpsl.stopLossPriceErrorMsg = $i18n.$intercept.n_bot_detail_error_stop_bottom_price_less_then(`${minPrice} USDT`);
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "gone";
                moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$k.setting.tpsl.stopLossPriceErrorVisibility = "gone";
            moduleData$k.setting.tpsl.stopLossPriceBorderWidth = "0";
        }
    }
    return tpslPriceError;
}

function getCalculatePrice$1() {
    return moduleData$k.setting.trigger.visibility == "visible" && notNull(moduleData$k.setting.trigger.triggerPrice) ? moduleData$k.setting.trigger.triggerPrice : currentSymbolPrice;
}

function calculateUnopenedLiquidationPrice$1() {
    let liquidationPrice = calculateUnopenedLiquidationPrice$2(moduleData$k.originCopyParams.minPrice, moduleData$k.originCopyParams.maxPrice, moduleData$k.originCopyParams.gridNum, moduleData$k.volume.minRunMargin, parseFloatOrDefault(moduleData$k.volume.volume) + parseFloat(totalCouponCount), moduleData$k.volume.volumeLever, moduleData$k.originCopyParams.runType, moduleData$k.originCopyParams.trendType, currentSymbol, getCalculatePrice$1());
    var buyInRange = false;
    var sellInRange = false;
    if (parseFloat(liquidationPrice.buyLiquidationPrice) > 0) {
        moduleData$k.volume.liquidationPriceBuy = liquidationPrice.buyLiquidationPrice;
        moduleData$k.volume.liquidationPriceBuyDisplay = `${formatDecimal(moduleData$k.volume.liquidationPriceBuy, moduleData$k.precision)} USDT`;
        if (parseFloat(liquidationPrice.buyLiquidationPrice) > parseFloat(moduleData$k.originCopyParams.minPrice) && parseFloat(liquidationPrice.buyLiquidationPrice) < parseFloat(moduleData$k.originCopyParams.maxPrice)) {
            buyInRange = true;
        }
    } else {
        moduleData$k.volume.liquidationPriceBuy = "";
        moduleData$k.volume.liquidationPriceBuyDisplay = "--";
    }
    if (parseFloat(liquidationPrice.sellLiquidationPrice) > 0) {
        moduleData$k.volume.liquidationPriceSell = liquidationPrice.sellLiquidationPrice;
        moduleData$k.volume.liquidationPriceSellDisplay = `${formatDecimal(moduleData$k.volume.liquidationPriceSell, moduleData$k.precision)} USDT`;
        if (parseFloat(liquidationPrice.sellLiquidationPrice) > parseFloat(moduleData$k.originCopyParams.minPrice) && parseFloat(liquidationPrice.sellLiquidationPrice) < parseFloat(moduleData$k.originCopyParams.maxPrice)) {
            sellInRange = true;
        }
    } else {
        moduleData$k.volume.liquidationPriceSell = "";
        moduleData$k.volume.liquidationPriceSellDisplay = "--";
    }
    if (parseInt(moduleData$k.originCopyParams.trendType) == 0) {
        if (buyInRange == true && sellInRange == true) {
            moduleData$k.volume.liquidationPriceErrorMsg = $i18n.n_bot_edit_liquidation_warning;
            moduleData$k.volume.liquidationPriceErrorVisibility = "visible";
        } else if (buyInRange == true) {
            moduleData$k.volume.liquidationPriceErrorMsg = $i18n.n_bot_edit_liquidation_warning_buy;
            moduleData$k.volume.liquidationPriceErrorVisibility = "visible";
        } else if (sellInRange == true) {
            moduleData$k.volume.liquidationPriceErrorMsg = $i18n.n_bot_edit_liquidation_warning_sell;
            moduleData$k.volume.liquidationPriceErrorVisibility = "visible";
        } else {
            moduleData$k.volume.liquidationPriceErrorMsg = "";
            moduleData$k.volume.liquidationPriceErrorVisibility = "gone";
        }
    } else {
        if (buyInRange == true || sellInRange == true) {
            moduleData$k.volume.liquidationPriceErrorMsg = $i18n.n_bot_edit_liquidation_warning;
            moduleData$k.volume.liquidationPriceErrorVisibility = "visible";
        } else {
            moduleData$k.volume.liquidationPriceErrorMsg = "";
            moduleData$k.volume.liquidationPriceErrorVisibility = "gone";
        }
    }
}

function resetLiquidationPrice$1() {
    moduleData$k.volume.liquidationPriceBuy = "";
    moduleData$k.volume.liquidationPriceBuyDisplay = "--";
    moduleData$k.volume.liquidationPriceSell = "";
    moduleData$k.volume.liquidationPriceSellDisplay = "--";
    moduleData$k.volume.liquidationPriceErrorMsg = "";
    moduleData$k.volume.liquidationPriceErrorVisibility = "gone";
}

async function checkAgreementStatus$1() {
    if (moduleData$k.botTrend.bottom.needCheckAgreementStatus == false) {
        return;
    }
    if (moduleData$k.copyPopShow == "false") {
        return;
    }
    let data = await sendRequest("v1/gridstrategy/strategy/get-agreement-status");
    data = handleSpotResponse(data, false);
    if (data != null && parseBoolean(data) == false) {
        moduleData$k.botTrend.bottom.createVisibility = "gone";
        moduleData$k.botTrend.bottom.agreementVisibility = "visible";
    } else {
        if (data != null && parseBoolean(data) == true) {
            moduleData$k.botTrend.bottom.needCheckAgreementStatus = false;
        }
        moduleData$k.botTrend.bottom.createVisibility = "visible";
        moduleData$k.botTrend.bottom.agreementVisibility = "gone";
    }
}

async function copyClick$2() {
    console.log(`copyClick `);
    if (!isInvalidString(moduleData$k.originCopyParams.markCode)) {
        copyText(moduleData$k.originCopyParams.markCode, $i18n.n_trade_bot_share_code, $i18n.n_replicated);
    }
}

moduleEvent$k.remindClick = remindClick$5;

moduleEvent$k.changeLever = changeLever$1;

moduleEvent$k.volumeLeverClick = volumeLeverClick$1;

moduleEvent$k.availableClick = availableClick$1;

moduleEvent$k.settingClick = settingClick$1;

moduleEvent$k.triggerClick = triggerClick$1;

moduleEvent$k.tpslClick = tpslClick$1;

moduleEvent$k.showBotClick = showBotClick$2;

moduleEvent$k.onTextChange = onTextChange$2;

moduleEvent$k.onFocusChange = onFocusChange$2;

moduleEvent$k.createClick = createClick$1;

moduleEvent$k.copyPopDismiss = copyPopDismiss;

moduleEvent$k.volumeChange = volumeChange$1;

moduleEvent$k.diyParamClick = diyParamClick;

moduleEvent$k.showOptionPop = showOptionPop$2;

moduleEvent$k.agreementClick = agreementClick$1;

moduleEvent$k.copyPopCancelClick = copyPopCancelClick;

moduleEvent$k.copyClick = copyClick$2;

moduleEvent$k.couponClick = couponClick$2;

var isRequest$1 = false;

async function start$j() {
    if (!isRequest$1) {
        await requestTraderList();
        isRequest$1 = true;
    }
}

var emptyItem = {
    traderListType: "2"
};

var plateItem = {
    traderListType: "3",
    plateList: [ {
        itemRes: "@drawable/edge_engine_trading_bot_plate_first",
        arrowRes: "@drawable/edge_engine_trading_bot_plate_arrow",
        title: $i18n.n_trade_bot_plate_official_title,
        content: $i18n.n_trade_bot_plate_official_desc,
        type: "1",
        eventName: "tradingbot_click_home_community",
        index: "0"
    }, {
        itemRes: "@drawable/edge_engine_trading_bot_plate_second",
        arrowRes: "@drawable/edge_engine_trading_bot_plate_arrow",
        title: $i18n.n_trade_bot_plate_newcurrency_title,
        content: $i18n.n_trade_bot_plate_newcurrency_desc,
        type: "1",
        eventName: "tradingbot_click_home_newcoin",
        index: "1"
    }, {
        itemRes: "@drawable/edge_engine_trading_bot_plate_third",
        arrowRes: "@drawable/edge_engine_trading_bot_plate_arrow",
        title: $i18n.n_trade_bot_plate_expert_title,
        content: $i18n.n_trade_bot_plate_expert_desc,
        type: "1",
        eventName: "tradingbot_click_home_traders",
        index: "2"
    } ]
};

function defaultData$j() {
    return {
        traderList: []
    };
}

const {moduleData: moduleData$j, moduleEvent: moduleEvent$j} = moduleDefine("tradeList", start$j, defaultData$j);

async function requestTraderList() {
    let engineIndex = curSelectedIndex;
    let params = getCurrentParams$2(engineIndex);
    let requestParams = {};
    requestParams.rankType = params.rankType;
    requestParams.symbol = params.symbol;
    requestParams.timeRangeType = params.timeRangeType;
    requestParams.profitRateType = params.profitRateType;
    let listData;
    if (engineIndex == 4) {
        requestParams.trendType = params.trendType;
        listData = await sendRequest("v1/gridstrategy/rank", requestParams);
    } else {
        requestParams.searchType = params.searchType;
        requestParams.queryStrategyType = params.queryStrategyType;
        listData = await sendRequest("v1/quantization/gridding/ranks/bot-rank", requestParams);
    }
    listData = handleSpotResponse(listData, true);
    if (!listData || listData == null) {
        listData = [];
        let cacheList = getCurrentListData(engineIndex);
        if (cacheList && cacheList != null && cacheList.length > 0) {
            listData = Object.assign([], cacheList);
        } else {
            listData.push(emptyItem);
        }
    } else if (listData.length == 0) {
        listData = [];
        listData.push(emptyItem);
    } else {
        listDataConfig(listData, requestParams.rankType == 2, engineIndex == 4);
        setCurrentListData(Object.assign([], listData), engineIndex);
    }
    listData.push(plateItem);
    if (engineIndex != curSelectedIndex) {
        return;
    }
    moduleData$j.traderList = listData;
    showLoading(false);
}

async function listDataConfig(list, isMostProfit, isContract) {
    list.forEach((async function(item, index) {
        item.index = index;
        item.isContract = isContract;
        item.traderListType = "1";
        let profitRate = parseFloat(item.totalProfitRate);
        if (isNaN(profitRate)) {
            profitRate = 0;
            item.totalProfitRate = "0";
        }
        let totalProfitRateDisplay = `${profitRate >= 0 ? "+" : ""}${format(multiply(item.totalProfitRate, 100), 2)}%`;
        let textColor = commonData.colorMode == 1 ? "#5E5E61" : "#8A8A8E";
        if (isContract) {
            let leverStr = isInvalidString(item.lever) ? "" : `丨${item.lever}X`;
            if (item.trendType == 0) {
                let highLightText = $i18n.n_contract_grid_neutral;
                item.runTypeName = `<span style="color:${textColor}; font-size:11px;">${highLightText}${leverStr}</span>`;
            } else {
                let highLightText = item.trendType == 1 ? $i18n.n_contract_grid_buy : $i18n.n_contract_grid_sell;
                let highColor = item.trendType == 1 ? getPriceColor(1) : getPriceColor(-1);
                item.runTypeName = `<span style="color:${highColor}; font-size:11px;">${highLightText}</span><span style="color:${textColor}; font-size:11px;">${leverStr}</span>`;
            }
            item.rightTitle = $i18n.n_copytrading_maximum_drawdown;
            item.rightValue = isInvalidString(item.mdd) ? "0.00%" : `${format(multiply(item.mdd, 100), 2)}%`;
            item.matchNum24 = isInvalidString(item.matchNum24) ? 0 : item.matchNum24;
            item.matchNumTotal = isInvalidString(item.matchNumTotal) ? 0 : item.matchNumTotal;
            item.arbitrage = `${item.matchNum24}｜${item.matchNumTotal}`;
            item.arbitrageVisibility = "visible";
            item.symbolShow = symbolDesc(item.symbol);
            item.symbolUrl = getPNGIconURLByCurrency(item.symbol.split("-")[0]);
            item.minInvest = isInvalidString(item.minInvest) ? "--" : "$" + thousandsFormatter(format(item.minInvest, 2));
        } else {
            item.arbitrageVisibility = "gone";
            item.rightValue = `${format(multiply(item.matchRate, 100), 2)}%`;
            item.symbolUrl = getPNGIconURLByCurrency(item.symbolShow.split("/")[0]);
            if (item.runType == 2) {
                item.runTypeName = `<span style="color:${textColor}; font-size:11px;">${$i18n.n_trade_bot_spot_martingale}</span>`;
                item.rightTitle = $i18n.n_copy_trading_trade_win_rate;
            } else if (item.runType == 3) {
                item.runTypeName = `<span style="color:${textColor}; font-size:11px;">${$i18n.n_trade_bot_infinite_grid}</span>`;
                item.rightTitle = $i18n.n_copy_trading_trade_win_rate;
            } else {
                item.runTypeName = `<span style="color:${textColor}; font-size:11px;">${$i18n.n_trade_bot_spot_grid}</span>`;
                item.rightTitle = $i18n.n_copy_trading_trade_win_rate;
            }
        }
        item.profits = JSON.stringify(item.profitChartY);
        item.copyNum = parseInt(item.copyNum).toFixed(0);
        item.winRateFontSize = commonData.language.toLocaleLowerCase().search("zh-cn") == 0 || commonData.language.toLocaleLowerCase().search("english") == 0 ? 12 : 11;
        if (isNaN(parseInt(item.runTime, 10))) {
            item.date = "--";
        } else {
            let holdTime = parseInt(item.runTime, 10) / 1e3;
            if (holdTime < 60) {
                item.date = $i18n.n_trade_bot_less_than_minute;
            } else if (holdTime < 3600) {
                item.date = $i18n.$intercept.n_trade_bot_more_than_minute(format(holdTime / 60, 0));
            } else if (holdTime < 24 * 3600) {
                item.date = $i18n.$intercept.n_trade_bot_more_than_hour(format(holdTime / 3600, 0), format(holdTime / 60 % 60, 0));
            } else {
                let hour = format(holdTime / 3600 % 24, 0);
                let minute = format(holdTime / 60 % 60, 0);
                if (hour == 0 && minute == 0) {
                    item.date = `${format(holdTime / (24 * 3600), 0)}${$i18n.n_day}`;
                } else {
                    item.date = $i18n.$intercept.n_trade_bot_more_than_day(format(holdTime / (24 * 3600), 0), hour, minute);
                }
            }
        }
        let totalProfitAmount = "$" + thousandsFormatter(format(item.totalProfitAmount, 2));
        let isBot = isContract && item.userType == 0;
        let aprValue = parseFloat(item.apr);
        if (isNaN(aprValue)) {
            aprValue = 0;
            item.apr = "0";
        }
        let botAprRateDisplay = !isBot ? "0.00%" : `${aprValue >= 0 ? "+" : ""}${format(multiply(aprValue, 100), 2)}%`;
        if (isMostProfit) {
            item.largeTitle = isBot ? $i18n.n_trade_bot_title_annualized_yield : $i18n.n_copy_trading_profit;
            item.normalTitle = isBot ? $i18n.n_trade_bot_profit_rate_of_some_days.replace("%s", `${item.runTimeDay}`).replace("{{0}}", `${item.runTimeDay}`) : $i18n.n_trade_bot_yield_rate;
            item.largeContent = isBot ? botAprRateDisplay : totalProfitAmount;
            item.normalContent = totalProfitRateDisplay;
            item.apyTextColor = isBot ? getPriceColor(aprValue) : getPriceColor(Number(item.totalProfitAmount));
        } else {
            item.largeTitle = isBot ? $i18n.n_trade_bot_profit_rate_of_some_days.replace("%s", `${item.runTimeDay}`).replace("{{0}}", `${item.runTimeDay}`) : $i18n.n_trade_bot_yield_rate;
            item.normalTitle = isBot ? $i18n.n_trade_bot_title_annualized_yield : $i18n.n_copy_trading_profit;
            item.largeContent = totalProfitRateDisplay;
            item.normalContent = isBot ? botAprRateDisplay : totalProfitAmount;
            item.apyTextColor = getPriceColor(profitRate);
        }
    }));
}

async function clickedItem$2(index) {
    if (commonData.isLogin == 0) {
        await openPage("login");
        return;
    }
    if (index >= moduleData$j.traderList.length) {
        return;
    }
    let item = moduleData$j.traderList[index];
    console.log(`clickedItem at:${index} markCode：${item.markCode} 数据:${JSON.stringify(item)}`);
    if (item.symbol.includes("-")) {
        await setCopyParams$1(item, 0, 1);
        if (item.userType == 1) {
            await analytics$1("tradingbot_copy_userfuturesgrid_app");
        } else {
            await analytics$1("tradingbot_copy_botsfuturesgrid_app");
        }
    } else {
        openURL(`${commonData.webUrl}/${commonData.language}/tradingbot/h5/details?id=${item.id}&source=${commonData.source}&utm_track=home`);
    }
}

async function clickedCopy$2(index) {
    if (commonData.isLogin == 0) {
        await openPage("login");
        return;
    }
    if (index >= moduleData$j.traderList.length) {
        return;
    }
    let item = moduleData$j.traderList[index];
    if (item.symbol.includes("-")) {
        await setCopyParams$1(item, 0, 1);
        if (item.userType == 1) {
            await analytics$1("tradingbot_copy_userfuturesgrid_app");
        } else {
            await analytics$1("tradingbot_copy_botsfuturesgrid_app");
        }
    } else {
        let create = "create";
        if (item.runType == 2) {
            create = "create-martingale";
            analytics$1("tradingbot_copy_botsmargintalegrid_app");
        } else if (item.runType == 3) {
            create = "create-infinity";
            analytics$1("tradingbot_copy_botsinfinitygrid_app");
        } else {
            create = "create";
            analytics$1("tradingbot_copy_botsspotsgrid_app");
        }
        openURL(`${commonData.webUrl}/${commonData.language}/tradingbot/h5/${create}?copyId=${item.id}&source=${commonData.source}&utm_track=`);
    }
}

async function onSelectedIndex$2(index) {
    let cacheList = getCurrentListData(index);
    if (cacheList && cacheList != null && cacheList.length > 0) {
        let listData = Object.assign([], cacheList);
        listData.push(plateItem);
        moduleData$j.traderList = listData;
    }
    requestTraderList();
}

moduleEvent$j.copyShareCode = async function(markCode) {
    copyText(markCode, $i18n.n_trade_bot_share_code, $i18n.n_replicated);
};

moduleEvent$j.plateClickItem = async function(index, eventName) {
    let jumpUrl = "";
    if (index == "0") {
        jumpUrl = "holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/im/groupchat?groupId=%40TGS%23_1653703810wZnQErrMZE&title=TradingBot";
    } else if (index == "1") {
        jumpUrl = `${commonData.webUrl}/${commonData.language}/tradingbot/h5/${"new"}-coin?source=${commonData.source}`;
    } else if (index == "2") {
        jumpUrl = `${commonData.webUrl}/${commonData.language}/tradingbot/h5/spot-grid?tab=kol&source=${commonData.source}`;
    }
    openURL(jumpUrl);
    await analytics$1(eventName);
};

moduleEvent$j.clickedCopy = clickedCopy$2;

moduleEvent$j.clickedItem = clickedItem$2;

moduleEvent$j.requestTraderList = requestTraderList;

moduleEvent$j.onSelectedIndex = onSelectedIndex$2;

var dataLoadSuccess$2 = false;

async function start$i() {}

function defaultData$i() {
    return {
        traderList: []
    };
}

const {moduleData: moduleData$i, moduleEvent: moduleEvent$i} = moduleDefine("contractRecommendList", start$i, defaultData$i);

async function requestRecommendList$1() {
    let params = getCurrentParams$1();
    let requestParams = {};
    requestParams.rankType = params.rankType;
    requestParams.symbol = params.symbol;
    requestParams.timeRangeType = params.timeRangeType;
    requestParams.trendType = params.trendType;
    requestParams.profitRateType = params.profitRateType;
    let listData = await sendRequest("v1/gridstrategy/rank", requestParams);
    listData = handleSpotResponse(listData, true);
    if (!listData || listData == null) {
        if (dataLoadSuccess$2) {
            showLoading(false);
            return;
        } else {
            listData = [];
            listData.push(emptyItem);
        }
    } else if (listData.length == 0) {
        listData = [];
        listData.push(emptyItem);
    } else {
        listDataConfig(listData, requestParams.rankType == 2, true);
        dataLoadSuccess$2 = true;
    }
    moduleData$i.traderList = listData;
    showLoading(false);
}

async function clickedItem$1(index) {
    clickedCopy$1(index);
}

async function clickedCopy$1(index) {
    if (index >= moduleData$i.traderList.length) {
        return;
    }
    let item = moduleData$i.traderList[index];
    await setCopyParams$1(item, 1, 2);
    if (item.userType == 1) {
        await analytics$1("tradingbot_copy_userfuturesgrid_app");
    } else {
        await analytics$1("tradingbot_copy_botsfuturesgrid_app");
    }
}

moduleEvent$i.copyShareCode = async function(markCode) {
    copyText(markCode, $i18n.n_trade_bot_share_code, $i18n.n_replicated);
};

moduleEvent$i.clickedCopy = clickedCopy$1;

moduleEvent$i.clickedItem = clickedItem$1;

moduleEvent$i.requestRecommendList = requestRecommendList$1;

async function start$h() {}

function setPageParams$1(params) {
    moduleData$h.pageType = parseInt(params.pageType);
    if (moduleData$h.pageType == 1) {
        moduleData$h.filterBottomVisibility = "gone";
    }
}

function defaultData$h() {
    var data = {
        pageType: 0,
        selectedTitle: $i18n.n_trade_bot_most_yield_rate,
        sortMenuShow: false,
        tempSortMenuList: [],
        tempSortMenuIndex: 0,
        filterMenuShow: false,
        runningTimeList: [],
        runningTimeSelectedIndex: 0,
        tempRunningTimeList: [],
        tempRunningTimeSelectedIndex: 0,
        rateList: [],
        rateSelectedIndex: 0,
        tempRateList: [],
        tempRateSelectedIndex: 0,
        trendTypeList: [],
        trendTypeSelectedIndex: 0,
        tempTrendTypeList: [],
        tempTrendTypeSelectedIndex: 0,
        trendTypeVisibility: "gone",
        marketSymbol: "",
        marketSymbolShow: $i18n.n_trade_bot_market_all,
        tempMarketSymbol: "",
        tempMarketSymbolShow: $i18n.n_trade_bot_market_all,
        showFromType: "0",
        filterBottomVisibility: "visible"
    };
    var runningTimes = [];
    for (let i = 0; i < 6; i++) {
        var item = {};
        item.cellType = "1";
        item.index = i;
        switch (i) {
          case 0:
            item.text = $i18n.n_trade_bot_all;
            item.param = "0";
            break;

          case 1:
            item.text = $i18n.n_trade_bot_day_less;
            item.param = "3";
            break;

          case 2:
            item.text = $i18n.$intercept.n_trade_bot_day_interval("2", "7");
            item.param = "4";
            break;

          case 3:
            item.text = $i18n.$intercept.n_trade_bot_day_interval("8", "30");
            item.param = "5";
            break;

          case 4:
            item.text = $i18n.$intercept.n_trade_bot_day_interval("30", "90");
            item.param = "6";
            break;

          case 5:
            item.text = $i18n.$intercept.n_trade_bot_day_greater("90");
            item.param = "7";
            break;
        }
        if (i === data.runningTimeSelectedIndex) {
            item.background = "@color/kColorMajorTheme006";
            item.textColor = "@color/kColorMajorTheme100";
        } else {
            item.background = "@color/KBaseColorInputBackground";
            item.textColor = "@color/kColorPrimaryText";
        }
        runningTimes.push(item);
    }
    data.runningTimeList = runningTimes;
    data.tempRunningTimeList = runningTimes;
    var rates = [];
    for (let i = 0; i < 5; i++) {
        var item = {};
        item.cellType = "1";
        item.index = i;
        switch (i) {
          case 0:
            item.text = $i18n.n_trade_bot_all;
            item.param = "0";
            break;

          case 1:
            item.text = "0 ~ 10%";
            item.param = "1";
            break;

          case 2:
            item.text = "10 ~ 50%";
            item.param = "2";
            break;

          case 3:
            item.text = "50 ~ 100%";
            item.param = "3";
            break;

          case 4:
            item.text = ">100%";
            item.param = "4";
            break;
        }
        if (i === data.rateSelectedIndex) {
            item.background = "@color/kColorMajorTheme006";
            item.textColor = "@color/kColorMajorTheme100";
        } else {
            item.background = "@color/KBaseColorInputBackground";
            item.textColor = "@color/kColorPrimaryText";
        }
        rates.push(item);
    }
    data.rateList = rates;
    data.tempRateList = rates;
    var trendTypes = [];
    for (let i = 0; i < 4; i++) {
        var item = {};
        item.cellType = "1";
        item.index = i;
        switch (i) {
          case 0:
            item.text = $i18n.n_trade_bot_all;
            item.param = 3;
            break;

          case 1:
            item.text = $i18n.n_contract_grid_buy;
            item.param = 1;
            break;

          case 2:
            item.text = $i18n.n_contract_grid_sell;
            item.param = 2;
            break;

          case 3:
            item.text = $i18n.n_contract_grid_neutral;
            item.param = 0;
            break;
        }
        if (i === data.trendTypeSelectedIndex) {
            item.background = "@color/kColorMajorTheme006";
            item.textColor = "@color/kColorMajorTheme100";
        } else {
            item.background = "@color/KBaseColorInputBackground";
            item.textColor = "@color/kColorPrimaryText";
        }
        trendTypes.push(item);
    }
    data.trendTypeList = trendTypes;
    data.tempTrendTypeList = trendTypes;
    return data;
}

const {moduleData: moduleData$h, moduleEvent: moduleEvent$h} = moduleDefine("filter", start$h, defaultData$h);

function getCurrentParams() {
    if (moduleData$h.pageType == 1) {
        return getCurrentParams$1();
    } else {
        return getCurrentParams$2();
    }
}

function getSortMenuList(sortMenuIndex) {
    var sortMenuList = [];
    let length = currentIsContract() ? 5 : 3;
    for (let i = 0; i < length; i++) {
        var item = {};
        item.type = "1";
        item.index = i;
        if (i == sortMenuIndex) {
            item.textColor = "@color/kColorMajorTheme100";
            item.selImageVisibility = "visible";
        } else {
            item.textColor = "@color/kColorSecondaryButtonText";
            item.selImageVisibility = "gone";
        }
        getSortMenuItem(i, item);
        sortMenuList.push(item);
    }
    return sortMenuList;
}

function getSortMenuItem(index, item = {}) {
    switch (index) {
      case 0:
        item.title = $i18n.n_trade_bot_most_yield_rate;
        item.param = "3";
        break;

      case 1:
        item.title = $i18n.n_trade_bot_most_income;
        item.param = "2";
        break;

      case 2:
        item.title = $i18n.n_trade_bot_most_copy;
        item.param = "4";
        break;

      case 3:
        item.title = $i18n.n_trade_bot_most_arbitrage_numbers;
        item.param = "6";
        break;

      case 4:
        item.title = $i18n.n_trade_min_invest_amt_lowest;
        item.param = "7";
        break;

      default:
        item.title = "";
        item.param = "3";
        break;
    }
    return item;
}

function currentIsContract() {
    return getCurrentParams().searchType == 2;
}

function selectedIndexChange() {
    var params = getCurrentParams();
    moduleData$h.tempSortMenuIndex = params.sortMenuIndex;
    moduleData$h.selectedTitle = getSortMenuItem(params.sortMenuIndex).title;
}

function showSortMenuPop() {
    var params = getCurrentParams();
    moduleData$h.tempSortMenuIndex = params.sortMenuIndex;
    moduleData$h.tempSortMenuList = getSortMenuList(params.sortMenuIndex);
    moduleData$h.sortMenuShow = "true";
}

async function clickedSortMenuItem(index) {
    switch (index) {
      case 0:
        await analytics$1("tradingbot_click_home_roi");
        break;

      case 1:
        await analytics$1("tradingbot_click_home_profit");
        break;

      case 2:
        await analytics$1("tradingbot_click_home_copytimes");
        break;
    }
    if (index == moduleData$h.tempSortMenuIndex) {
        return;
    }
    var lastItem = moduleData$h.tempSortMenuList[moduleData$h.tempSortMenuIndex];
    lastItem.textColor = "@color/kColorSecondaryButtonText";
    lastItem.selImageVisibility = "gone";
    moduleData$h.tempSortMenuIndex = index;
    var selItem = moduleData$h.tempSortMenuList[moduleData$h.tempSortMenuIndex];
    selItem.textColor = "@color/kColorMajorTheme100";
    selItem.selImageVisibility = "visible";
    moduleData$h.selectedTitle = selItem.title;
    moduleData$h.sortMenuShow = "false";
    filterParamsChange();
}

function clickedSortCancel() {
    moduleData$h.sortMenuShow = "false";
    console.log(`clickedCancel`);
}

async function filterMenuClick() {
    showFilterMenuPop$1({
        fromType: "0"
    });
    await analytics$1("tradingbot_click_home_select");
}

function showFilterMenuPop$1(params) {
    console.log(`filterPop-showFilterMenuPop = ${JSON.stringify(params)}`);
    if (params == undefined || params["fromType"] == undefined) {
        moduleData$h.showFromType = "1";
    } else {
        moduleData$h.showFromType = "0";
    }
    if (moduleData$h.showFromType == "1") {
        if (params != undefined && params.symbol != undefined) {
            moduleData$h.tempMarketSymbolShow = params.symbolShow;
            moduleData$h.tempMarketSymbol = params.symbol;
        } else {
            moduleData$h.tempMarketSymbolShow = moduleData$h.marketSymbolShow;
            moduleData$h.tempMarketSymbol = moduleData$h.marketSymbol;
        }
        if (params != undefined && params.timeRangeType != undefined) {
            var runningTimeList = moduleData$h.tempRunningTimeList.rawArray();
            runningTimeList.forEach((function(item, index) {
                if (item.param === params.timeRangeType) {
                    item.background = "@color/kColorMajorTheme006";
                    item.textColor = "@color/kColorMajorTheme100";
                    moduleData$h.tempRunningTimeSelectedIndex = index;
                } else {
                    item.background = "@color/KBaseColorInputBackground";
                    item.textColor = "@color/kColorPrimaryText";
                }
            }));
            moduleData$h.tempRunningTimeList = runningTimeList;
        } else {
            moduleData$h.tempRunningTimeList = moduleData$h.runningTimeList;
            moduleData$h.tempRunningTimeSelectedIndex = moduleData$h.runningTimeSelectedIndex;
        }
        if (params != undefined && params.profitRateType != undefined) {
            var rateList = moduleData$h.tempRateList.rawArray();
            rateList.forEach((function(item, index) {
                if (item.param === params.profitRateType) {
                    item.background = "@color/kColorMajorTheme006";
                    item.textColor = "@color/kColorMajorTheme100";
                    moduleData$h.tempRateSelectedIndex = index;
                } else {
                    item.background = "@color/KBaseColorInputBackground";
                    item.textColor = "@color/kColorPrimaryText";
                }
            }));
            moduleData$h.tempRateList = rateList;
        } else {
            moduleData$h.tempRateList = moduleData$h.rateList;
            moduleData$h.tempRateSelectedIndex = moduleData$h.rateSelectedIndex;
        }
        if (params != undefined && params.trendType != undefined) {
            var trendTypeList = moduleData$h.tempTrendTypeList.rawArray();
            trendTypeList.forEach((function(item, index) {
                if (item.param === params.trendType) {
                    item.background = "@color/kColorMajorTheme006";
                    item.textColor = "@color/kColorMajorTheme100";
                    moduleData$h.tempTrendTypeSelectedIndex = index;
                } else {
                    item.background = "@color/KBaseColorInputBackground";
                    item.textColor = "@color/kColorPrimaryText";
                }
            }));
            moduleData$h.tempTrendTypeList = trendTypeList;
            moduleData$h.trendTypeVisibility = "visible";
        } else {
            moduleData$h.temptrendTypeList = moduleData$h.trendTypeList;
            moduleData$h.tempTrendTypeSelectedIndex = moduleData$h.trendTypeSelectedIndex;
            moduleData$h.trendTypeVisibility = "gone";
        }
    } else {
        var params = getCurrentParams();
        if (params.symbol === "") {
            params.marketSymbolShow = moduleData$h.marketSymbolShow;
            params.symbol = moduleData$h.marketSymbol;
        }
        moduleData$h.tempMarketSymbolShow = params.marketSymbolShow;
        moduleData$h.tempMarketSymbol = params.symbol;
        if (params.runningTimeSelectedIndex === null || params.runningTimeSelectedIndex === undefined) {
            params.runningTimeList = moduleData$h.runningTimeList;
            params.runningTimeSelectedIndex = moduleData$h.runningTimeSelectedIndex;
        }
        moduleData$h.tempRunningTimeList = params.runningTimeList;
        moduleData$h.tempRunningTimeSelectedIndex = params.runningTimeSelectedIndex;
        if (params.rateSelectedIndex === null || params.rateSelectedIndex === undefined) {
            params.rateList = moduleData$h.rateList;
            params.rateSelectedIndex = moduleData$h.rateSelectedIndex;
        }
        moduleData$h.tempRateList = params.rateList;
        moduleData$h.tempRateSelectedIndex = params.rateSelectedIndex;
        if (params.searchType == 2) {
            moduleData$h.trendTypeVisibility = "visible";
            if (params.trendTypeSelectedIndex === null || params.trendTypeSelectedIndex === undefined) {
                params.trendTypeList = moduleData$h.trendTypeList;
                params.trendTypeSelectedIndex = moduleData$h.trendTypeSelectedIndex;
            }
            moduleData$h.tempTrendTypeList = params.trendTypeList;
            moduleData$h.tempTrendTypeSelectedIndex = params.trendTypeSelectedIndex;
        } else {
            moduleData$h.trendTypeVisibility = "gone";
        }
    }
    moduleData$h.filterMenuShow = "true";
}

async function marketSelected() {
    var params = getCurrentParams();
    await openPage("tradingBotSelectMarket", type = "native", params = {
        symbol: moduleData$h.tempMarketSymbol,
        searchType: params.searchType
    });
}

function runningTimeSelected(index) {
    if (index === moduleData$h.tempRunningTimeSelectedIndex) {
        return;
    }
    var lastItem = moduleData$h.tempRunningTimeList[moduleData$h.tempRunningTimeSelectedIndex];
    lastItem.background = "@color/KBaseColorInputBackground";
    lastItem.textColor = "@color/kColorPrimaryText";
    var selectedItem = moduleData$h.tempRunningTimeList[index];
    selectedItem.background = "@color/kColorMajorTheme006";
    selectedItem.textColor = "@color/kColorMajorTheme100";
    moduleData$h.tempRunningTimeSelectedIndex = index;
}

function rateSelected(index) {
    if (index === moduleData$h.tempRateSelectedIndex) {
        return;
    }
    var lastItem = moduleData$h.tempRateList[moduleData$h.tempRateSelectedIndex];
    lastItem.background = "@color/KBaseColorInputBackground";
    lastItem.textColor = "@color/kColorPrimaryText";
    var selectedItem = moduleData$h.tempRateList[index];
    selectedItem.background = "@color/kColorMajorTheme006";
    selectedItem.textColor = "@color/kColorMajorTheme100";
    moduleData$h.tempRateSelectedIndex = index;
}

function trendTypeSelected(index) {
    if (index === moduleData$h.tempTrendTypeSelectedIndex) {
        return;
    }
    var lastItem = moduleData$h.tempTrendTypeList[moduleData$h.tempTrendTypeSelectedIndex];
    lastItem.background = "@color/KBaseColorInputBackground";
    lastItem.textColor = "@color/kColorPrimaryText";
    var selectedItem = moduleData$h.tempTrendTypeList[index];
    selectedItem.background = "@color/kColorMajorTheme006";
    selectedItem.textColor = "@color/kColorMajorTheme100";
    moduleData$h.tempTrendTypeSelectedIndex = index;
}

async function clickedFilterClose() {
    moduleData$h.filterMenuShow = "false";
}

async function filterMenuDismiss() {
    if (moduleData$h.showFromType == "1") {
        await H5FilterPopClose();
    }
}

function clickedFilterDone() {
    console.log(`sortPop-clickedFilterDone`);
    moduleData$h.filterMenuShow = "false";
    filterParamsChange();
}

async function clickedFilterReset() {
    sendMarketSearchSymbol$1({
        symbol: ""
    });
    runningTimeSelected(0);
    rateSelected(0);
    trendTypeSelected(0);
}

async function filterParamsChange() {
    console.log(`filterParamsChange fromType = ${moduleData$h.showFromType}`);
    if (moduleData$h.showFromType == "1") {
        var params = {};
        var runningTimeItem = moduleData$h.tempRunningTimeList[moduleData$h.tempRunningTimeSelectedIndex];
        params.timeRangeType = runningTimeItem.param;
        var rateItem = moduleData$h.tempRateList[moduleData$h.tempRateSelectedIndex];
        params.profitRateType = rateItem.param;
        var trendTypeItem = moduleData$h.tempTrendTypeList[moduleData$h.tempTrendTypeSelectedIndex];
        params.trendType = trendTypeItem.param;
        params.symbol = moduleData$h.tempMarketSymbol;
        params.symbolShow = moduleData$h.tempMarketSymbolShow;
        await H5FilterSetData(params);
    } else {
        var params = getCurrentParams();
        var sortItem = getSortMenuItem(moduleData$h.tempSortMenuIndex);
        params.rankType = sortItem.param;
        params.sortMenuIndex = moduleData$h.tempSortMenuIndex;
        var runningTimeItem = moduleData$h.tempRunningTimeList[moduleData$h.tempRunningTimeSelectedIndex];
        params.timeRangeType = runningTimeItem.param;
        params.runningTimeList = moduleData$h.tempRunningTimeList;
        params.runningTimeSelectedIndex = moduleData$h.tempRunningTimeSelectedIndex;
        var rateItem = moduleData$h.tempRateList[moduleData$h.tempRateSelectedIndex];
        params.profitRateType = rateItem.param;
        params.rateList = moduleData$h.tempRateList;
        params.rateSelectedIndex = moduleData$h.tempRateSelectedIndex;
        var trendTypeItem = moduleData$h.tempTrendTypeList[moduleData$h.tempTrendTypeSelectedIndex];
        params.trendType = trendTypeItem.param;
        params.trendTypeList = moduleData$h.tempTrendTypeList;
        params.trendTypeSelectedIndex = moduleData$h.tempTrendTypeSelectedIndex;
        params.symbol = moduleData$h.tempMarketSymbol;
        params.marketSymbolShow = moduleData$h.tempMarketSymbolShow;
        if (moduleData$h.pageType == 1) {
            await requestRecommendList$1();
        } else {
            await requestTraderList();
        }
    }
}

function sendMarketSearchSymbol$1(params) {
    if (params.symbol == "" || Object.keys(params).length === 0) {
        moduleData$h.tempMarketSymbolShow = $i18n.n_trade_bot_market_all;
        moduleData$h.tempMarketSymbol = "";
    } else {
        moduleData$h.tempMarketSymbolShow = params.displayName;
        moduleData$h.tempMarketSymbol = params.symbol;
    }
}

function onContractSymbolChange(params) {
    console.log(`onContractSymbolChange = ${JSON.stringify(params)}`);
    clickedFilterReset();
    sendMarketSearchSymbol$1(params);
    filterParamsChange();
}

moduleEvent$h.showSortMenuPop = showSortMenuPop;

moduleEvent$h.clickedSortMenuItem = clickedSortMenuItem;

moduleEvent$h.clickedSortCancel = clickedSortCancel;

moduleEvent$h.runningTimeSelected = runningTimeSelected;

moduleEvent$h.rateSelected = rateSelected;

moduleEvent$h.trendTypeSelected = trendTypeSelected;

moduleEvent$h.filterMenuClick = filterMenuClick;

moduleEvent$h.showFilterMenuPop = showFilterMenuPop$1;

moduleEvent$h.clickedFilterClose = clickedFilterClose;

moduleEvent$h.filterMenuDismiss = filterMenuDismiss;

moduleEvent$h.clickedFilterDone = clickedFilterDone;

moduleEvent$h.clickedFilterReset = clickedFilterReset;

moduleEvent$h.marketSelected = marketSelected;

moduleEvent$h.selectedIndexChange = selectedIndexChange;

moduleEvent$h.setPageParams = setPageParams$1;

async function start$g() {}

function defaultData$g() {
    return {};
}

const {moduleData: moduleData$g, moduleEvent: moduleEvent$g} = moduleDefine("tradePage", start$g, defaultData$g);

moduleEvent$g.onCreate = async function() {
    console.log(`tradePage.js---\x3e>> onCreate`);
};

moduleEvent$g.onStart = async function() {
    console.log(`tradePage.js---\x3e>> onStart`);
    onStart$3();
    requestTopAssetInfo();
};

moduleEvent$g.onStop = async function() {
    console.log(`tradePage.js---\x3e>> onStop`);
};

async function onTraderPullRefresh$1() {
    console.log(`tradePage.js---\x3e>> onTraderPullRefresh`);
    requestTopAssetInfo();
    requestTraderList();
}

async function onSelectedIndex$1(index) {
    var idx = index;
    if (typeof index === "string") {
        idx = parseInt(index);
    }
    if (idx <= 0 || idx > 4) {
        idx = 1;
    }
    console.log(`onSelectedIndex index=${idx} curSelectedIndex=${curSelectedIndex}`);
    if (curSelectedIndex != idx) {
        onSelectedIndex$3(idx);
        onSelectedIndex$2(idx);
        selectedIndexChange();
        var eventName = "";
        if (idx == 0) {
            eventName = "tradingbot_click_home_r_all";
        } else if (idx == 1) {
            eventName = "tradingbot_click_home_r_spotgrid";
        } else if (idx == 2) {
            eventName = "tradingbot_click_home_r_margintale";
        } else if (idx == 3) {
            eventName = "tradingbot_click_home_r_infinitegrid";
        } else if (idx == 4) {
            eventName = "tradingbot_click_home_r_contractgrid";
        }
        await analytics$1(eventName);
    }
}

moduleEvent$g.setPageParams = async function(params) {
    if (params != null && !isInvalidString(params.markCode)) {
        showLoading(true);
        let listData = await sendRequest("v1/gridstrategy/strategy/search", params = {
            markCode: params.markCode
        });
        listData = handleSpotResponse(listData, false);
        if (!listData || listData == null || listData.length == 0) ; else {
            listDataConfig(listData, false, true);
            await setCopyParams$1(listData[0], 0, 5);
        }
        showLoading(false);
    }
};

moduleEvent$g.onTraderPullRefresh = onTraderPullRefresh$1;

async function start$f() {}

function defaultData$f() {
    var data = {};
    return data;
}

const {moduleData: moduleData$f, moduleEvent: moduleEvent$f} = moduleDefine("createBot", start$f, defaultData$f);

async function spotClick() {
    openCreatePage("create");
    await analytics$1("tradingbot_click_home_spotgrid");
}

async function infiniteClick() {
    openCreatePage("create-infinity");
    await analytics$1("tradingbot_click_home_infinitegrid");
}

async function martingaleClick() {
    openCreatePage("create-martingale");
    await analytics$1("tradingbot_click_home_margintale");
}

async function contractClick() {
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/trade/contractGrid?source=${commonData.source}`);
    await analytics$1("tradingbot_click_home_futuresgrid");
}

function openCreatePage(page) {
    var url = `holigeit://open/v1?login=1&url=${commonData.webUrl}/${commonData.language}/tradingbot/h5/${page}?source=${commonData.source}`;
    openURL(url);
}

moduleEvent$f.spotClick = spotClick;

moduleEvent$f.infiniteClick = infiniteClick;

moduleEvent$f.martingaleClick = martingaleClick;

moduleEvent$f.contractClick = contractClick;

var supportSymbolList = [];

async function start$e() {
    console.log(`contractTopSymbol.js---\x3e>> start`);
}

function defaultData$e() {
    return {
        symbolTitle: "",
        symbolRate: "",
        symbolRateColor: "@color/kColorThreeLevelText",
        isOpen: false,
        chartArrowRes: "@drawable/edge_engine_icon_copysetting_down"
    };
}

const {moduleData: moduleData$e, moduleEvent: moduleEvent$e} = moduleDefine("contractTopSymbol", start$e, defaultData$e);

async function onCreate$1() {
    console.log(`contractTopSymbol.js---\x3e>> onCreate`);
    changeTitle();
    refreshSymbolPrice();
}

async function onStart$2() {
    console.log(`contractTopSymbol.js---\x3e>> onStart`);
    requestSymbolData();
}

async function onStop() {
    console.log(`contractTopSymbol.js---\x3e>> onStop`);
    $data.contractTopSymbol.isOpen = false;
    moduleData$e.chartArrowRes = "@drawable/edge_engine_icon_copysetting_down";
}

function refreshSymbolPrice() {
    console.log(`sendSocketData contractTopSymbol.js---\x3e>> refreshSymbolPrice currentSymbol:${symbolData$1.currentSymbol}`);
    let data = getSymbolLinearSwapPeriodKlineWsData(symbolData$1.currentSymbol);
    console.log(`sendSocketData contractTopSymbol.js---\x3e>> refreshSymbolPrice data:${JSON.stringify(data)}`);
    if (null != data && Object.getOwnPropertyNames(data).length > 0) {
        let precision = getPriceTickPrecision(getModelByContractShortType(symbolData$1.currentSymbol));
        console.log(`contractTopSymbol.js---\x3e>> refreshSymbolPrice precision:${precision} data.close:${data.close}`);
        symbolData$1.currentSymbolPrice = formatPriceString(data.close.toString(), precision);
        moduleData$e.symbolPrice = symbolData$1.currentSymbolPrice.replace(/\d(?=(\d{3})+\.)/g, "$&,");
        if (data.close == data.open) {
            moduleData$e.symbolRate = "0.00%";
            moduleData$e.symbolRateColor = "@color/kColorThreeLevelText";
        } else {
            let symbolRate = (data.close - data.open) * 100 / data.open;
            if (symbolRate > 0) {
                moduleData$e.symbolRate = `+${symbolRate.toFixed(2)}%`;
                moduleData$e.symbolRateColor = getUpDownColor();
            } else {
                moduleData$e.symbolRate = `${symbolRate.toFixed(2)}%`;
                moduleData$e.symbolRateColor = getUpDownColor(false);
            }
        }
    } else {
        moduleData$e.symbolPrice = "--";
        moduleData$e.symbolRate = "--";
        moduleData$e.symbolRateColor = "@color/kColorThreeLevelText";
        symbolData$1.currentSymbolPrice = "";
    }
}

function changeTitle() {
    moduleData$e.symbolTitle = symbolDesc(symbolData$1.currentSymbol);
    $data.contractTopSymbol.currentSymbol = symbolData$1.currentSymbol;
}

moduleEvent$e.showDrawer = async function() {
    if (supportSymbolList.length > 0) {
        showDrawer(supportSymbolList, symbolData$1.currentSymbol);
    } else {
        await requestSymbolData();
        if (supportSymbolList.length > 0) {
            showDrawer(supportSymbolList, symbolData$1.currentSymbol);
        }
    }
};

moduleEvent$e.jumpToKline = async function() {
    await openPage("kline", type = "native", params = {
        symbol: symbolData$1.currentSymbol
    });
    await analytics$1("tradingbot_kline_app");
};

moduleEvent$e.expandCollapse = async function() {
    $data.contractTopSymbol.isOpen = !$data.contractTopSymbol.isOpen;
    moduleData$e.chartArrowRes = $data.contractTopSymbol.isOpen ? "@drawable/edge_engine_icon_copysetting_up" : "@drawable/edge_engine_icon_copysetting_down";
    await analytics$1("tradingbot_chart_app");
};

async function requestSymbolData() {
    await sendRequestWithCache("v1/gridstrategy/supported-symbols", callback = drawerDataCallback);
}

function drawerDataCallback(drawerData, isCache) {
    console.log(`requestSymbolData  drawerDataCallback isCache = ${isCache} supportSymbolList.length = ${supportSymbolList.length} drawerData:${JSON.stringify(drawerData)}`);
    if (drawerData && drawerData != "" && drawerData.symbols != null) {
        console.log("requestSymbolData  end drawerData.symbols:" + JSON.stringify(drawerData.symbols));
        supportSymbolList = drawerData.symbols;
    } else {
        console.log("requestSymbolData supportSymbolList = null");
    }
}

moduleEvent$e.changeTitle = changeTitle;

moduleEvent$e.refreshSymbolPrice = refreshSymbolPrice;

async function start$d() {
    addSelectCouponCallBack(couponSelect$1);
}

var lastVolumeProgress = -1;

var seekBarTrackingCount = 0;

function defaultData$d() {
    var data = {
        botTrend: {
            buyItem: {
                title: $i18n.n_contract_grid_buy,
                textColor: "@color/kColorPrimaryText",
                selectVisibility: "visible",
                trendType: "1"
            },
            sellItem: {
                title: $i18n.n_contract_grid_sell,
                textColor: "@color/kColorThreeLevelText",
                selectVisibility: "invisible",
                trendType: "2"
            },
            neutralItem: {
                title: $i18n.n_contract_grid_neutral,
                textColor: "@color/kColorThreeLevelText",
                selectVisibility: "invisible",
                trendType: "0"
            },
            itemSelectedIndex: 0,
            itemSelectedItem: {
                title: $i18n.n_contract_grid_buy,
                trendType: "1",
                trendTypeColor: "",
                trendTypeBorderColor: ""
            },
            bottom: {
                titleDisplay: $i18n.n_contract_grid_create_buy,
                bgColor: "@color/eColorInputFillDisabled",
                titleColor: "@color/kColorThreeLevelText",
                enable: false,
                createVisibility: "visible",
                agreementVisibility: "gone",
                needCheckAgreementStatus: true
            }
        },
        price: {
            minPrice: "",
            minPriceBorderWidth: "0",
            maxPrice: "",
            maxPriceBorderWidth: "0",
            errorMsg: $i18n.n_contract_grid_create_price_remind,
            errorVisibility: "gone",
            aiTitle: $i18n.n_contract_grid_create_AI_param,
            aiImage: "@drawable/edge_engine_trade_bot_ai",
            aiStatus: 0,
            AIParams: {}
        },
        number: {
            gridNum: "",
            gridNumHint: "2-169",
            gridNumMin: "2",
            gridNumMax: "169",
            runType: "0",
            runTypeDisplay: $i18n.n_grid_trade_dengcha,
            singleProfitRateDisplay: "--",
            errorMsg: $i18n.n_contract_grid_create_price_remind,
            errorVisibility: "gone",
            borderWidth: "0"
        },
        volume: {
            volume: "",
            volumeMinHint: ">0",
            volumeLever: "5",
            volumeLeverDisplay: "5X",
            marketPrice: "",
            minRunMargin: 0,
            available: 0,
            availableDisplay: "--",
            liquidationPriceSellTitle: $i18n.n_bot_detail_sell_liquidation_price,
            liquidationPriceSell: "",
            liquidationPriceSellDisplay: "--",
            liquidationSellVisibility: "gone",
            liquidationPriceBuyTitle: $i18n.n_balance_contract_prediction_of_strong_parity,
            liquidationPriceBuy: "",
            liquidationPriceBuyDisplay: "--",
            liquidationBuyVisibility: "visible",
            liquidationPriceErrorMsg: $i18n.n_bot_detail_error_liq_price_warning,
            liquidationPriceErrorVisibility: "gone",
            borderWidth: "0",
            errorMsg: $i18n.n_contract_grid_create_volume_remind,
            errorVisibility: "gone",
            totalVolume: "",
            totalVolumeVisibility: "gone"
        },
        setting: {
            visibility: "visible",
            iconSrc: "@drawable/edge_engine_trade_bot_arrow_up",
            trigger: {
                iconSrc: "@drawable/edge_engine_common_switch_close",
                visibility: "gone",
                triggerPrice: "",
                triggerPriceDisplay: "",
                triggerPriceType: "1",
                triggerPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
                errorMsg: "",
                errorVisibility: "gone",
                borderWidth: "0"
            },
            tpsl: {
                visibility: "gone",
                title: $i18n.n_contract_trade_trend_stop,
                iconSrc: "@drawable/edge_engine_common_switch_close",
                takeProfitPriceTitle: $i18n.n_grid_trade_zhiying,
                takeProfitPrice: "",
                takeProfitPriceDisplay: "",
                takeProfitPriceType: "1",
                takeProfitPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
                takeProfitPriceErrorMsg: "",
                takeProfitPriceErrorVisibility: "gone",
                takeProfitPriceBorderWidth: "0",
                stopLossPriceTitle: $i18n.n_grid_trade_zhisun,
                stopLossPrice: "",
                stopLossPriceDisplay: "",
                stopLossPriceType: "1",
                stopLossPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
                stopLossPriceErrorMsg: "",
                stopLossPriceErrorVisibility: "gone",
                stopLossPriceBorderWidth: "0"
            },
            showBot: {
                visibility: "visible",
                iconSrc: "@drawable/edge_engine_common_switch_open"
            }
        },
        currentTag: "",
        precision: 4
    };
    return data;
}

const {moduleData: moduleData$d, moduleEvent: moduleEvent$d} = moduleDefine("contractEditPage", start$d, defaultData$d);

async function onStart$1() {
    lastVolumeProgress = -1;
    seekBarTrackingCount = 0;
}

async function clearContent() {
    var restoreData = defaultData$d();
    tabClick$1(0);
    moduleData$d.price = restoreData.price;
    moduleData$d.number = restoreData.number;
    moduleData$d.volume = restoreData.volume;
    moduleData$d.setting = restoreData.setting;
    moduleData$d.number = restoreData.number;
    moduleData$d.currentTag = restoreData.currentTag;
    moduleData$d.precision = restoreData.precision;
    await updateAvailable$1();
    checkAllParams$1();
}

function setCopyParams(params) {
    if (params.trendType == "1") {
        tabClick$1(0);
    } else if (params.trendType == "2") {
        tabClick$1(1);
    } else {
        tabClick$1(2);
    }
    moduleData$d.price.minPrice = params.minPrice;
    moduleData$d.price.maxPrice = params.maxPrice;
    moduleData$d.number.gridNum = params.gridNum;
    moduleData$d.number.runType = params.runType;
    if (parseInt(params.runType) == 0) {
        moduleData$d.number.runTypeDisplay = $i18n.n_grid_trade_dengcha;
    } else {
        moduleData$d.number.runTypeDisplay = $i18n.n_grid_trade_dengbi;
    }
    checkAllParams$1();
}

async function tabClick$1(index, analytics = false) {
    $nativeAPI.closeKeyboard();
    console.log(`tabClick = ${index}`);
    var clickIndex = parseInt(index);
    moduleData$d.botTrend.itemSelectedIndex = clickIndex;
    moduleData$d.botTrend.buyItem.textColor = "@color/kColorThreeLevelText";
    moduleData$d.botTrend.buyItem.selectVisibility = "invisible";
    moduleData$d.botTrend.sellItem.textColor = "@color/kColorThreeLevelText";
    moduleData$d.botTrend.sellItem.selectVisibility = "invisible";
    moduleData$d.botTrend.neutralItem.textColor = "@color/kColorThreeLevelText";
    moduleData$d.botTrend.neutralItem.selectVisibility = "invisible";
    switch (clickIndex) {
      case 0:
        moduleData$d.botTrend.buyItem.textColor = "@color/kColorPrimaryText";
        moduleData$d.botTrend.buyItem.selectVisibility = "visible";
        moduleData$d.botTrend.bottom.titleDisplay = $i18n.n_contract_grid_create_buy;
        moduleData$d.botTrend.itemSelectedItem.title = moduleData$d.botTrend.buyItem.title;
        moduleData$d.botTrend.itemSelectedItem.trendType = moduleData$d.botTrend.buyItem.trendType;
        moduleData$d.volume.liquidationBuyVisibility = "visible";
        moduleData$d.volume.liquidationPriceBuyTitle = $i18n.n_balance_contract_prediction_of_strong_parity;
        moduleData$d.volume.liquidationSellVisibility = "gone";
        moduleData$d.setting.tpsl.title = $i18n.n_contract_trade_trend_stop;
        moduleData$d.setting.tpsl.takeProfitPriceTitle = $i18n.n_grid_trade_zhiying;
        moduleData$d.setting.tpsl.stopLossPriceTitle = $i18n.n_grid_trade_zhisun;
        break;

      case 1:
        moduleData$d.botTrend.sellItem.textColor = "@color/kColorPrimaryText";
        moduleData$d.botTrend.sellItem.selectVisibility = "visible";
        moduleData$d.botTrend.bottom.titleDisplay = $i18n.n_contract_grid_create_sell;
        moduleData$d.botTrend.itemSelectedItem.title = moduleData$d.botTrend.sellItem.title;
        moduleData$d.botTrend.itemSelectedItem.trendType = moduleData$d.botTrend.sellItem.trendType;
        moduleData$d.volume.liquidationBuyVisibility = "gone";
        moduleData$d.volume.liquidationSellVisibility = "visible";
        moduleData$d.volume.liquidationPriceSellTitle = $i18n.n_balance_contract_prediction_of_strong_parity;
        moduleData$d.setting.tpsl.title = $i18n.n_contract_trade_trend_stop;
        moduleData$d.setting.tpsl.takeProfitPriceTitle = $i18n.n_grid_trade_zhiying;
        moduleData$d.setting.tpsl.stopLossPriceTitle = $i18n.n_grid_trade_zhisun;
        break;

      case 2:
        moduleData$d.botTrend.neutralItem.textColor = "@color/kColorPrimaryText";
        moduleData$d.botTrend.neutralItem.selectVisibility = "visible";
        moduleData$d.botTrend.bottom.titleDisplay = $i18n.n_contract_grid_create_neutral;
        moduleData$d.botTrend.itemSelectedItem.title = moduleData$d.botTrend.neutralItem.title;
        moduleData$d.botTrend.itemSelectedItem.trendType = moduleData$d.botTrend.neutralItem.trendType;
        moduleData$d.volume.liquidationSellVisibility = "visible";
        moduleData$d.volume.liquidationPriceBuyTitle = $i18n.n_bot_detail_buy_liquidation_price;
        moduleData$d.volume.liquidationBuyVisibility = "visible";
        moduleData$d.volume.liquidationPriceSellTitle = $i18n.n_bot_detail_sell_liquidation_price;
        moduleData$d.setting.tpsl.title = $i18n.n_bot_edit_stop_price;
        moduleData$d.setting.tpsl.takeProfitPriceTitle = $i18n.n_bot_edit_stop_price_max;
        moduleData$d.setting.tpsl.stopLossPriceTitle = $i18n.n_bot_edit_stop_price_min;
        break;
    }
    checkAllParams$1();
    if (analytics) {
        if (clickIndex == 0) {
            await analytics$1("tradingbot_long_app");
        } else if (clickIndex == 1) {
            await analytics$1("tradingbot_short_app");
        } else if (clickIndex == 2) {
            await analytics$1("tradingbot_neutral_app");
        }
    }
}

async function aiClick() {
    console.log(`aiClick`);
    $nativeAPI.closeKeyboard();
    if (moduleData$d.price.aiStatus == 1) {
        setAIStatus(0);
        await analytics$1("tradingbot_clearAIparameter_app");
    } else {
        showLoading(true);
        let data = await sendRequest("v1/gridstrategy/strategy/ai-params", params = {
            symbol: symbolData$1.currentSymbol
        });
        data = handleSpotResponse(data, true);
        showLoading(false);
        if (data != null) {
            setAIParams(data);
        }
        await analytics$1("tradingbot_AIparameter_app");
    }
}

function setAIParams(params) {
    moduleData$d.precision = getPriceTickPrecision(getModelByContractShortType(symbolData$1.currentSymbol));
    moduleData$d.AIParams = params;
    moduleData$d.price.minPrice = params.minPrice;
    moduleData$d.price.maxPrice = params.maxPrice;
    moduleData$d.number.gridNum = String(params.gridNum);
    setAIStatus(1);
}

function setAIStatus(status = 0) {
    moduleData$d.price.aiStatus = status;
    if (status == 0) {
        moduleData$d.price.aiTitle = $i18n.n_contract_grid_create_AI_param;
        moduleData$d.price.aiImage = "@drawable/edge_engine_trade_bot_ai";
        moduleData$d.price.minPrice = "";
        moduleData$d.price.maxPrice = "";
        moduleData$d.number.gridNum = "";
        moduleData$d.volume.volume = "";
        moduleData$d.volume.volumeMinHint = ">0";
    } else {
        moduleData$d.price.aiTitle = $i18n.n_contract_grid_clear_AI_param;
        moduleData$d.price.aiImage = "@drawable/edge_engine_trade_bot_clean";
    }
}

function checkAIStatus() {
    if (moduleData$d.price.minPrice.length == 0 && moduleData$d.price.maxPrice.length == 0 && moduleData$d.number.gridNum.length == 0) {
        setAIStatus(0);
    }
}

async function agreementClick() {
    await openURL("holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/edgeengine/container?scene=tradingBot&rootName=botServiceAgreement&xml=bot_service_agreement&navConfig=native");
}

async function checkAgreementStatus() {
    if (moduleData$d.botTrend.bottom.needCheckAgreementStatus == false) {
        return;
    }
    let data = await sendRequest("v1/gridstrategy/strategy/get-agreement-status");
    data = handleSpotResponse(data, false);
    if (data != null && parseBoolean(data) == false) {
        moduleData$d.botTrend.bottom.createVisibility = "gone";
        moduleData$d.botTrend.bottom.agreementVisibility = "visible";
    } else {
        if (data != null && parseBoolean(data) == true) {
            moduleData$d.botTrend.bottom.needCheckAgreementStatus = false;
        }
        moduleData$d.botTrend.bottom.createVisibility = "visible";
        moduleData$d.botTrend.bottom.agreementVisibility = "gone";
    }
}

function remindClick$4(type) {
    $nativeAPI.closeKeyboard();
    console.log(`remindClick type = ${type}`);
    switch (type) {
      case "price":
        popUpContentOfOneButton($i18n.n_trade_bot_title_price_range, $i18n.n_trade_bot_desc_price_range);
        break;

      case "number":
        popUpContentOfOneButton($i18n.n_trade_bot_title_number_of_grids, $i18n.n_trade_bot_desc_number_of_grids);
        break;

      case "profit":
        popUpContentOfOneButton($i18n.n_trade_bot_title_profit_grid, $i18n.n_trade_bot_desc_profit_grid_new);
        break;

      case "volume":
        popUpContentOfOneButton($i18n.n_trade_bot_title_investment, $i18n.n_trade_bot_desc_investment);
        break;

      case "liquidation_buy":
        popUpContentOfOneButton($i18n.n_trade_bot_title_liq_price_buy, $i18n.n_trade_bot_desc_liq_price_buy);
        break;

      case "liquidation_sell":
        popUpContentOfOneButton($i18n.n_trade_bot_title_liq_price_sell, $i18n.n_trade_bot_desc_liq_price_sell);
        break;

      case "trigger":
        popUpContentOfOneButton($i18n.n_trade_bot_title_trigger_price, $i18n.n_trade_bot_desc_trigger_price);
        break;

      case "tpsl":
        if (moduleData$d.botTrend.itemSelectedItem.trendType == "1" || moduleData$d.botTrend.itemSelectedItem.trendType == "2") {
            popUpContentOfOneButton($i18n.n_trade_bot_title_profit_or_loss, $i18n.n_trade_bot_desc_profit_or_loss);
        } else {
            popUpContentOfOneButton($i18n.n_bot_edit_stop_price, $i18n.n_trade_bot_desc_stop_bottom_price);
        }
        break;

      case "showBot":
        popUpContentOfOneButton($i18n.n_contract_grid_create_show_in_ranking, $i18n.n_trade_bot_desc_show_in_ranking);
        break;

      case "coupon":
        popUpTwoContentOfOneButton($i18n.n_coupon_used_rules, $i18n.n_bot_detail_coupon_use_rules_desc, $i18n.n_bot_detail_coupon_use_rules_desc3);
        break;
    }
}

function runTypeClick() {
    $nativeAPI.closeKeyboard();
    console.log(`runTypeClick`);
    showOptionPop$1("runType");
}

function setMinMaxGridNum(minGridNum, maxGridNum) {
    moduleData$d.number.gridNumMin = minGridNum;
    moduleData$d.number.gridNumMax = maxGridNum;
    moduleData$d.number.gridNumHint = minGridNum + "-" + maxGridNum;
    checkAllParams$1();
}

async function changeLever(lever) {
    moduleData$d.volume.volumeLever = lever;
    moduleData$d.volume.volumeLeverDisplay = lever + "X";
    checkAllParams$1();
}

async function volumeLeverClick() {
    console.log(`volumeLeverClick`);
    $nativeAPI.closeKeyboard();
    var params = {};
    params.contractCode = symbolData$1.currentSymbol;
    params.lever = moduleData$d.volume.volumeLever;
    params.callBackName = "contractEditPage.changeLever";
    await changeLeverDialog(params);
}

function availableClick() {
    console.log(`availableClick`);
    $nativeAPI.closeKeyboard();
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/balance/transfer?coin=USDT&account=11`);
}

function volumeChange(volumePercent) {
    console.log(`volumeChange volumePercent = ${volumePercent} lastVolumeProgress = ${lastVolumeProgress} seekBarTrackingCount= ${seekBarTrackingCount}`);
    if (lastVolumeProgress == volumePercent) return;
    lastVolumeProgress = volumePercent;
    seekBarTrackingCount++;
    moduleData$d.volume.volume = formatDecimal(moduleData$d.volume.available * parseFloat(volumePercent) / 100, 4, false);
    refreshTotalInvest$1();
    setTimeout((() => {
        seekBarTrackingCount--;
        console.log(`volumeChange 触发setTimeout seekBarTrackingCount= ${seekBarTrackingCount}`);
        if (seekBarTrackingCount <= 0) {
            checkAllParams$1();
        }
    }), 50);
}

async function couponClick$1() {
    console.log(`couponClick`);
    popUpContentOfCoupon();
}

async function refreshTotalInvest$1() {
    let total = 0;
    if (isInvalidString(moduleData$d.volume.volume) || isNaN(parseFloat(moduleData$d.volume.volume))) {
        total = totalCouponCount;
    } else {
        total = parseFloat(moduleData$d.volume.volume) + totalCouponCount;
    }
    moduleData$d.volume.totalVolume = $i18n.$intercept.n_bot_detail_total_investment_tips(`${total}`);
    moduleData$d.volume.totalVolumeVisibility = total > 0 ? "visible" : "gone";
}

async function couponSelect$1() {
    console.log(`contractEditPage.js couponSelect`);
    checkAllParams$1();
}

async function settingClick() {
    console.log(`settingClick`);
    if (moduleData$d.setting.visibility == "visible") {
        moduleData$d.setting.visibility = "gone";
        moduleData$d.setting.iconSrc = "@drawable/edge_engine_trade_bot_arrow_down";
        $nativeAPI.closeKeyboard();
    } else {
        moduleData$d.setting.visibility = "visible";
        moduleData$d.setting.iconSrc = "@drawable/edge_engine_trade_bot_arrow_up";
    }
    await analytics$1("tradingbot_advance_app");
}

async function triggerClick() {
    console.log(`triggerClick`);
    if (moduleData$d.setting.trigger.visibility == "visible") {
        moduleData$d.setting.trigger.visibility = "gone";
        moduleData$d.setting.trigger.iconSrc = "@drawable/edge_engine_common_switch_close";
        $nativeAPI.closeKeyboard();
    } else {
        moduleData$d.setting.trigger.visibility = "visible";
        moduleData$d.setting.trigger.iconSrc = "@drawable/edge_engine_common_switch_open";
    }
    checkAllParams$1();
    await analytics$1("tradingbot_triggerprice_app");
}

async function tpslClick() {
    console.log(`tpslClick`);
    if (moduleData$d.setting.tpsl.visibility == "visible") {
        moduleData$d.setting.tpsl.visibility = "gone";
        moduleData$d.setting.tpsl.iconSrc = "@drawable/edge_engine_common_switch_close";
    } else {
        moduleData$d.setting.tpsl.visibility = "visible";
        moduleData$d.setting.tpsl.iconSrc = "@drawable/edge_engine_common_switch_open";
    }
    await analytics$1("tradingbot_profitandloss_app");
}

async function showBotClick$1() {
    console.log(`showBotClick`);
    if (moduleData$d.setting.showBot.visibility == "visible") {
        moduleData$d.setting.showBot.visibility = "gone";
        moduleData$d.setting.showBot.iconSrc = "@drawable/edge_engine_common_switch_close";
    } else {
        moduleData$d.setting.showBot.visibility = "visible";
        moduleData$d.setting.showBot.iconSrc = "@drawable/edge_engine_common_switch_open";
    }
    await analytics$1("tradingbot_showbots_app");
}

function showOptionPop$1(type) {
    console.log(`showOptionPop = ${type}`);
    $nativeAPI.closeKeyboard();
    switch (type) {
      case "runType":
        showOptionPop$3(type, moduleData$d.number.runType, 1, optionClick$1);
        break;

      case "triggerPrice":
        showOptionPop$3(type, moduleData$d.setting.trigger.triggerPriceType, 2, optionClick$1);
        break;

      case "takeProfitPrice":
        showOptionPop$3(type, moduleData$d.setting.tpsl.takeProfitPriceType, 2, optionClick$1);
        break;

      case "stopLossPrice":
        showOptionPop$3(type, moduleData$d.setting.tpsl.stopLossPriceType, 2, optionClick$1);
        break;
    }
}

function optionClick$1(popType, element) {
    switch (popType) {
      case "runType":
        moduleData$d.number.runType = element.param;
        moduleData$d.number.runTypeDisplay = element.titleDisplay;
        checkAllParams$1();
        break;

      case "triggerPrice":
        moduleData$d.setting.trigger.triggerPriceType = element.param;
        moduleData$d.setting.trigger.triggerPriceTypeDisplay = element.titleDisplay;
        break;

      case "takeProfitPrice":
        moduleData$d.setting.tpsl.takeProfitPriceType = element.param;
        moduleData$d.setting.tpsl.takeProfitPriceTypeDisplay = element.titleDisplay;
        break;

      case "stopLossPrice":
        moduleData$d.setting.tpsl.stopLossPriceType = element.param;
        moduleData$d.setting.tpsl.stopLossPriceTypeDisplay = element.titleDisplay;
        break;
    }
}

function onTextChange$1(type, text) {
    console.log(`onTextChange type = ${type}, text = ${text}`);
    if (seekBarTrackingCount <= 0) {
        checkAllParams$1();
    }
    switch (type) {
      case "minPrice":
        checkAIStatus();
        break;

      case "maxPrice":
        checkAIStatus();
        break;

      case "number":
        checkAIStatus();
        break;
    }
}

function onFocusChange$1(type, hasFocus) {
    console.log(`onFocusChange type = ${type}, hasFocus = ${hasFocus}`);
    moduleData$d.precision = getPriceTickPrecision(getModelByContractShortType(symbolData$1.currentSymbol));
    switch (type) {
      case "minPrice":
        if (hasFocus == true) ; else {
            if (parseFloat(moduleData$d.price.minPrice) == 0) {
                moduleData$d.price.minPrice = createDecimalStrWithDigits(moduleData$d.precision);
            }
        }
        break;

      case "maxPrice":
        if (hasFocus == true) ; else {
            if (parseFloat(moduleData$d.price.maxPrice) == 0) {
                moduleData$d.price.maxPrice = createDecimalStrWithDigits(moduleData$d.precision);
            }
        }
        break;
    }
}

function createDecimalStrWithDigits(numDigits) {
    let zeros = "0".repeat(numDigits - 1);
    return "0." + zeros + "1";
}

function createClick() {
    $nativeAPI.closeKeyboard();
    checkAllParams$1();
    checkEmpty(true);
    if (moduleData$d.botTrend.bottom.enable == false) {
        return;
    }
    var params = {};
    params.symbol = symbolData$1.currentSymbol;
    params.minPrice = moduleData$d.price.minPrice;
    params.maxPrice = moduleData$d.price.maxPrice;
    params.trendType = moduleData$d.botTrend.itemSelectedItem.trendType;
    params.runType = moduleData$d.number.runType;
    params.gridNum = moduleData$d.number.gridNum;
    params.singleProfitRateDisplay = moduleData$d.number.singleProfitRateDisplay;
    params.lever = moduleData$d.volume.volumeLever;
    params.volume = formatDecimal(parseFloatOrDefault(moduleData$d.volume.volume), 4, false);
    params.couponVolume = totalCouponCount;
    params.totalVolume = parseFloatOrDefault(moduleData$d.volume.volume) + parseFloat(totalCouponCount);
    params.coupons = getExperienceParams();
    params.marketPrice = moduleData$d.volume.marketPrice;
    params.minRunMargin = moduleData$d.volume.minRunMargin;
    params.liquidationPriceBuyDisplay = moduleData$d.volume.liquidationBuyVisibility == "visible" ? moduleData$d.volume.liquidationPriceBuyDisplay : "--";
    params.liquidationPriceSellDisplay = moduleData$d.volume.liquidationSellVisibility == "visible" ? moduleData$d.volume.liquidationPriceSellDisplay : "--";
    params.triggerPrice = moduleData$d.setting.trigger.visibility == "visible" ? moduleData$d.setting.trigger.triggerPrice : "";
    params.triggerPriceType = moduleData$d.setting.trigger.triggerPriceType;
    params.takeProfitPrice = moduleData$d.setting.tpsl.visibility == "visible" ? moduleData$d.setting.tpsl.takeProfitPrice : "";
    params.takeProfitPriceType = moduleData$d.setting.tpsl.takeProfitPriceType;
    params.stopLossPrice = moduleData$d.setting.tpsl.visibility == "visible" ? moduleData$d.setting.tpsl.stopLossPrice : "";
    params.stopLossPriceType = moduleData$d.setting.tpsl.stopLossPriceType;
    params.showBot = moduleData$d.setting.showBot.visibility == "visible" ? true : false;
    params.warningMsg = moduleData$d.volume.liquidationPriceErrorMsg;
    console.log(`moduleData minRunMargin == ${moduleData$d.volume.minRunMargin} marketPrice == ${moduleData$d.volume.marketPrice}`);
    console.log(`params minRunMargin == ${params.minRunMargin} marketPrice == ${params.marketPrice}`);
    createBotWithParams(params, 0, closePage);
}

async function updateAvailable$1() {
    moduleData$d.volume.available = commonData.available;
    moduleData$d.volume.availableDisplay = formatDecimal(commonData.available) + " USDT";
    checkAllParams$1();
}

function checkEmpty(showError = false) {
    var paramEmpty = false;
    if (moduleData$d.price.minPrice.length == 0) {
        paramEmpty = true;
        if (showError == true) {
            moduleData$d.price.errorVisibility = "visible";
            moduleData$d.price.errorMsg = $i18n.n_bot_detail_error_empty_min_price;
            moduleData$d.price.minPriceBorderWidth = "1";
        }
    } else if (moduleData$d.price.maxPrice.length == 0) {
        paramEmpty = true;
        if (showError == true) {
            moduleData$d.price.errorVisibility = "visible";
            moduleData$d.price.errorMsg = $i18n.n_bot_detail_error_empty_max_price;
            moduleData$d.price.maxPriceBorderWidth = "1";
        }
    }
    if (moduleData$d.number.gridNum.length == 0) {
        paramEmpty = true;
        if (showError == true) {
            moduleData$d.number.errorMsg = $i18n.n_bot_detail_error_empty_grid_number;
            moduleData$d.number.errorVisibility = "visible";
            moduleData$d.number.borderWidth = "1";
        }
    }
    let ret = new Big(moduleData$d.volume.minRunMargin).minus(totalCouponCount);
    if (ret.cmp(0) <= 0) ; else {
        if (moduleData$d.volume.volume.length == 0) {
            paramEmpty = true;
            if (showError == true) {
                moduleData$d.volume.errorMsg = $i18n.n_bot_detail_error_empty_volume;
                moduleData$d.volume.errorVisibility = "visible";
                moduleData$d.volume.borderWidth = "1";
            }
        }
    }
    return paramEmpty;
}

function checkAllParams$1() {
    refreshTotalInvest$1();
    var paramEmpty = checkEmpty(false);
    var profitRateError = calculateSingleProfitRate();
    var volumeError = checkVolume();
    var triggerPriceError = checkTriggerPrice$1();
    var tpslPriceError = checkTpslPrice$1();
    console.log(`checkAllParams checkVolume paramEmpty = ${paramEmpty}, volumeError = ${volumeError}, triggerPriceError = ${triggerPriceError}`);
    new Big(moduleData$d.volume.minRunMargin).minus(totalCouponCount);
    if (!paramEmpty && !profitRateError && !volumeError && !triggerPriceError && !tpslPriceError) {
        moduleData$d.botTrend.bottom.bgColor = "@color/kColorMajorTheme100";
        moduleData$d.botTrend.bottom.titleColor = "@color/KBaseTextColor";
        moduleData$d.botTrend.bottom.enable = true;
    } else {
        moduleData$d.botTrend.bottom.bgColor = "@color/eColorInputFillDisabled";
        moduleData$d.botTrend.bottom.titleColor = "@color/kColorThreeLevelText";
        moduleData$d.botTrend.bottom.enable = false;
    }
    invalidateGridPrice(moduleData$d.price.minPrice, moduleData$d.price.maxPrice, moduleData$d.number.gridNum, symbolData$1.currentSymbol);
}

function calculateInvestmentAmount() {
    moduleData$d.volume.marketPrice = symbolData$1.currentSymbolPrice;
    moduleData$d.volume.minRunMargin = calculateMinInvestmentAmount(moduleData$d.price.minPrice, moduleData$d.price.maxPrice, moduleData$d.number.gridNum, moduleData$d.volume.volumeLever, moduleData$d.number.runType, moduleData$d.botTrend.itemSelectedItem.trendType, symbolData$1.currentSymbol, getCalculatePrice());
    if (moduleData$d.volume.minRunMargin > 0) {
        let ret = new Big(moduleData$d.volume.minRunMargin).minus(totalCouponCount);
        moduleData$d.volume.volumeMinHint = `≥${ret.cmp(0) > 0 ? ret.toString() : 0}`;
    } else {
        moduleData$d.volume.volumeMinHint = ">0";
    }
    console.log(`calculateInvestmentAmount minRunMargin == ${moduleData$d.volume.minRunMargin} marketPrice == ${moduleData$d.volume.marketPrice}`);
}

function getCalculatePrice() {
    return moduleData$d.setting.trigger.visibility == "visible" && notNull(moduleData$d.setting.trigger.triggerPrice) ? moduleData$d.setting.trigger.triggerPrice : symbolData$1.currentSymbolPrice;
}

function checkVolume() {
    var volumeError = false;
    calculateInvestmentAmount();
    let ret = new Big(moduleData$d.volume.minRunMargin).minus(totalCouponCount);
    if (notNull(moduleData$d.volume.volume) || ret.cmp(0) <= 0) {
        console.log(`checkVolume volume = ${moduleData$d.volume.volume}, available = ${moduleData$d.volume.available}, minRunMargin = ${moduleData$d.volume.minRunMargin}`);
        if (parseFloatOrDefault(moduleData$d.volume.volume) > moduleData$d.volume.available && moduleData$d.volume.availableDisplay != "--") {
            var errorMsg = $i18n.n_bot_detail_error_exceed_available;
            moduleData$d.volume.errorMsg = errorMsg;
            moduleData$d.volume.errorVisibility = "visible";
            moduleData$d.volume.borderWidth = "1";
            if (moduleData$d.volume.minRunMargin > 0) {
                calculateUnopenedLiquidationPrice();
            } else {
                resetLiquidationPrice();
            }
            volumeError = true;
        } else if (moduleData$d.volume.minRunMargin > 0) {
            let ret = new Big(moduleData$d.volume.minRunMargin).minus(totalCouponCount);
            let userMinInvest = Number(ret.cmp(0) > 0 ? ret.toString() : "0");
            console.log(`checkVolume volume = ${moduleData$d.volume.volume}, available = ${moduleData$d.volume.available}, userMinInvest = ${userMinInvest}`);
            if (userMinInvest > moduleData$d.volume.available && moduleData$d.volume.availableDisplay != "--") {
                var errorMsg = $i18n.$intercept.n_bot_detail_error_available_insufficient_new(`${userMinInvest}`);
                moduleData$d.volume.errorMsg = errorMsg;
                moduleData$d.volume.errorVisibility = "visible";
                moduleData$d.volume.borderWidth = "1";
                resetLiquidationPrice();
                volumeError = true;
            } else if (userMinInvest > parseFloatOrDefault(moduleData$d.volume.volume)) {
                var errorMsg = $i18n.$intercept.n_bot_detail_error_amount_great_then(`${userMinInvest} USDT`);
                moduleData$d.volume.errorMsg = errorMsg;
                moduleData$d.volume.errorVisibility = "visible";
                moduleData$d.volume.borderWidth = "1";
                resetLiquidationPrice();
                volumeError = true;
            } else {
                moduleData$d.volume.errorVisibility = "gone";
                moduleData$d.volume.borderWidth = "0";
                calculateUnopenedLiquidationPrice();
            }
        } else {
            resetLiquidationPrice();
            moduleData$d.volume.errorVisibility = "gone";
            moduleData$d.volume.borderWidth = "0";
        }
    } else {
        resetLiquidationPrice();
        moduleData$d.volume.errorVisibility = "gone";
        moduleData$d.volume.borderWidth = "0";
    }
    return volumeError;
}

function checkTriggerPrice$1() {
    var triggerPriceError = false;
    if (notNull(moduleData$d.setting.trigger.triggerPrice)) {
        if (moduleData$d.price.minPrice.length == 0 || moduleData$d.price.maxPrice.length == 0) {
            moduleData$d.setting.trigger.errorMsg = $i18n.n_bot_detail_error_min_and_max_empty;
            moduleData$d.setting.trigger.errorVisibility = "visible";
            moduleData$d.setting.trigger.borderWidth = "1";
            triggerPriceError = true;
        } else {
            if (parseFloat(moduleData$d.setting.trigger.triggerPrice) <= 0) {
                moduleData$d.setting.trigger.errorMsg = $i18n.n_bot_detail_error_trigger_price_gt_zero;
                moduleData$d.setting.trigger.errorVisibility = "visible";
                moduleData$d.setting.trigger.borderWidth = "1";
                triggerPriceError = true;
            } else {
                moduleData$d.setting.trigger.errorVisibility = "gone";
                moduleData$d.setting.trigger.borderWidth = "0";
            }
        }
    } else {
        moduleData$d.setting.trigger.errorVisibility = "gone";
        moduleData$d.setting.trigger.borderWidth = "0";
    }
    return triggerPriceError;
}

function checkTpslPrice$1() {
    var tpslPriceError = false;
    if (moduleData$d.botTrend.itemSelectedItem.trendType == "1") {
        if (notNull(moduleData$d.setting.tpsl.takeProfitPrice)) {
            if (moduleData$d.price.minPrice.length == 0 || moduleData$d.price.maxPrice.length == 0) {
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_min_and_max_empty;
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.takeProfitPrice) <= parseFloat(symbolData$1.currentSymbolPrice)) {
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_profit_great_then_last_price;
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.takeProfitPrice) <= parseFloat(moduleData$d.price.maxPrice)) {
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_profit_great_then_max_price;
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
            moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$d.setting.tpsl.stopLossPrice)) {
            if (moduleData$d.price.minPrice.length == 0 || moduleData$d.price.maxPrice.length == 0) {
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_min_and_max_empty;
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.stopLossPrice) >= parseFloat(symbolData$1.currentSymbolPrice)) {
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_loss_less_then_last_price;
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.stopLossPrice) >= parseFloat(moduleData$d.price.minPrice)) {
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_loss_less_then_min_price;
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "gone";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "gone";
            moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "0";
        }
    } else if (moduleData$d.botTrend.itemSelectedItem.trendType == "2") {
        if (notNull(moduleData$d.setting.tpsl.takeProfitPrice)) {
            if (moduleData$d.price.minPrice.length == 0 || moduleData$d.price.maxPrice.length == 0) {
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_min_and_max_empty;
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.takeProfitPrice) >= parseFloat(symbolData$1.currentSymbolPrice)) {
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_profit_less_then_last_price;
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.takeProfitPrice) >= parseFloat(moduleData$d.price.minPrice)) {
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_profit_less_then_min_price;
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
            moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$d.setting.tpsl.stopLossPrice)) {
            if (moduleData$d.price.minPrice.length == 0 || moduleData$d.price.maxPrice.length == 0) {
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_min_and_max_empty;
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.stopLossPrice) <= parseFloat(symbolData$1.currentSymbolPrice)) {
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_loss_great_then_last_price;
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.stopLossPrice) <= parseFloat(moduleData$d.price.maxPrice)) {
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_loss_great_then_max_price;
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "gone";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "gone";
            moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "0";
        }
    } else {
        if (notNull(moduleData$d.setting.tpsl.takeProfitPrice)) {
            if (moduleData$d.price.minPrice.length == 0 || moduleData$d.price.maxPrice.length == 0) {
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_min_and_max_empty;
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.takeProfitPrice) <= parseFloat(moduleData$d.price.maxPrice)) {
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_stop_top_great_then_max_price;
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.takeProfitPrice) <= parseFloat(symbolData$1.currentSymbolPrice) || notNull(moduleData$d.setting.trigger.triggerPrice) && parseFloat(moduleData$d.setting.tpsl.takeProfitPrice) <= parseFloat(moduleData$d.setting.trigger.triggerPrice)) {
                var maxPrice = parseFloat(symbolData$1.currentSymbolPrice);
                if (notNull(moduleData$d.setting.trigger.triggerPrice) && maxPrice < parseFloat(moduleData$d.setting.trigger.triggerPrice)) {
                    maxPrice = parseFloat(moduleData$d.setting.trigger.triggerPrice);
                }
                moduleData$d.setting.tpsl.takeProfitPriceErrorMsg = $i18n.$intercept.n_bot_detail_error_stop_top_price_great_then(`${maxPrice} USDT`);
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
                moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$d.setting.tpsl.takeProfitPriceErrorVisibility = "gone";
            moduleData$d.setting.tpsl.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$d.setting.tpsl.stopLossPrice)) {
            if (moduleData$d.price.minPrice.length == 0 || moduleData$d.price.maxPrice.length == 0) {
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_min_and_max_empty;
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.stopLossPrice) >= parseFloat(moduleData$d.price.minPrice)) {
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_stop_bottom_less_then_min_price;
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$d.setting.tpsl.stopLossPrice) >= parseFloat(symbolData$1.currentSymbolPrice) || notNull(moduleData$d.setting.trigger.triggerPrice) && parseFloat(moduleData$d.setting.tpsl.stopLossPrice) >= parseFloat(moduleData$d.setting.trigger.triggerPrice)) {
                var minPrice = parseFloat(symbolData$1.currentSymbolPrice);
                if (notNull(moduleData$d.setting.trigger.triggerPrice) && minPrice > parseFloat(moduleData$d.setting.trigger.triggerPrice)) {
                    minPrice = parseFloat(moduleData$d.setting.trigger.triggerPrice);
                }
                moduleData$d.setting.tpsl.stopLossPriceErrorMsg = $i18n.$intercept.n_bot_detail_error_stop_bottom_price_less_then(`${minPrice} USDT`);
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "visible";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "gone";
                moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$d.setting.tpsl.stopLossPriceErrorVisibility = "gone";
            moduleData$d.setting.tpsl.stopLossPriceBorderWidth = "0";
        }
    }
    return tpslPriceError;
}

function calculateSingleProfitRate() {
    var profitRateError = false;
    let singleProfitRate = calculateSingleProfitRate$1(moduleData$d.price.minPrice, moduleData$d.price.maxPrice, moduleData$d.number.gridNum, moduleData$d.number.runType, symbolData$1.currentSymbol);
    if (notNull(singleProfitRate.priceErrorTip)) {
        moduleData$d.price.errorMsg = singleProfitRate.priceErrorTip;
        moduleData$d.price.errorVisibility = "visible";
        moduleData$d.price.maxPriceBorderWidth = "1";
        moduleData$d.price.minPriceBorderWidth = "1";
        profitRateError = true;
    } else {
        moduleData$d.price.errorVisibility = "gone";
        moduleData$d.price.maxPriceBorderWidth = "0";
        moduleData$d.price.minPriceBorderWidth = "0";
    }
    if (notNull(singleProfitRate.gridErrorTip) && notNull(moduleData$d.number.gridNum)) {
        moduleData$d.number.errorMsg = singleProfitRate.gridErrorTip;
        moduleData$d.number.errorVisibility = "visible";
        moduleData$d.number.borderWidth = "1";
        profitRateError = true;
    } else {
        moduleData$d.number.errorVisibility = "gone";
        moduleData$d.number.borderWidth = "0";
    }
    moduleData$d.number.singleProfitRateDisplay = singleProfitRate.singleProfitRateDisplay;
    return profitRateError;
}

function calculateUnopenedLiquidationPrice() {
    let liquidationPrice = calculateUnopenedLiquidationPrice$2(moduleData$d.price.minPrice, moduleData$d.price.maxPrice, moduleData$d.number.gridNum, moduleData$d.volume.minRunMargin, parseFloatOrDefault(moduleData$d.volume.volume) + parseFloat(totalCouponCount), moduleData$d.volume.volumeLever, moduleData$d.number.runType, moduleData$d.botTrend.itemSelectedItem.trendType, symbolData$1.currentSymbol, getCalculatePrice());
    var buyInRange = false;
    var sellInRange = false;
    if (parseFloat(liquidationPrice.buyLiquidationPrice) > 0) {
        moduleData$d.volume.liquidationPriceBuy = liquidationPrice.buyLiquidationPrice;
        moduleData$d.volume.liquidationPriceBuyDisplay = `${thousandsFormatter(moduleData$d.volume.liquidationPriceBuy)} USDT`;
        if (parseFloat(liquidationPrice.buyLiquidationPrice) > parseFloat(moduleData$d.price.minPrice) && parseFloat(liquidationPrice.buyLiquidationPrice) < parseFloat(moduleData$d.price.maxPrice)) {
            buyInRange = true;
        }
    } else {
        moduleData$d.volume.liquidationPriceBuy = "";
        moduleData$d.volume.liquidationPriceBuyDisplay = "--";
    }
    if (parseFloat(liquidationPrice.sellLiquidationPrice) > 0) {
        moduleData$d.volume.liquidationPriceSell = liquidationPrice.sellLiquidationPrice;
        moduleData$d.volume.liquidationPriceSellDisplay = `${thousandsFormatter(moduleData$d.volume.liquidationPriceSell)} USDT`;
        if (parseFloat(liquidationPrice.sellLiquidationPrice) > parseFloat(moduleData$d.price.minPrice) && parseFloat(liquidationPrice.sellLiquidationPrice) < parseFloat(moduleData$d.price.maxPrice)) {
            sellInRange = true;
        }
    } else {
        moduleData$d.volume.liquidationPriceSell = "";
        moduleData$d.volume.liquidationPriceSellDisplay = "--";
    }
    if (parseInt(moduleData$d.botTrend.itemSelectedItem.trendType) == 0) {
        if (buyInRange == true && sellInRange == true) {
            moduleData$d.volume.liquidationPriceErrorMsg = $i18n.n_bot_edit_liquidation_warning;
            moduleData$d.volume.liquidationPriceErrorVisibility = "visible";
        } else if (buyInRange == true) {
            moduleData$d.volume.liquidationPriceErrorMsg = $i18n.n_bot_edit_liquidation_warning_buy;
            moduleData$d.volume.liquidationPriceErrorVisibility = "visible";
        } else if (sellInRange == true) {
            moduleData$d.volume.liquidationPriceErrorMsg = $i18n.n_bot_edit_liquidation_warning_sell;
            moduleData$d.volume.liquidationPriceErrorVisibility = "visible";
        } else {
            moduleData$d.volume.liquidationPriceErrorMsg = "";
            moduleData$d.volume.liquidationPriceErrorVisibility = "gone";
        }
    } else {
        if (buyInRange == true || sellInRange == true) {
            moduleData$d.volume.liquidationPriceErrorMsg = $i18n.n_bot_edit_liquidation_warning;
            moduleData$d.volume.liquidationPriceErrorVisibility = "visible";
        } else {
            moduleData$d.volume.liquidationPriceErrorMsg = "";
            moduleData$d.volume.liquidationPriceErrorVisibility = "gone";
        }
    }
}

function resetLiquidationPrice() {
    moduleData$d.volume.liquidationPriceBuy = "";
    moduleData$d.volume.liquidationPriceBuyDisplay = "--";
    moduleData$d.volume.liquidationPriceSell = "";
    moduleData$d.volume.liquidationPriceSellDisplay = "--";
    moduleData$d.volume.liquidationPriceErrorMsg = "";
    moduleData$d.volume.liquidationPriceErrorVisibility = "gone";
}

function closePage() {
    if (parseInt(commonData.OS) == 0) {
        iOSCannotGoBackCurrentPage();
    } else {
        $nativeAPI.containerBack();
    }
}

moduleEvent$d.tabClick = tabClick$1;

moduleEvent$d.aiClick = aiClick;

moduleEvent$d.remindClick = remindClick$4;

moduleEvent$d.runTypeClick = runTypeClick;

moduleEvent$d.changeLever = changeLever;

moduleEvent$d.volumeLeverClick = volumeLeverClick;

moduleEvent$d.availableClick = availableClick;

moduleEvent$d.volumeChange = volumeChange;

moduleEvent$d.settingClick = settingClick;

moduleEvent$d.triggerClick = triggerClick;

moduleEvent$d.tpslClick = tpslClick;

moduleEvent$d.showBotClick = showBotClick$1;

moduleEvent$d.showOptionPop = showOptionPop$1;

moduleEvent$d.optionClick = optionClick$1;

moduleEvent$d.onTextChange = onTextChange$1;

moduleEvent$d.onFocusChange = onFocusChange$1;

moduleEvent$d.createClick = createClick;

moduleEvent$d.agreementClick = agreementClick;

moduleEvent$d.couponClick = couponClick$1;

var timerObject$1;

var currentIndex = 0;

async function start$c() {}

function defaultData$c() {
    var data = {
        selectTab: {
            background: "@color/KBaseColorContentBackground",
            textColor: "@color/kColorPrimaryText"
        },
        normalTab: {
            background: "@color/KBaseColorDeepestBackground",
            textColor: "@color/kColorThreeLevelText"
        },
        isLoading: true
    };
    data.tab0 = data.selectTab;
    data.tab1 = data.normalTab;
    return data;
}

const {moduleData: moduleData$c, moduleEvent: moduleEvent$c} = moduleDefine("contractGridPage", start$c, defaultData$c);

moduleEvent$c.onCreate = async function() {
    await analytics$1("tradingbot_pageview_app_futures");
};

moduleEvent$c.onStart = async function() {
    onStart$2();
    onStart$1();
    onStart$3();
    startTimer$1();
};

moduleEvent$c.onResume = async function() {
    subPriceWebSocket("linearSwapPeriodKlineWs", {
        symbol: symbolData$1.currentSymbol,
        period: "1day"
    });
    subPriceWebSocket("linearSwapWs");
};

moduleEvent$c.onPause = async function() {
    unsubPriceWebSocket("linearSwapPeriodKlineWs", {
        symbol: symbolData$1.currentSymbol,
        period: "1day"
    });
    unsubPriceWebSocket("linearSwapWs");
};

moduleEvent$c.onStop = async function() {
    onStop();
    clearTimer$1();
};

moduleEvent$c.onGridPullRefresh = async function() {
    requestRecommendList$1();
    resetLoadServerCouponData();
    moduleEvent$c.onStart();
};

function startTimer$1() {
    clearTimer$1();
    timerObject$1 = setInterval(timerCallback$1, 5e3);
    timerCallback$1();
}

function clearTimer$1() {
    if (timerObject$1 != null) {
        clearInterval(timerObject$1);
        timerObject$1 = null;
    }
}

async function timerCallback$1() {
    requestContractInfoData();
    requestCommonConfig();
    updateAvailable();
    checkAgreementStatus();
    requestCoupon(false);
}

async function updateAvailable() {
    let accountInfo = await getAccountInfo();
    if (accountInfo != null && accountInfo.length > 0) {
        updateAvailable$1();
        setCrossAccountInfo(accountInfo[0]);
    }
}

moduleEvent$c.setPageParams = async function(params) {
    setPageParams$1(params);
    if (parseInt(params.tabIndex) >= 0 && parseInt(params.tabIndex) <= 1) {
        tabClicked$1(parseInt(params.tabIndex));
    }
    if (!isInvalidString(params.symbol)) {
        onSymbolChange$1(params.symbol);
        if (!isInvalidString(params.minPrice) && !isInvalidString(params.maxPrice) && !isInvalidString(params.gridNum)) {
            tabClicked$1(1);
            setCopyParams(params);
        }
    } else {
        let savedSymbol = await read("tradingBot", "currentContractGridSymbol");
        if (isInvalidString(savedSymbol)) {
            symbolData$1.currentSymbol = "BTC-USDT";
        } else {
            symbolData$1.currentSymbol = savedSymbol;
        }
        onCreate$1();
        tradeFilterSymbolChange(symbolData$1.currentSymbol);
    }
};

async function tradeFilterSymbolChange(symbolShortType) {
    let params = {};
    params.symbol = symbolShortType;
    params.displayName = symbolDesc(symbolShortType);
    onContractSymbolChange(params);
}

async function onSymbolChange$1(symbolShortType) {
    try {
        unsubPriceWebSocket("linearSwapPeriodKlineWs", {
            symbol: symbolData$1.currentSymbol,
            period: "1day"
        });
        save("tradingBot", "currentContractGridSymbol", symbolShortType);
        if (!isInvalidString(commonData.copytradingSelSymbol)) {
            save("symbolMenu_copyTrading", "selSymbol", commonData.copytradingSelSymbol);
        }
        symbolData$1.currentSymbol = symbolShortType;
        onCreate$1();
        subPriceWebSocket("linearSwapPeriodKlineWs", {
            symbol: symbolData$1.currentSymbol,
            period: "1day"
        });
        clearContent();
        tradeFilterSymbolChange(symbolShortType);
        loadServerConfigData = false;
        requestCommonConfig();
    } catch (e) {}
}

var loadServerConfigData = false;

async function requestCommonConfig() {
    if (!loadServerConfigData && !isInvalidString(symbolData$1.currentSymbol)) {
        await sendRequestWithCache("v1/gridstrategy/strategy/common-config?symbol=" + symbolData$1.currentSymbol, callback = configDataCallback);
    }
}

function configDataCallback(configData, isCache) {
    if (configData && configData != "") {
        setMinMaxGridNum(configData.minGridNum, configData.maxGridNum);
        setMaxCouponOnce(configData.maxCouponOnce);
        setConfigData(configData);
        loadServerConfigData = loadServerConfigData | !isCache;
    }
}

async function tabClicked$1(selectIndex, analytics = false) {
    var idx = selectIndex;
    if (typeof selectIndex === "string") {
        idx = parseInt(selectIndex);
    }
    if (currentIndex != idx) {
        currentIndex = idx;
        $data.contractGridPage.currentIndex = currentIndex;
        if (idx == 0) {
            moduleData$c.tab0 = moduleData$c.selectTab;
            moduleData$c.tab1 = moduleData$c.normalTab;
            requestRecommendList$1();
        } else {
            moduleData$c.tab0 = moduleData$c.normalTab;
            moduleData$c.tab1 = moduleData$c.selectTab;
        }
        if (analytics) {
            if (idx == 0) {
                await analytics$1("tradingbot_recommend_app");
            } else {
                await analytics$1("tradingbot_mannual_app");
            }
        }
    }
}

moduleEvent$c.tabClicked = tabClicked$1;

var dataLoadSuccess$1 = false;

var showedToast$1 = false;

async function start$b() {
    showedToast$1 = false;
}

function defaultData$b() {
    return {
        buyColor: "#00A171",
        sellColor: "#E94359",
        buyWeight: "1",
        sellWeight: "1",
        singleAmount: "",
        buyAmount: "",
        sellAmount: "",
        listEmptyVisibility: "gone",
        buyEmptyVisibility: "gone",
        sellEmptyVisibility: "gone",
        contentVisibility: "gone",
        curPriceTitle: `${$i18n.n_contarct_share_position_cur_price}(USDT)`,
        singleBoxTitle: `${$i18n.n_bot_detail_single_box_quantity}`,
        curPriceContent: "",
        entrustPrice: `${$i18n.n_exchange_call_auction_order_price}(USDT)`,
        orderListHeight: "match_parent",
        pageHeight: -1
    };
}

const {moduleData: moduleData$b, moduleEvent: moduleEvent$b} = moduleDefine("botDetailOrder", start$b, defaultData$b);

moduleEvent$b.setPageParams = async function(params) {
    moduleData$b.pageHeight = parseFloat(params.pageHeight);
};

async function requestOrderBooks() {
    let tempOrderBooks = await sendRequest("v1/gridstrategy/strategy/order-books?strategyId=" + strategyId);
    tempOrderBooks = handleSpotResponse(tempOrderBooks, false);
    if (!tempOrderBooks || tempOrderBooks == null) {
        if (!dataLoadSuccess$1 && !showedToast$1) {
            showToast($i18n.n_check_network);
            showedToast$1 = true;
        }
        return;
    }
    let listData = [];
    let buyLen = 0;
    let precision = getPriceTickPrecision(getModelByContractShortType(tempOrderBooks.symbol));
    if (!tempOrderBooks.buys || tempOrderBooks.buys == null || tempOrderBooks.buys.length == 0) {
        console.log("Bryant -- buyLen = 0");
    } else {
        buyLen = tempOrderBooks.buys.length;
        console.log(`Bryant -- buyLen = ${buyLen}`);
        tempOrderBooks.buys.forEach((async function(item, index) {
            item.buyIndex = String(index + 1);
            item.traderListType = "1";
            item.buyPrice = getPriceString(item.price.toString(), precision);
            let rate = parseFloat(item.rate);
            item.buyRate = `${rate >= 0 ? "+" : ""}${(rate * 100).toFixed(2)}%`;
            listData.push(item);
        }));
    }
    let sellLen = 0;
    if (!tempOrderBooks.sells || tempOrderBooks.sells == null || tempOrderBooks.sells.length == 0) {
        console.log("Bryant -- sellLen = 0");
    } else {
        sellLen = tempOrderBooks.sells.length;
        console.log(`Bryant -- sellLen = ${sellLen}`);
        tempOrderBooks.sells.forEach((async function(item, index) {
            item.sellIndex = String(index + 1);
            item.traderListType = "1";
            item.sellPrice = getPriceString(item.price.toString(), precision);
            let rate = parseFloat(item.rate);
            console.log(`Bryant -- rate = ${rate} format= ${(rate * 100).toFixed(2)}`);
            item.sellRate = `${rate >= 0 ? "+" : ""}${(rate * 100).toFixed(2)}%`;
            if (index < buyLen) {
                let curObject = listData[index];
                curObject = Object.assign(curObject, item);
            } else {
                listData.push(item);
            }
        }));
    }
    if (buyLen == 0 && sellLen < 4 || buyLen < 4 && sellLen == 0) {
        var item = {
            traderListType: "1"
        };
        for (let i = 0; i < 4 - buyLen - sellLen; i++) {
            listData.push(item);
        }
    }
    if (buyLen + sellLen > 0) {
        if (sellLen * 5 < 1 * buyLen) {
            moduleData$b.buyWeight = 5;
            moduleData$b.sellWeight = 1;
        } else if (buyLen * 5 < 1 * sellLen) {
            moduleData$b.buyWeight = 1;
            moduleData$b.sellWeight = 5;
        } else {
            moduleData$b.buyWeight = buyLen;
            moduleData$b.sellWeight = sellLen;
        }
    }
    moduleData$b.buyAmount = `${$i18n.n_grid_user_guide_run_bot_detail_v2} ${buyLen}`;
    moduleData$b.sellAmount = `${$i18n.n_grid_user_guide_run_bot_detail_v1} ${sellLen}`;
    moduleData$b.curPriceContent = getPriceString(tempOrderBooks.curPrice.toString(), precision);
    moduleData$b.singleBoxTitle = `${$i18n.n_bot_detail_single_box_quantity}(${tempOrderBooks.symbol.split("-")[0]})`, 
    moduleData$b.quantity = tempOrderBooks.singleAmount;
    moduleData$b.listEmptyVisibility = buyLen == 0 && sellLen == 0 ? "visible" : "gone";
    moduleData$b.contentVisibility = buyLen == 0 && sellLen == 0 ? "gone" : "visible";
    moduleData$b.buyEmptyVisibility = buyLen == 0 && sellLen > 0 ? "visible" : "gone";
    moduleData$b.sellEmptyVisibility = buyLen > 0 && sellLen == 0 ? "visible" : "gone";
    if (moduleData$b.pageHeight != -1) {
        var maxListHeight = moduleData$b.pageHeight - 148 - 16 - 40;
        let maxLine = buyLen > sellLen ? buyLen : sellLen;
        var listHeight = 0;
        if (buyLen != 0 && sellLen != 0 || maxLine * 40 > 160) {
            listHeight = maxLine * 40;
            if (listHeight > maxListHeight) {
                listHeight = maxListHeight;
            }
        } else {
            listHeight = 160;
        }
        moduleData$b.orderListHeight = String(listHeight);
    }
    moduleData$b.orderList = listData;
    dataLoadSuccess$1 = true;
}

moduleEvent$b.requestOrderBooks = requestOrderBooks;

var dataLoadSuccess = false;

var showedToast = false;

var isRequest = false;

var lastId = 0;

async function start$a() {
    showedToast = false;
}

function defaultData$a() {
    return {
        symbol: "",
        matchList: [],
        listEmptyVisibility: "gone",
        contentVisibility: "gone",
        popShow: false,
        popList: [],
        loadMoreStatus: "2",
        matchListHeight: "match_parent",
        pageHeight: -1
    };
}

const {moduleData: moduleData$a, moduleEvent: moduleEvent$a} = moduleDefine("botDetailRecord", start$a, defaultData$a);

moduleEvent$a.setPageParams = async function(params) {
    moduleData$a.pageHeight = parseFloat(params.pageHeight);
};

async function popDismiss$1() {
    moduleData$a.popShow = false;
    moduleData$a.popList = [];
}

async function clickItem(index) {
    if (index >= moduleData$a.matchList.length) {
        return;
    }
    let item = moduleData$a.matchList[index];
    item.buy.isBuy = true;
    item.sell.isBuy = false;
    console.log(`clickedItem at:${index} profit：${item.profit} buy.createAt:${item.buy.createAt} sell.createAt:${item.sell.createAt}`);
    let popList = [];
    if (item.buy.tradeAt >= item.sell.tradeAt) {
        popList.push(popItem(item.buy));
        if (item.sell.tradeAt > 0) {
            popList.push(popItem(item.sell));
        }
    } else {
        popList.push(popItem(item.sell));
        if (item.buy.tradeAt > 0) {
            popList.push(popItem(item.buy));
        }
    }
    if (popList.length > 1) {
        popList[0].separatorVisible = "visible";
    }
    moduleData$a.popList = popList;
    moduleData$a.popShow = true;
}

function popItem(item) {
    var element = {};
    console.log(`clickedItem begin item:${JSON.stringify(item)}`);
    element.type = "1";
    element.buySell = item.isBuy ? $i18n.n_copy_trading_trade_limit_buy : $i18n.n_copy_trading_trade_limit_sell;
    element.buySellColor = item.isBuy ? getUpDownColor() : getUpDownColor(false);
    element.symbol = symbolDesc(moduleData$a.symbol);
    element.date = new Date(item.tradeAt).Format("yyyy/MM/dd hh:mm:ss");
    let [first, second] = moduleData$a.symbol.split("-");
    element.entrustPriceTitle = $i18n.n_exchange_order_list_entrust_price + "(USDT)";
    element.entrustAmountTitle = $i18n.n_exchange_order_list_entrust_amount + `(${first})`;
    element.avgPriceTitle = $i18n.n_exchange_order_list_trade_avg_price + "(USDT)";
    element.dealAmountTitle = $i18n.n_exchange_timing_deal_amount + `(${first})`;
    element.feeTitle = $i18n.n_exchange_order_detail_fee + "(USDT)";
    element.entrustPriceContent = item.orderPrice;
    element.entrustAmountContent = item.amount;
    element.avgPriceContent = item.tradePrice;
    element.dealAmountContent = item.tradeAmount;
    element.feeContent = item.tradeFee;
    console.log(`clickedItem end element:${JSON.stringify(element)}`);
    return element;
}

async function onStart() {
    requestMatchList(false);
}

async function loadMore$1() {
    console.log(`botDetailRecord.js loadMore`);
    moduleData$a.loadMoreStatus = "1";
    await requestMatchList(true);
    moduleData$a.loadMoreStatus = "2";
}

async function requestMatchList(isMore) {
    if (isRequest) {
        return;
    }
    isRequest = true;
    if (!isMore) {
        lastId = 0;
    }
    var params = {
        strategyId: strategyId,
        fromId: lastId,
        limit: 20
    };
    let tempMatchList = await sendRequest("v1/gridstrategy/strategy/match-list", params = params);
    tempMatchList = handleSpotResponse(tempMatchList, false);
    if (!tempMatchList || tempMatchList == null) {
        if (!dataLoadSuccess && !showedToast) {
            showToast($i18n.n_check_network);
            showedToast = true;
        }
        isRequest = false;
        return;
    }
    let listData = [];
    moduleData$a.symbol = tempMatchList.symbol;
    getPriceTickPrecision(tempMatchList.symbol);
    if (!tempMatchList.matches || tempMatchList.matches == null || tempMatchList.matches.length == 0) {
        console.log("Bryant -- matchesLen = 0");
    } else {
        lastId = tempMatchList.lastId;
        console.log(`Bryant -- matchesLen = ${tempMatchList.matches.length}`);
        var buy;
        var sell;
        var startIndex = !isMore ? 0 : moduleData$a.matchList.length;
        tempMatchList.matches.forEach((async function(item, index) {
            item.traderListType = "1";
            item.index = startIndex + index;
            buy = item.buy;
            sell = item.sell;
            if (item.matchStatus == 0) {
                item.content = $i18n.n_bot_detail_stop_unfinished_arbitrage;
                item.contentColor = "@color/kColorPrimaryText";
            } else if (item.matchStatus == 1) {
                item.content = $i18n.n_bot_detail_waiting_to_buy;
                item.contentColor = "@color/kColorPrimaryText";
            } else if (item.matchStatus == 2) {
                item.content = $i18n.n_bot_detail_waiting_to_sell;
                item.contentColor = "@color/kColorPrimaryText";
            } else if (item.matchStatus == 3 || item.matchStatus == 4) {
                item.content = $i18n.n_bot_detail_waiting_complete_transaction;
                item.contentColor = "@color/kColorPrimaryText";
            } else if (item.matchStatus == 5) {
                item.content = $i18n.n_bot_detail_termination_market_closing;
                item.contentColor = "@color/kColorPrimaryText";
            } else if (item.matchStatus == 6) {
                item.content = $i18n.n_bot_detail_liquidation_closed_position;
                item.contentColor = "@color/kColorPrimaryText";
            } else if (item.matchStatus == 7) {
                item.content = $i18n.n_bot_detail_adl_closed_position;
                item.contentColor = "@color/kColorPrimaryText";
            } else if (item.matchStatus == 9) {
                let tempProfit = parseFloat(item.profit);
                item.content = `${tempProfit >= 0 ? "+" : ""}${format(item.profit, 4)}`;
                item.contentColor = tempProfit >= 0 ? getUpDownColor() : getUpDownColor(false);
            } else {
                item.content = "";
                item.contentColor = "@color/kColorPrimaryText";
            }
            item.date = new Date(buy.tradeAt > sell.tradeAt ? buy.tradeAt : sell.tradeAt).Format("yyyy/MM/dd hh:mm:ss");
            listData.push(item);
        }));
    }
    let allProfit = parseFloat(tempMatchList.allProfit);
    moduleData$a.arbitrageProfit = `${allProfit >= 0 ? "+" : ""}${format(tempMatchList.allProfit, 4)}`;
    moduleData$a.arbitrageTimes24h = String(tempMatchList.profitNum24h);
    moduleData$a.totalArbitrageTimes = String(tempMatchList.profitNumTotal);
    moduleData$a.accumulatedFundingFees = format(tempMatchList.funding, 4);
    if (!isMore) {
        moduleData$a.matchList = listData;
    } else {
        for (let item of listData) {
            moduleData$a.matchList.push(item);
        }
    }
    moduleData$a.listEmptyVisibility = moduleData$a.matchList.length == 0 ? "visible" : "gone";
    moduleData$a.contentVisibility = moduleData$a.matchList.length == 0 ? "gone" : "visible";
    if (moduleData$a.pageHeight != -1) {
        var maxListHeight = moduleData$a.pageHeight - 164 - 16 - 40;
        let lines = moduleData$a.matchList.length;
        var listHeight = 0;
        if (lines * 40 > maxListHeight) {
            listHeight = maxListHeight;
        } else {
            listHeight = lines * 40;
        }
        moduleData$a.matchListHeight = String(listHeight);
    }
    isRequest = false;
    dataLoadSuccess = true;
}

moduleEvent$a.bottomLineClick = async function(type) {
    switch (type) {
      case "1":
        popUpContentOfOneButton($i18n.n_trade_bot_title_matched_profit, $i18n.n_trade_bot_desc_matched_profit);
        break;

      case "2":
        popUpContentOfOneButton($i18n.n_trade_bot_title_24H_matched_numbers, $i18n.n_trade_bot_desc_24H_matched_numbers);
        break;

      case "3":
        popUpContentOfOneButton($i18n.n_trade_bot_title_matched_numbers_total, $i18n.n_trade_bot_desc_matched_numbers_total);
        break;

      case "4":
        popUpContentOfOneButton($i18n.n_bot_detail_accumulated_funding_fees.replace("(USDT)", ""), $i18n.n_bot_detail_accumulated_funding_fees_desc);
        break;
    }
};

moduleEvent$a.onStart = onStart;

moduleEvent$a.popDismiss = popDismiss$1;

moduleEvent$a.clickItem = clickItem;

moduleEvent$a.loadMore = loadMore$1;

async function start$9() {}

function defaultData$9() {
    var data = {
        visibility: "invisible",
        symbol: "",
        symbolTitle: "",
        gridModeDisplay: "",
        trendTypeDisplay: "",
        trendTypeColor: "",
        trendTypeBorderColor: "",
        leverDisplay: "",
        totalInvestmentTitle: `${$i18n.n_trade_bot_title_total_investment}(USDT)`,
        totalInvestmentDisplay: "",
        totalProfitTitle: `${$i18n.n_trade_bot_title_total_profit}(USDT)`,
        totalProfitDisplay: "",
        totalProfitRateDisplay: "",
        totalTextColor: "@color/kColorPrimaryText",
        statusSrc: "@drawable/edge_engine_bot_status_running",
        tabList: [],
        currentTabIndex: 0,
        currentTabTitle: $i18n.n_bot_detail_order_overview,
        stateDisplay: "",
        stateColor: "",
        runtimeDisplay: ""
    };
    return data;
}

const {moduleData: moduleData$9, moduleEvent: moduleEvent$9} = moduleDefine("botDetailHeader", start$9, defaultData$9);

function refreshInfo$3() {
    var strategyInfo$1 = strategyInfo;
    moduleData$9.symbol = strategyInfo$1.symbol;
    moduleData$9.symbolTitle = symbolDesc(strategyInfo$1.symbol);
    moduleData$9.gridModeDisplay = $i18n.n_trade_bot_contract_grid;
    switch (strategyInfo$1.trendType) {
      case 1:
        moduleData$9.trendTypeDisplay = $i18n.n_contract_grid_buy;
        moduleData$9.trendTypeColor = getUpDownColor();
        moduleData$9.trendTypeBorderColor = getColorWithAlpha(moduleData$9.trendTypeColor, .3);
        break;

      case 2:
        moduleData$9.trendTypeDisplay = $i18n.n_contract_grid_sell;
        moduleData$9.trendTypeColor = getUpDownColor(false);
        moduleData$9.trendTypeBorderColor = getColorWithAlpha(moduleData$9.trendTypeColor, .3);
        break;

      case 0:
        moduleData$9.trendTypeDisplay = $i18n.n_contract_grid_neutral;
        moduleData$9.trendTypeColor = "@color/kColorSecondaryText";
        moduleData$9.trendTypeBorderColor = "@color/eButtonUnenabledBgColor";
        break;
    }
    moduleData$9.leverDisplay = `${strategyInfo$1.lever}X`;
    if (strategyInfo$1.accountStatic == null || strategyInfo$1.accountStatic.length == 0) {
        strategyInfo$1.accountStatic = strategyInfo$1.investAmount;
    }
    moduleData$9.totalInvestmentDisplay = formatDecimal(strategyInfo$1.accountStatic);
    moduleData$9.totalProfitDisplay = `${getOperator$1(strategyInfo$1.totalProfitAmount)}${formatDecimal(strategyInfo$1.totalProfitAmount)}`;
    moduleData$9.totalProfitRateDisplay = `${getOperator$1(strategyInfo$1.totalProfitAmount)}${formatDecimal(multiply(strategyInfo$1.totalProfitRate, 100), 2, false)}%`;
    moduleData$9.totalTextColor = getUpDownColor(parseFloat(strategyInfo$1.totalProfitAmount) >= 0);
    const create_timestamp = parseInt(strategyInfo$1.createAt);
    const create_date = new Date(create_timestamp);
    const create_year = create_date.getFullYear();
    const create_month = (create_date.getMonth() + 1).toString().padStart(2, "0");
    const create_day = create_date.getDate().toString().padStart(2, "0");
    const create_hours = create_date.getHours().toString().padStart(2, "0");
    const create_minutes = create_date.getMinutes().toString().padStart(2, "0");
    const create_seconds = create_date.getSeconds().toString().padStart(2, "0");
    const create_formattedDate = `${create_year}/${create_month}/${create_day} ${create_hours}:${create_minutes}:${create_seconds}`;
    const runTime = parseInt(strategyInfo$1.runTime, 10) / 1e3;
    var runTimeStr = "";
    if (runTime < 60) {
        runTimeStr = $i18n.n_trade_bot_less_than_minute;
    } else if (runTime < 3600) {
        runTimeStr = $i18n.$intercept.n_trade_bot_more_than_minute(format(runTime / 60, 0));
    } else if (runTime < 24 * 3600) {
        runTimeStr = $i18n.$intercept.n_trade_bot_more_than_hour(format(runTime / 3600, 0), format(runTime / 60 % 60, 0));
    } else {
        runTimeStr = $i18n.$intercept.n_trade_bot_more_than_day(format(runTime / (24 * 3600), 0), format(runTime / 3600 % 24, 0), format(runTime / 60 % 60, 0));
    }
    moduleData$9.runtimeDisplay = $i18n.$intercept.n_bot_detail_running_time_and_build(runTimeStr, create_formattedDate);
    switch (parseInt(strategyInfo$1.status)) {
      case 1:
        moduleData$9.statusSrc = "@drawable/edge_engine_bot_status_will_start";
        moduleData$9.stateDisplay = $i18n.n_trade_bot_status_will_start;
        moduleData$9.stateColor = "@color/KBaseRiskTextColorMid";
        break;

      case 2:
        moduleData$9.statusSrc = "@drawable/edge_engine_bot_status_running";
        moduleData$9.stateDisplay = $i18n.n_trade_bot_status_starting;
        moduleData$9.stateColor = "@color/kColorPriceGreen";
        break;

      case 3:
        moduleData$9.statusSrc = "@drawable/edge_engine_bot_status_stop";
        moduleData$9.stateDisplay = $i18n.n_trade_bot_status_build_fail;
        moduleData$9.stateColor = "@color/kColorThreeLevelText";
        break;

      case 4:
        if (strategyInfo$1.exceedPriceFlag) {
            moduleData$9.statusSrc = "@drawable/edge_engine_bot_status_out_range";
            moduleData$9.stateDisplay = $i18n.n_trade_bot_status_out_range;
            moduleData$9.stateColor = "@color/kColorPriceRed";
        } else {
            moduleData$9.statusSrc = "@drawable/edge_engine_bot_status_running";
            moduleData$9.stateDisplay = $i18n.n_trade_bot_status_running;
            moduleData$9.stateColor = "@color/kColorPriceGreen";
        }
        break;

      case 5:
        moduleData$9.statusSrc = "@drawable/edge_engine_bot_status_stop";
        moduleData$9.stateDisplay = $i18n.n_trade_bot_status_ending;
        moduleData$9.stateColor = "@color/kColorThreeLevelText";
        break;

      case 6:
        moduleData$9.statusSrc = "@drawable/edge_engine_bot_status_stop";
        moduleData$9.stateDisplay = $i18n.n_trade_bot_status_ended;
        moduleData$9.stateColor = "@color/kColorThreeLevelText";
        break;
    }
    moduleData$9.visibility = "visible";
    var tabTitleList = [];
    tabTitleList.push($i18n.n_bot_detail_order_overview);
    if (getStrategyRunningStatus(strategyInfo$1.status) == true) {
        tabTitleList.push($i18n.n_bot_detail_pending_order);
    }
    tabTitleList.push($i18n.n_bot_detail_arbitrage_record);
    tabTitleList.push($i18n.n_bot_detail_robot_parameters);
    var tabList = [];
    for (let index = 0; index < tabTitleList.length; index++) {
        var item = {};
        item.cellType = "1";
        item.index = index;
        item.textColor = "@color/kColorThreeLevelText";
        item.selectVisibility = "invisible";
        item.title = tabTitleList[index];
        if (item.title == moduleData$9.currentTabTitle) {
            item.textColor = "@color/kColorPrimaryText";
            item.selectVisibility = "visible";
            moduleData$9.currentTabIndex = index;
        }
        tabList.push(item);
    }
    moduleData$9.tabList = tabList;
}

async function remindClick$3(type) {
    console.log(`remindClick type = ${type}`);
    switch (type) {
      case "totalInvestment":
        var strategyInfo$1 = strategyInfo;
        popUpTwoContentOfOneButton($i18n.n_trade_bot_title_total_investment, $i18n.n_trade_bot_desc_total_investment_with_coupon, `${$i18n.n_transfer_experience_balance} : ${formatDecimal(strategyInfo$1.trailFundBalance)} USDT`);
        await analytics$1("tradingbot_totalinvest_app");
        break;

      case "totalProfit":
        var strategyInfo$1 = strategyInfo;
        var content = $i18n.n_trade_total_profit_since_bot_started;
        if (!isInvalidString(strategyInfo$1.matchProfit)) {
            content = content + "\n" + $i18n.$intercept.n_trade_realized_arbitrage_profit(formatDecimal(strategyInfo$1.matchProfit));
        }
        if (!isInvalidString(strategyInfo$1.unMatchProfit)) {
            content = content + "\n" + $i18n.$intercept.n_trade_unrealized_arbitrage_profit(formatDecimal(strategyInfo$1.unMatchProfit));
        }
        if (!isInvalidString(strategyInfo$1.fundingFee)) {
            content = content + "\n" + $i18n.$intercept.n_trade_total_funding_fees(formatDecimal(strategyInfo$1.fundingFee));
        }
        popUpContentOfOneButton($i18n.n_trade_bot_title_total_profit, content);
        await analytics$1("tradingbot_totalprofit_app");
        break;
    }
}

async function tabClick(idx, analytics = false) {
    console.log(`tabClick index = ${idx}  currentTabIndex = ${moduleData$9.currentTabIndex} analytics = ${analytics}`);
    if (moduleData$9.currentTabIndex != idx) {
        moduleData$9.currentTabIndex = idx;
        moduleData$9.tabList.forEach((function(item) {
            if (item.index == moduleData$9.currentTabIndex) {
                item.textColor = "@color/kColorPrimaryText";
                item.selectVisibility = "visible";
                moduleData$9.currentTabTitle = item.title;
            } else {
                item.textColor = "@color/kColorThreeLevelText";
                item.selectVisibility = "invisible";
            }
        }));
        if (moduleData$9.tabList.length == 4 && moduleData$9.currentTabIndex == 2) {
            onStart();
        }
        if (analytics) {
            if (moduleData$9.tabList.length == 4) {
                switch (moduleData$9.currentTabIndex) {
                  case 0:
                    await analytics$1("tradingbot_overview_app");
                    break;

                  case 1:
                    await analytics$1("tradingbot_orders_app");
                    break;

                  case 2:
                    await analytics$1("tradingbot_records_app");
                    break;

                  case 3:
                    await analytics$1("tradingbot_botsparameters_app");
                    break;
                }
            } else if (moduleData$9.tabList.length == 3) {
                switch (moduleData$9.currentTabIndex) {
                  case 0:
                    await analytics$1("tradingbot_overview_app");
                    break;

                  case 1:
                    await analytics$1("tradingbot_records_app");
                    break;

                  case 2:
                    await analytics$1("tradingbot_botsparameters_app");
                    break;
                }
            }
        }
    }
}

function getOperator$1(num) {
    const number = parseFloat(num);
    if (number > 0) {
        return "+";
    }
    if (number < 0) {
        return "";
    }
    return "";
}

moduleEvent$9.remindClick = remindClick$3;

moduleEvent$9.tabClick = tabClick;

async function start$8() {}

function defaultData$8() {
    var data = {
        unmatchedProfit: {
            title: `${$i18n.n_trade_bot_title_unmatched_PNL}(USDT)`,
            content: "",
            visibility: "visible"
        },
        matchedProfit: {
            title: `${$i18n.n_trade_bot_title_matched_profit}(USDT)`,
            content: "",
            visibility: "visible"
        },
        annualizedYield: {
            title: $i18n.n_trade_bot_title_annualized_yield,
            content: "",
            visibility: "visible"
        },
        matchedNumbers: {
            title: $i18n.n_trade_bot_title_matched_numbers,
            content: "",
            visibility: "visible"
        },
        accountBalance: {
            title: `${$i18n.n_trade_bot_title_account_balance}(USDT)`,
            content: "",
            visibility: "gone"
        },
        originRecordList: [],
        originRecordTotalCount: -1,
        recordList: [],
        recordFromID: 0,
        isLoading: 0,
        loadMoreStatus: 2,
        positionInfo: {
            visibility: "gone",
            contentVisibility: "gone",
            emptyVisibility: "gone",
            originPositionInfo: {},
            profitUnrealTitle: $i18n.$intercept.n_balance_option_future_benefit("USDT"),
            profitUnreal: "",
            profitUnrealTextColor: "",
            positionAmountTitle: $i18n.n_copytrading_current_observation,
            positionAmount: "",
            infoList: [],
            trendTypeDisplay: "",
            trendTypeColor: "",
            trendTypeBorderColor: ""
        },
        precision: 4
    };
    return data;
}

const {moduleData: moduleData$8, moduleEvent: moduleEvent$8} = moduleDefine("botDetailInfo", start$8, defaultData$8);

async function checkEmptyRequest() {
    if (moduleData$8.originRecordList.length == 0) {
        refreshOperateList();
    }
}

async function refreshInfo$2() {
    console.log(`botDetailInfo.js ==============> refreshInfo`);
    const info = strategyInfo;
    moduleData$8.precision = getPriceTickPrecision(getModelByContractShortType(info.symbol));
    moduleData$8.unmatchedProfit.content = `${getOperator(info.unMatchProfit)}${formatDecimal(info.unMatchProfit)}(${getOperator(info.unMatchProfitRate)}${formatDecimal(multiply(info.unMatchProfitRate, 100), 2, false)}%)`;
    moduleData$8.matchedProfit.content = `${getOperator(info.matchProfit)}${formatDecimal(info.matchProfit)}`;
    moduleData$8.annualizedYield.content = `${getOperator(info.apr)}${formatDecimal(multiply(info.apr, 100), 2, false)}%`;
    moduleData$8.matchedNumbers.content = `${info.profitNum24} | ${info.profitNum}`;
    if (parseFloat(info.accountBalance) < 0) {
        moduleData$8.accountBalance.content = `${getOperator(info.accountBalance)}${formatDecimal(info.accountBalance)}`;
        moduleData$8.accountBalance.visibility = "visible";
    } else {
        moduleData$8.accountBalance.visibility = "gone";
    }
    updatePositionInfo(moduleData$8.positionInfo.originPositionInfo);
}

async function refreshOperateList() {
    console.log(`botDetailInfo.js ==============> refreshOperateList`);
    await requestOperateList(false);
}

async function loadMore() {
    console.log(`botDetailInfo.js ==============> loadMoreOperateList`);
    moduleData$8.loadMoreStatus = 1;
    await requestOperateList(true);
    moduleData$8.loadMoreStatus = 2;
}

async function requestOperateList(isMore) {
    console.log(`botDetailInfo.js ==============> requestOperateList`);
    if (moduleData$8.isLoading == 1) {
        return;
    }
    moduleData$8.isLoading = 1;
    if (isMore && moduleData$8.originRecordList.length > 0) {
        var lastRecord = moduleData$8.originRecordList[moduleData$8.originRecordList.length - 1];
        moduleData$8.recordFromID = lastRecord.id;
    } else {
        moduleData$8.recordFromID = 0;
    }
    var params = {
        strategyId: strategyId,
        fromId: moduleData$8.recordFromID,
        limit: 20
    };
    var respData = await sendRequest("v1/gridstrategy/strategy/operate-list", params = params);
    respData = handleSpotResponse(respData, false);
    moduleData$8.loadMoreStatus = 2;
    if (respData != null) {
        if (moduleData$8.recordFromID == 0) {
            moduleData$8.originRecordList = respData.operateList;
        } else {
            for (let item of respData.operateList) {
                moduleData$8.originRecordList.push(item);
            }
        }
        moduleData$8.originRecordTotalCount = respData.totalCount;
        updateRecordList();
    }
    moduleData$8.isLoading = 0;
}

function updatePositionInfo(positionInfo) {
    if (getStrategyRunningStatus(strategyInfo.status) == false) {
        moduleData$8.positionInfo.visibility = "gone";
        return;
    }
    moduleData$8.positionInfo.originPositionInfo = positionInfo;
    if (positionInfo != null && parseFloat(positionInfo.positionAmount) > 0) {
        let symbolInfo = getModelByContractShortType(positionInfo.symbol);
        moduleData$8.positionInfo.profitUnreal = `${getOperator(positionInfo.unrealProfit)}${formatDecimal(positionInfo.unrealProfit)}(${getOperator(positionInfo.profitRate)}${formatDecimal(multiply(positionInfo.profitRate, 100), 2, false)}%)`;
        moduleData$8.positionInfo.profitUnrealTextColor = getUpDownColor(parseFloat(positionInfo.unrealProfit) >= 0);
        moduleData$8.positionInfo.positionAmountTitle = `${$i18n.n_copytrading_current_observation}(${symbolInfo.symbol})`;
        moduleData$8.positionInfo.positionAmount = positionInfo.positionAmount;
        if (positionInfo.direction == 1) {
            moduleData$8.positionInfo.trendTypeDisplay = $i18n.n_contract_grid_buy;
            moduleData$8.positionInfo.trendTypeColor = getUpDownColor();
            moduleData$8.positionInfo.trendTypeBorderColor = getColorWithAlpha(moduleData$8.positionInfo.trendTypeColor, .3);
        } else {
            moduleData$8.positionInfo.trendTypeDisplay = $i18n.n_contract_grid_sell;
            moduleData$8.positionInfo.trendTypeColor = getUpDownColor(false);
            moduleData$8.positionInfo.trendTypeBorderColor = getColorWithAlpha(moduleData$8.positionInfo.trendTypeColor, .3);
        }
        var infoList = [];
        var marginItem = {
            cellType: "2",
            title: `${$i18n.n_trade_bot_title_position_margin}(USDT)`,
            content: formatDecimal(positionInfo.positionMargin),
            remindType: "margin"
        };
        infoList.push(marginItem);
        var riskRateItem = {
            cellType: "1",
            title: $i18n.n_asset_margin_rate,
            content: `${formatDecimal(multiply(positionInfo.riskRate, 100), 2, false)}%`
        };
        infoList.push(riskRateItem);
        var liquidationPriceStr = "--";
        if (positionInfo.liquidationPrice != null && parseFloat(positionInfo.liquidationPrice) > 0) {
            liquidationPriceStr = formatDecimal(positionInfo.liquidationPrice, moduleData$8.precision);
        }
        var liquidationPriceItem = {
            cellType: "1",
            title: `${$i18n.n_balance_contract_prediction_of_strong_parity}(USDT)`,
            content: liquidationPriceStr
        };
        infoList.push(liquidationPriceItem);
        var openPriceItem = {
            cellType: "1",
            title: `${$i18n.n_contract_avg_open_price}(USDT)`,
            content: formatDecimal(positionInfo.openPrice, moduleData$8.precision)
        };
        infoList.push(openPriceItem);
        var marketPriceItem = {
            cellType: "1",
            title: `${$i18n.n_contract_last_price}(USDT)`,
            content: formatDecimal(positionInfo.marketPrice, moduleData$8.precision)
        };
        infoList.push(marketPriceItem);
        moduleData$8.positionInfo.infoList = infoList;
        moduleData$8.positionInfo.contentVisibility = "visible";
        moduleData$8.positionInfo.emptyVisibility = "gone";
    } else {
        moduleData$8.positionInfo.contentVisibility = "gone";
        moduleData$8.positionInfo.emptyVisibility = "visible";
        moduleData$8.positionInfo.trendTypeDisplay = "";
        moduleData$8.positionInfo.trendTypeColor = getUpDownColor();
        moduleData$8.positionInfo.trendTypeBorderColor = getColorWithAlpha(moduleData$8.positionInfo.trendTypeColor, 0);
    }
    moduleData$8.positionInfo.visibility = "visible";
}

function updateRecordList() {
    moduleData$8.precision = getPriceTickPrecision(getModelByContractShortType(symbolData.currentSymbol));
    var recordList = [];
    const dataCount = moduleData$8.originRecordList.length;
    for (let index = 0; index < dataCount; index++) {
        const recordInfo = moduleData$8.originRecordList[index];
        const amountList = recordInfo.amount.split(",");
        var item = {};
        item.cellType = "1";
        item.showBeforeLine = "visible";
        item.showAfterLine = "visible";
        item.pointColor = "@color/kColorPrimarySeparator";
        if (recordInfo.operateResult == 1) {
            item.status = $i18n.n_copy_trading_order_success;
            item.statusColor = "@color/KBaseColorSecondaryText";
        } else {
            item.status = $i18n.n_copy_trading_order_fail;
            item.statusColor = "#E94359";
        }
        let amount1 = "";
        let amount1Str = "";
        let amount2 = "";
        let amount2Str = "";
        let amount3 = "";
        let amount3Str = "";
        let amount4 = "";
        let priceTypeBefore = "";
        let priceTypeAfter = "";
        if (amountList.length == 1) {
            amount1 = amountList[0];
            amount1Str = `${thousandsFormatter(amountList[0])} USDT`;
        }
        if (amountList.length == 2) {
            amount1 = amountList[0];
            amount1Str = `${thousandsFormatter(amountList[0])} USDT`;
            amount2 = amountList[1];
            amount2Str = `${thousandsFormatter(amountList[1])} USDT`;
        } else if (amountList.length == 4) {
            amount1 = amountList[0];
            amount1Str = `${thousandsFormatter(amount1, moduleData$8.precision)} USDT`;
            amount2 = parseInt(amountList[1]);
            amount3 = amountList[2];
            amount3Str = `${thousandsFormatter(amount3, moduleData$8.precision)} USDT`;
            amount4 = parseInt(amountList[3]);
            priceTypeBefore = amount2 == 1 ? $i18n.n_contract_latest_price : $i18n.n_contract_mark_price;
            priceTypeAfter = amount4 == 1 ? $i18n.n_contract_latest_price : $i18n.n_contract_mark_price;
        }
        switch (recordInfo.operateCode) {
          case -1:
            item.title = $i18n.n_trade_bot_handle_record_build_fail;
            if (amount2 == 0) {
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_out(amount1Str);
            } else {
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_out_with_coupon(amount1Str, amount2Str);
            }
            break;

          case 1:
            item.title = $i18n.n_trade_bot_handle_record_create_bot;
            if (amount2 == 0) {
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_in(amount1Str);
            } else {
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_in_with_coupon(amount1Str, amount2Str);
            }
            break;

          case 2:
            item.title = $i18n.n_trade_bot_handle_record_add_margin;
            if (amount2 == 0) {
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_in(amount1Str);
            } else {
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_in_with_coupon(amount1Str, amount2Str);
            }
            break;

          case 3:
            item.title = $i18n.n_trade_bot_handle_record_subtract_margin;
            item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_out(amount1Str);
            break;

          case 4:
            if (amount4 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_adjust_stop_profit;
                item.desc = $i18n.n_trade_bot_handle_record_clear_stop_profit;
            } else if (amount2 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_set_stop_profit;
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_set_content(`${amount3Str}（${priceTypeAfter}）`);
            } else {
                item.title = $i18n.n_trade_bot_handle_record_adjust_stop_profit;
                if (amount1 == amount3) {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`"${priceTypeBefore}"`, `"${priceTypeAfter}"`);
                } else {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`${amount1Str}（${priceTypeBefore}）`, `${amount3Str}（${priceTypeAfter}）`);
                }
            }
            break;

          case 5:
            if (amount4 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_adjust_stop_loss;
                item.desc = $i18n.n_trade_bot_handle_record_clear_stop_loss;
            } else if (amount2 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_set_stop_loss;
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_set_content(`${amount3Str}（${priceTypeAfter}）`);
            } else {
                item.title = $i18n.n_trade_bot_handle_record_adjust_stop_loss;
                if (amount1 == amount3) {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`"${priceTypeBefore}"`, `"${priceTypeAfter}"`);
                } else {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`${amount1Str}（${priceTypeBefore}）`, `${amount3Str}（${priceTypeAfter}）`);
                }
            }
            break;

          case 6:
            if (amount4 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_adjust_max_price;
                item.desc = $i18n.n_trade_bot_handle_record_clear_max_price;
            } else if (amount2 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_set_max_price;
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_set_content(`${amount3Str}（${priceTypeAfter}）`);
            } else {
                item.title = $i18n.n_trade_bot_handle_record_adjust_max_price;
                if (amount1 == amount3) {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`"${priceTypeBefore}"`, `"${priceTypeAfter}"`);
                } else {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`${amount1Str}（${priceTypeBefore}）`, `${amount3Str}（${priceTypeAfter}）`);
                }
            }
            break;

          case 7:
            if (amount4 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_adjust_min_price;
                item.desc = $i18n.n_trade_bot_handle_record_clear_min_price;
            } else if (amount2 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_set_min_price;
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_set_content(`${amount3Str}（${priceTypeAfter}）`);
            } else {
                item.title = $i18n.n_trade_bot_handle_record_adjust_min_price;
                if (amount1 == amount3) {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`"${priceTypeBefore}"`, `"${priceTypeAfter}"`);
                } else {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`${amount1Str}（${priceTypeBefore}）`, `${amount3Str}（${priceTypeAfter}）`);
                }
            }
            break;

          case 8:
            if (amount4 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_adjust_trigger_price;
                item.desc = $i18n.n_trade_bot_handle_record_clear_trigger_price;
            } else if (amount2 == 0) {
                item.title = $i18n.n_trade_bot_handle_record_set_trigger_price;
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_set_content(`${amount3Str}（${priceTypeAfter}）`);
            } else {
                item.title = $i18n.n_trade_bot_handle_record_adjust_trigger_price;
                if (amount1 == amount3) {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`"${priceTypeBefore}"`, `"${priceTypeAfter}"`);
                } else {
                    item.desc = $i18n.$intercept.n_trade_bot_handle_record_adjustment(`${amount1Str}（${priceTypeBefore}）`, `${amount3Str}（${priceTypeAfter}）`);
                }
            }
            break;

          case 9:
            item.title = $i18n.n_trade_bot_handle_record_stop_bot;
            if (amount2 == 0) {
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_out(amount1Str);
            } else {
                item.desc = $i18n.$intercept.n_trade_bot_handle_record_desc_transfer_out_with_coupon_in_stop(amount1Str, amount2Str);
            }
            break;

          default:
            item.title = "";
            item.desc = "";
            continue;
        }
        const create_timestamp = parseInt(recordInfo.createdAt);
        const create_date = new Date(create_timestamp);
        const create_month = (create_date.getMonth() + 1).toString().padStart(2, "0");
        const create_day = create_date.getDate().toString().padStart(2, "0");
        const create_hours = create_date.getHours().toString().padStart(2, "0");
        const create_minutes = create_date.getMinutes().toString().padStart(2, "0");
        const create_seconds = create_date.getSeconds().toString().padStart(2, "0");
        const create_formattedDate = `${create_month}/${create_day} ${create_hours}:${create_minutes}:${create_seconds}`;
        item.date = create_formattedDate;
        if (index == 0) {
            item.showBeforeLine = "invisible";
            item.pointColor = "@color/kColorPrimaryText";
        }
        if (index == dataCount - 1) {
            item.showAfterLine = "invisible";
        }
        recordList.push(item);
    }
    moduleData$8.recordList = recordList;
}

function getOperator(num) {
    const number = parseFloat(num);
    if (number > 0) {
        return "+";
    }
    if (number < 0) {
        return "";
    }
    return "";
}

async function remindClick$2(type) {
    console.log(`remindClick type = ${type}`);
    switch (type) {
      case "unmatchedProfit":
        popUpContentOfOneButton($i18n.n_trade_bot_title_unmatched_PNL, $i18n.n_trade_bot_desc_unmatched_PNL);
        await analytics$1("tradingbot_unarbitrage_app");
        break;

      case "matchedProfit":
        popUpContentOfOneButton($i18n.n_trade_bot_title_matched_profit, $i18n.n_trade_bot_desc_matched_profit);
        await analytics$1("tradingbot_arbitrage_app");
        break;

      case "annualizedYield":
        popUpContentOfOneButton($i18n.n_trade_bot_title_annualized_yield, $i18n.n_trade_bot_desc_annualized_yield);
        await analytics$1("tradingbot_anl_app");
        break;

      case "matchedNumbers":
        popUpContentOfOneButton($i18n.n_trade_bot_title_matched_numbers, `${$i18n.n_trade_bot_title_24H_matched_numbers}:${$i18n.n_trade_bot_desc_24H_matched_numbers}\n${$i18n.n_trade_bot_title_matched_numbers_total}:${$i18n.n_trade_bot_desc_matched_numbers_total}`);
        await analytics$1("tradingbot_arbitragenumbers_app");
        break;

      case "accountBalance":
        popUpContentOfOneButton($i18n.n_trade_bot_title_account_balance, $i18n.n_trade_bot_title_account_balance);
        break;

      case "margin":
        popUpContentOfOneButton($i18n.n_trade_bot_title_position_margin, $i18n.n_trade_bot_desc_position_margin);
        break;
    }
}

moduleEvent$8.loadMore = loadMore;

moduleEvent$8.remindClick = remindClick$2;

moduleEvent$8.checkEmptyRequest = checkEmptyRequest;

var adjustFinishCallBack = null;

async function start$7() {
    console.log(`botAdjustMarginPop.js start`);
}

var changeType = 1;

var marginGet = {};

var pricePrecision = 4;

var buttonEnable = false;

function defaultData$7() {
    console.log(`botAdjustMarginPop.js defaultData`);
    var data = {
        selectTab: {
            background: "@color/KBaseColorContentBackground",
            textColor: "@color/kColorPrimaryText"
        },
        normalTab: {
            background: "@color/KBaseColorDeepestBackground",
            textColor: "@color/kColorThreeLevelText"
        },
        bottomBgColor: "@color/eColorInputFillDisabled",
        bottomTextColor: "@color/kColorThreeLevelText",
        totalInvestVisibility: "gone",
        experienceVisibility: "visible",
        bottomLiquidationText: $i18n.n_bot_detail_append_liquidation_price,
        availableTitle: $i18n.n_bot_detail_append_balance_available,
        extractionMsg: $i18n.n_bot_detail_extraction_margin_tips,
        inputHint: $i18n.$intercept.n_exchange_timing_tips_prefix(""),
        totalInvestDisplay: "",
        inputNum: "",
        available: "",
        availableDisplay: "-- USDT",
        curLiquidationPrice: "-- USDT",
        progress: 0,
        editBorderColor: "@color/KBaseColorInputBackground",
        popShow: "false"
    };
    data.tab0 = data.selectTab;
    data.tab1 = data.normalTab;
    return data;
}

const {moduleData: moduleData$7, moduleEvent: moduleEvent$7} = moduleDefine("botAdjustMarginPop", start$7, defaultData$7);

function cleanClick() {
    console.log(`botAdjustMarginPop.js cleanClick`);
    moduleData$7.inputNum = "";
}

async function popUp() {
    console.log(`botAdjustMarginPop.js popUp`);
    moduleData$7.inputNum = "";
    moduleData$7.available = "";
    moduleData$7.availableDisplay = "-- USDT";
    changeButtonStatus(false);
    moduleData$7.progress = 0;
    tabClicked(1);
    refreshTotalInvest();
    moduleData$7.popShow = "true";
    requestMarginAvailable();
    addSelectCouponCallBack(couponSelect);
    requestCoupon(true);
}

function popDismiss() {
    console.log(`botAdjustMarginPop.js popDismiss`);
    moduleData$7.popShow = "false";
    delSelectCouponCallBack(couponSelect);
}

function confirmClick() {
    console.log(`botAdjustMarginPop.js confirmClick`);
    if (buttonEnable) {
        requestMarginChange();
    }
}

function setAdjustFinishCallBack(callback) {
    adjustFinishCallBack = callback;
}

async function tabClicked(type) {
    var idx = parseInt(type);
    console.log(`botAdjustMarginPop.js tabClicked type=${idx} changeType=${changeType}`);
    if (changeType != idx) {
        changeType = idx;
        if (changeType == 1) {
            moduleData$7.tab0 = moduleData$7.selectTab;
            moduleData$7.tab1 = moduleData$7.normalTab;
            moduleData$7.extractionVisibility = "gone";
            moduleData$7.experienceVisibility = "visible";
            moduleData$7.bottomLiquidationText = $i18n.n_bot_detail_append_liquidation_price;
            moduleData$7.availableTitle = $i18n.n_bot_detail_append_balance_available;
        } else {
            moduleData$7.tab0 = moduleData$7.normalTab;
            moduleData$7.tab1 = moduleData$7.selectTab;
            moduleData$7.extractionVisibility = "visible";
            moduleData$7.experienceVisibility = "gone";
            moduleData$7.bottomLiquidationText = $i18n.n_bot_detail_extraction_liquidation_price;
            moduleData$7.availableTitle = $i18n.n_bot_detail_extraction_margin;
        }
        refreshTotalInvest();
        moduleData$7.progress = 0;
        if (null != marginGet && Object.getOwnPropertyNames(marginGet).length > 0) {
            moduleData$7.available = format(changeType == 1 ? marginGet.inAmount : marginGet.outAmount, 4);
            moduleData$7.availableDisplay = thousandsFormatter(moduleData$7.available) + " USDT";
        }
    }
}

moduleEvent$7.appendExtractionDialog = async function() {
    popUpContentOfOneButton($i18n.n_copy_trading_tip, changeType == 1 ? $i18n.n_bot_detail_append_balance_dialog_desc : $i18n.n_bot_detail_extraction_margin_dialog_desc);
};

moduleEvent$7.onTextChange = async function(key, text) {
    console.log(`botAdjustMarginPop.js  onTextChange key = ${key}, text = ${text}`);
    if (text.length > 0) {
        moduleData$7.cleanVisibility = "visible";
    } else {
        moduleData$7.cleanVisibility = "gone";
    }
    let inputAmount = parseFloatOrDefault(text);
    if (!isInvalidString(moduleData$7.available)) {
        if (changeType == 1) {
            total = inputAmount + totalCouponCount;
        } else {
            total = inputAmount;
        }
        if (total > 0 && inputAmount <= parseFloat(moduleData$7.available)) {
            changeButtonStatus(true);
            moduleData$7.editBorderColor = "@color/KBaseColorInputBackground";
            moduleData$7.inputErrorVisibility = "gone";
        } else {
            changeButtonStatus(false);
            if (total == 0) {
                moduleData$7.editBorderColor = "@color/KBaseColorInputBackground";
                moduleData$7.inputErrorVisibility = "gone";
            } else {
                moduleData$7.editBorderColor = "@color/kColorPriceRed";
                moduleData$7.inputErrorMsg = changeType == 1 ? $i18n.n_bot_detail_error_exceed_max_transfer_out : $i18n.n_bot_detail_error_exceed_max_extraction_margin;
                moduleData$7.inputErrorVisibility = "visible";
            }
        }
    } else {
        changeButtonStatus(false);
        moduleData$7.editBorderColor = "@color/KBaseColorInputBackground";
        moduleData$7.inputErrorVisibility = "gone";
    }
    refreshTotalInvest();
    refreshMarginExpect();
};

function changeButtonStatus(enable) {
    buttonEnable = enable;
    if (buttonEnable == true) {
        moduleData$7.bottomBgColor = "@color/kColorMajorTheme100";
        moduleData$7.bottomTextColor = "@color/kColorWhiteText";
    } else {
        moduleData$7.bottomBgColor = "@color/eColorInputFillDisabled";
        moduleData$7.bottomTextColor = "@color/kColorThreeLevelText";
    }
}

moduleEvent$7.onFocusChange = async function(key, isFocus) {
    console.log(`botAdjustMarginPop.js  onFocusChange key = ${key},isFocus = ${isFocus}`);
};

moduleEvent$7.allIn = async function() {
    console.log(`botAdjustMarginPop.js  allIn`);
    if (!isInvalidString(moduleData$7.available)) {
        moduleData$7.inputNum = moduleData$7.available;
    }
};

moduleEvent$7.seekBarValueChange = async function(progress) {
    console.log(`botAdjustMarginPop.js seekBarValueChange progress: ${progress} moduleData.progress: ${moduleData$7.progress}`);
    if (progress == 0) {
        moduleData$7.inputNum = "";
    } else if (null != marginGet && Object.getOwnPropertyNames(marginGet).length > 0) {
        moduleData$7.inputNum = format(parseFloat(changeType == 1 ? marginGet.inAmount : marginGet.outAmount) * progress / 100, 4);
    }
};

async function requestMarginAvailable() {
    let data = await sendRequest("v1/gridstrategy/strategy/margin-get?strategyId=" + strategyId);
    data = handleSpotResponse(data, false);
    if (!data || data == null) {
        if (null == marginGet || Object.getOwnPropertyNames(marginGet).length == 0) {
            setTimeout((async function() {
                if (moduleData$7.popShow == "true") {
                    requestMarginAvailable();
                }
            }), 1e3);
        }
        return;
    }
    marginGet = data;
    moduleData$7.available = format(changeType == 1 ? marginGet.inAmount : marginGet.outAmount, 4);
    moduleData$7.availableDisplay = thousandsFormatter(moduleData$7.available) + " USDT";
    getPricePrecision(marginGet);
    moduleData$7.curPrice = getPriceString(marginGet.curPrice, pricePrecision) + " USDT";
    moduleData$7.extractionMsg = isNaN(parseFloat(marginGet.trailFundBalance)) || parseFloat(marginGet.trailFundBalance) <= 0 ? $i18n.n_bot_detail_extraction_margin_tips : $i18n.$intercept.n_bot_detail_extraction_remain_experience_tips(marginGet.trailFundBalance);
    setMaxCouponOnce(marginGet.maxCouponOnce);
}

function getPricePrecision(respData) {
    if (respData && respData.hasOwnProperty("symbol")) {
        let currentContractInfo = getModelByContractShortType(respData.symbol);
        pricePrecision = getPriceTickPrecision(currentContractInfo);
    } else if (!isInvalidString(symbolData.currentSymbol)) {
        let currentContractInfo = getModelByContractShortType(symbolData.currentSymbol);
        pricePrecision = getPriceTickPrecision(currentContractInfo);
    }
}

async function requestMarginChange() {
    var params = {
        strategyId: strategyId,
        changeType: changeType,
        amount: parseFloatOrDefault(moduleData$7.inputNum) > 0 ? moduleData$7.inputNum : "0"
    };
    if (changeType == 1 && totalCouponCount > 0) {
        params["couponAmount"] = totalCouponCount;
        params["coupons"] = JSON.parse(getExperienceParams());
    }
    showLoading(true);
    let header = {
        "Content-Type": "application/json"
    };
    let response = await sendRequest("v1/gridstrategy/strategy/margin-change", params, 1, 0, header = header);
    let data = handleSpotResponse(response, true);
    showLoading(false);
    if (data == null) {
        if (changeType == 1) {
            moduleData$7.inputNum = "";
            moduleData$7.progress = 0;
            resetData();
            requestMarginAvailable();
        }
    } else {
        if (data) {
            if (changeType == 1) {
                showToast($i18n.n_bot_detail_toast_input_margin_success);
                resetData();
            } else {
                showToast($i18n.n_bot_detail_toast_output_margin_success);
            }
        } else {
            changeType == 1 ? showToast($i18n.n_bot_detail_toast_input_margin_fail) : showToast($i18n.n_bot_detail_toast_output_margin_fail);
        }
        popDismiss();
        if (adjustFinishCallBack != null) {
            adjustFinishCallBack();
        }
    }
}

async function refreshAdjustMarginInfo(respData) {
    if (respData != null) {
        getPricePrecision(respData);
        if (!isInvalidString(respData.liquidationPrice)) {
            moduleData$7.curLiquidationPrice = getPriceString(respData.liquidationPrice, pricePrecision) + " USDT";
        } else {
            moduleData$7.curLiquidationPrice = "-- USDT";
        }
        moduleData$7.curPrice = getPriceString(respData.marketPrice, pricePrecision) + " USDT";
    }
}

async function refreshMarginExpect() {
    let inputAmount = parseFloatOrDefault(moduleData$7.inputNum);
    let total = 0;
    if (changeType == 1) {
        total = inputAmount + totalCouponCount;
    } else {
        total = inputAmount;
    }
    if (total == 0) {
        moduleData$7.bottomLiquidationPrice = "-- USDT";
    } else {
        var params = {
            strategyId: strategyId,
            changeType: changeType,
            amount: `${total}`
        };
        let data = await sendRequest("v1/gridstrategy/strategy/margin-expect", params);
        data = handleSpotResponse(data, false);
        if (data != null) {
            console.log(`botAdjustMarginPop.js refreshMarginExpect data.changeType: ${data.changeType} data.amount: ${data.amount} moduleData.inputNum: ${moduleData$7.inputNum} pricePrecision: ${pricePrecision}`);
            if (data.changeType == changeType && data.amount == total) {
                if (isInvalidString(data.liquidationPrice)) {
                    moduleData$7.bottomLiquidationPrice = "-- USDT";
                } else {
                    moduleData$7.bottomLiquidationPrice = getPriceString(data.liquidationPrice, pricePrecision) + " USDT";
                }
            }
        }
    }
}

function remindClick$1(type) {
    console.log(`remindClick type = ${type}`);
    switch (type) {
      case "coupon":
        popUpTwoContentOfOneButton($i18n.n_coupon_used_rules, $i18n.n_bot_detail_coupon_use_rules_desc, $i18n.n_bot_detail_coupon_use_rules_desc3);
        break;
    }
}

async function couponClick() {
    console.log(`couponClick`);
    popUpContentOfCoupon();
}

async function couponSelect() {
    console.log(`botAdjustMarginPop.js couponSelect`);
    moduleEvent$7.onTextChange("1", moduleData$7.inputNum);
}

async function refreshTotalInvest() {
    if (changeType == 1) {
        let total = 0;
        if (isInvalidString(moduleData$7.inputNum) || isNaN(parseFloat(moduleData$7.inputNum))) {
            total = totalCouponCount;
        } else {
            total = parseFloat(moduleData$7.inputNum) + totalCouponCount;
        }
        moduleData$7.totalInvestDisplay = $i18n.$intercept.n_bot_detail_total_investment_tips(`${total}`);
        moduleData$7.totalInvestVisibility = total > 0 ? "visible" : "gone";
    } else {
        moduleData$7.totalInvestVisibility = "gone";
    }
}

moduleEvent$7.couponClick = couponClick;

moduleEvent$7.remindClick = remindClick$1;

moduleEvent$7.tabClicked = tabClicked;

moduleEvent$7.cleanClick = cleanClick;

moduleEvent$7.confirmClick = confirmClick;

moduleEvent$7.popDismiss = popDismiss;

var editFinishCallBack = null;

async function start$6() {}

function defaultData$6() {
    var data = {
        visibility: "gone",
        runningBottomVisibility: "gone",
        stopBottomVisibility: "gone",
        morePopShow: "false",
        editPopShow: "false",
        editInfo: {
            lastPriceTitle: $i18n.$intercept.n_contract_last_price_unit("USDT"),
            lastPrice: "",
            lastPriceDisplay: "",
            priceRangeTitle: `${$i18n.n_trade_bot_title_price_range}(USDT)`,
            priceRangeDisplay: "",
            profitRateDisplay: "",
            takeProfitPriceTitle: $i18n.n_grid_trade_zhiying,
            takeProfitPrice: "",
            takeProfitPriceType: "1",
            takeProfitPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
            takeProfitPriceErrorMsg: "",
            takeProfitPriceErrorVisibility: "gone",
            takeProfitPriceBorderWidth: "0",
            stopLossPriceTitle: $i18n.n_grid_trade_zhisun,
            stopLossPrice: "",
            stopLossPriceType: "1",
            stopLossPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
            stopLossPriceErrorMsg: "",
            stopLossPriceErrorVisibility: "gone",
            stopLossPriceBorderWidth: "0",
            triggerPriceVisibility: "visible",
            triggerPrice: "",
            triggerPriceType: "1",
            triggerPriceTypeDisplay: $i18n.n_contract_grid_create_newest_price_short,
            triggerPriceErrorMsg: "",
            triggerPriceErrorVisibility: "gone",
            triggerPriceBorderWidth: "0",
            bottomBgColor: "@color/eColorInputFillDisabled",
            bottomTitleColor: "@color/kColorThreeLevelText",
            bottomEnable: false
        },
        stopPopShow: "false",
        showBotTitle: $i18n.n_contract_grid_create_show_in_ranking,
        showBotSrc: "@drawable/edge_engine_common_switch_close",
        precision: 4
    };
    return data;
}

const {moduleData: moduleData$6, moduleEvent: moduleEvent$6} = moduleDefine("botDetailBottom", start$6, defaultData$6);

function setEditFinishCallBack(callback) {
    editFinishCallBack = callback;
}

async function refreshInfo$1() {
    const info = strategyInfo;
    moduleData$6.precision = getPriceTickPrecision(getModelByContractShortType(info.symbol));
    if (getStrategyRunningStatus(info.status) == true) {
        moduleData$6.runningBottomVisibility = "visible";
        moduleData$6.stopBottomVisibility = "gone";
    } else {
        moduleData$6.runningBottomVisibility = "gone";
        moduleData$6.stopBottomVisibility = "visible";
    }
    if (info.status == 1) {
        moduleData$6.editInfo.triggerPriceVisibility = "visible";
    } else {
        moduleData$6.editInfo.triggerPriceVisibility = "gone";
    }
    if (info.hideFlag == 1) {
        moduleData$6.showBotSrc = "@drawable/edge_engine_common_switch_open";
        moduleData$6.showBotTitle = $i18n.n_contract_grid_create_hide_in_ranking;
    } else {
        moduleData$6.showBotSrc = "@drawable/edge_engine_common_switch_close";
        moduleData$6.showBotTitle = $i18n.n_contract_grid_create_show_in_ranking;
    }
    moduleData$6.visibility = "visible";
}

function moreClick() {
    console.log(`botDetailBottom.js  moreClick`);
    moduleData$6.morePopShow = "true";
}

function morePopClose() {
    moduleData$6.morePopShow = "false";
}

async function editClick() {
    console.log(`botDetailBottom.js  moreClick`);
    moduleData$6.editInfo.lastPrice = symbolData.currentSymbolPrice;
    moduleData$6.editInfo.lastPriceDisplay = formatDecimal(symbolData.currentSymbolPrice, moduleData$6.precision);
    let info = strategyInfo;
    moduleData$6.editInfo.priceRangeDisplay = `${formatDecimal(info.minPrice, moduleData$6.precision)} ~ ${formatDecimal(info.maxPrice, moduleData$6.precision)}`;
    let rate1 = multiply(info.totalProfitRate, 100);
    let rate2 = formatDecimal(rate1, 2, false);
    let sign = "";
    moduleData$6.editInfo.profitRateColor = "@color/kColorPrimaryText";
    if (parseFloat(info.totalProfitRate) > 0) {
        moduleData$6.editInfo.profitRateColor = getUpDownColor();
        sign = "+";
    } else if (parseFloat(info.totalProfitRate) < 0) {
        moduleData$6.editInfo.profitRateColor = getUpDownColor(false);
        sign = "";
    }
    moduleData$6.editInfo.profitRateDisplay = `${sign}${rate2}%`;
    switch (parseInt(info.trendType)) {
      case 1:
        moduleData$6.editInfo.takeProfitPriceTitle = $i18n.n_grid_trade_zhiying;
        moduleData$6.editInfo.stopLossPriceTitle = $i18n.n_grid_trade_zhisun;
        break;

      case 2:
        moduleData$6.editInfo.takeProfitPriceTitle = $i18n.n_grid_trade_zhiying;
        moduleData$6.editInfo.stopLossPriceTitle = $i18n.n_grid_trade_zhisun;
        break;

      case 0:
        moduleData$6.editInfo.takeProfitPriceTitle = $i18n.n_bot_edit_stop_price_max;
        moduleData$6.editInfo.stopLossPriceTitle = $i18n.n_bot_edit_stop_price_min;
        break;
    }
    moduleData$6.editInfo.takeProfitPrice = notNull(info.takeProfitPrice) ? info.takeProfitPrice : "";
    moduleData$6.editInfo.takeProfitPriceType = info.takeProfitPriceType;
    let takeProfitPriceTypeDisplay = getOptionDisplayItem(info.takeProfitPriceType);
    moduleData$6.editInfo.takeProfitPriceTypeDisplay = String(takeProfitPriceTypeDisplay);
    moduleData$6.editInfo.takeProfitPriceErrorVisibility = "gone";
    moduleData$6.editInfo.takeProfitPriceBorderWidth = "0";
    moduleData$6.editInfo.stopLossPrice = notNull(info.stopLossPrice) ? info.stopLossPrice : "";
    moduleData$6.editInfo.stopLossPriceType = info.stopLossPriceType;
    let stopLossPriceTypeDisplay = getOptionDisplayItem(info.stopLossPriceType);
    moduleData$6.editInfo.stopLossPriceTypeDisplay = stopLossPriceTypeDisplay;
    moduleData$6.editInfo.stopLossPriceErrorVisibility = "gone";
    moduleData$6.editInfo.stopLossPriceBorderWidth = "0";
    moduleData$6.editInfo.triggerPrice = notNull(info.triggerPrice) ? info.triggerPrice : "";
    moduleData$6.editInfo.triggerPriceType = info.triggerPriceType;
    let triggerPriceTypeDisplay = getOptionDisplayItem(info.triggerPriceType);
    moduleData$6.editInfo.triggerPriceTypeDisplay = triggerPriceTypeDisplay;
    moduleData$6.editInfo.triggerPriceErrorVisibility = "gone";
    moduleData$6.editInfo.triggerPriceBorderWidth = "0";
    checkAllParams();
    moduleData$6.editPopShow = "true";
    moduleData$6.morePopShow = "false";
    await analytics$1("tradingbot_editparameters_app");
}

function updateMarketPrice() {
    moduleData$6.editInfo.lastPrice = symbolData.currentSymbolPrice;
    moduleData$6.editInfo.lastPriceDisplay = thousandsFormatter(symbolData.currentSymbolPrice);
}

function editConfirmClick() {
    if (moduleData$6.editInfo.bottomEnable == false) {
        return;
    }
    requestEditParam();
}

function editPopClose() {
    moduleData$6.editPopShow = "false";
}

async function adjustMarginClick() {
    console.log(`botDetailBottom.js  adjustMarginClick`);
    popUp();
    await analytics$1("tradingbot_adjustmargin_app");
}

async function stopClick() {
    console.log(`botDetailBottom.js  stopClick`);
    moduleData$6.stopPopShow = "true";
    await analytics$1("tradingbot_terminate_app");
}

function stopPopClose() {
    moduleData$6.stopPopShow = "false";
}

async function stopConfirmClick() {
    await requestSubmitStop();
}

function stopSuccess() {
    moduleData$6.stopPopShow = "false";
    if (parseInt(commonData.OS) == 0) {
        iOSCannotGoBackCurrentPage();
    } else {
        $nativeAPI.containerBack();
    }
    openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/trade/botCompletion?fromType=${moduleData$6.fromType}&strategyId=${strategyId}`);
}

async function copyClick$1() {
    console.log(`botDetailBottom.js  stopClick`);
    moduleData$6.morePopShow = "false";
    strategyInfo.userType = 1;
    strategyInfo.strategyId = strategyInfo.id;
    await setCopyParams$1(strategyInfo, 2, 4);
    await analytics$1("tradingbot_copyparameters_app");
}

async function showBotClick() {
    console.log(`botDetailBottom.js  showBotClick`);
    await requestShowSwitch();
    await analytics$1("tradingbot_showbots_app");
}

async function requestShowSwitch() {
    showLoading(true);
    let hideFlag = strategyInfo.hideFlag;
    var params = {
        strategyId: strategyId,
        hideFlag: hideFlag == 1 ? 2 : 1
    };
    var header = {
        "Content-Type": "application/json"
    };
    var respData = await sendRequest("v1/gridstrategy/rank-show-switch", params = params, 1, 0, header = header);
    respData = handleSpotResponse(respData, false);
    showLoading(false);
    if (respData != null && respData == true) {
        if (hideFlag == 1) {
            strategyInfo.hideFlag = 2;
            moduleData$6.showBotSrc = "@drawable/edge_engine_common_switch_close";
            showToast($i18n.n_bot_detail_toast_hide_in_ranking_success);
            moduleData$6.showBotTitle = $i18n.n_contract_grid_create_show_in_ranking;
        } else {
            strategyInfo.hideFlag = 1;
            moduleData$6.showBotSrc = "@drawable/edge_engine_common_switch_open";
            moduleData$6.showBotTitle = $i18n.n_contract_grid_create_hide_in_ranking;
            showToast($i18n.n_bot_detail_toast_show_in_ranking_success);
        }
    } else {
        showToast($i18n.n_bot_detail_toast_handle_fail);
    }
}

async function requestSubmitStop() {
    showLoading(true);
    var params = {
        strategyId: strategyId
    };
    var header = {
        "Content-Type": "application/json"
    };
    var respData = await sendRequest("v1/gridstrategy/submit-stop", params = params, 1, 0, header = header);
    respData = handleSpotResponse(respData, false);
    console.log(`requestSubmitStop respData == ${respData}`);
    showLoading(false);
    if (respData != null && respData == true) {
        showToast($i18n.n_bot_detail_toast_stop_success);
        stopSuccess();
    } else {
        showToast($i18n.n_bot_detail_toast_stop_fail);
    }
}

async function requestEditParam() {
    showLoading(true);
    var params = {
        strategyId: strategyId,
        triggerPrice: String(moduleData$6.editInfo.triggerPrice),
        triggerPriceType: parseInt(moduleData$6.editInfo.triggerPriceType),
        takeProfitPrice: String(moduleData$6.editInfo.takeProfitPrice),
        takeProfitPriceType: parseInt(moduleData$6.editInfo.takeProfitPriceType),
        stopLossPrice: String(moduleData$6.editInfo.stopLossPrice),
        stopLossPriceType: parseInt(moduleData$6.editInfo.stopLossPriceType)
    };
    var header = {
        "Content-Type": "application/json"
    };
    var respData = await sendRequest("v1/gridstrategy/edit-param", params = params, 1, 0, header = header);
    respData = handleSpotResponse(respData, true);
    showLoading(false);
    if (respData != null) {
        moduleData$6.editPopShow = "false";
        showToast($i18n.n_bot_detail_toast_handle_success);
        if (editFinishCallBack != null) {
            editFinishCallBack();
        }
    }
}

function onTextChange(type, text) {
    console.log(`onTextChange type = ${type}, text = ${text}`);
    checkAllParams();
}

function onFocusChange(type, hasFocus) {
    console.log(`onFocusChange type = ${type}, hasFocus = ${hasFocus}`);
    moduleData$6.precision = getPriceTickPrecision(getModelByContractShortType(symbolData.currentSymbol));
}

function showOptionPop(type) {
    $nativeAPI.closeKeyboard();
    console.log(`botDetailBottom.js  showOptionPop = ${type}`);
    switch (type) {
      case "triggerPrice":
        showOptionPop$3(type, moduleData$6.editInfo.triggerPriceType, 2, optionClick);
        break;

      case "takeProfitPrice":
        showOptionPop$3(type, moduleData$6.editInfo.takeProfitPriceType, 2, optionClick);
        break;

      case "stopLossPrice":
        showOptionPop$3(type, moduleData$6.editInfo.stopLossPriceType, 2, optionClick);
        break;
    }
}

function optionClick(popType, element) {
    switch (popType) {
      case "triggerPrice":
        moduleData$6.editInfo.triggerPriceType = element.param;
        moduleData$6.editInfo.triggerPriceTypeDisplay = element.titleDisplay;
        break;

      case "takeProfitPrice":
        moduleData$6.editInfo.takeProfitPriceType = element.param;
        moduleData$6.editInfo.takeProfitPriceTypeDisplay = element.titleDisplay;
        break;

      case "stopLossPrice":
        moduleData$6.editInfo.stopLossPriceType = element.param;
        moduleData$6.editInfo.stopLossPriceTypeDisplay = element.titleDisplay;
        break;
    }
    checkAllParams();
}

function checkAllParams() {
    var triggerPriceError = checkTriggerPrice();
    var tpslPriceError = checkTpslPrice();
    let info = strategyInfo;
    var triggerPriceDidChange = false;
    if (String(info.triggerPrice) != String(moduleData$6.editInfo.triggerPrice) || info.triggerPriceType != moduleData$6.editInfo.triggerPriceType && notNull(moduleData$6.editInfo.triggerPrice)) {
        triggerPriceDidChange = true;
    }
    var takeProfitPriceDidChange = false;
    if (String(info.takeProfitPrice) != String(moduleData$6.editInfo.takeProfitPrice) || info.takeProfitPriceType != moduleData$6.editInfo.takeProfitPriceType && notNull(moduleData$6.editInfo.takeProfitPrice)) {
        takeProfitPriceDidChange = true;
    }
    var stopLossPriceDidChange = false;
    if (String(info.stopLossPrice) != String(moduleData$6.editInfo.stopLossPrice) || info.stopLossPriceType != moduleData$6.editInfo.stopLossPriceType && notNull(moduleData$6.editInfo.stopLossPrice)) {
        stopLossPriceDidChange = true;
    }
    if (!triggerPriceError && !tpslPriceError && (triggerPriceDidChange || takeProfitPriceDidChange || stopLossPriceDidChange)) {
        moduleData$6.editInfo.bottomBgColor = "@color/kColorMajorTheme100";
        moduleData$6.editInfo.bottomTitleColor = "@color/KBaseTextColor";
        moduleData$6.editInfo.bottomEnable = true;
    } else {
        moduleData$6.editInfo.bottomBgColor = "@color/eColorInputFillDisabled";
        moduleData$6.editInfo.bottomTitleColor = "@color/kColorThreeLevelText";
        moduleData$6.editInfo.bottomEnable = false;
    }
}

function checkTriggerPrice() {
    var triggerPriceError = false;
    if (notNull(moduleData$6.editInfo.triggerPrice)) {
        if (parseFloat(moduleData$6.editInfo.triggerPrice) <= 0) {
            moduleData$6.editInfo.triggerPriceErrorMsg = $i18n.n_bot_detail_error_trigger_price_gt_zero;
            moduleData$6.editInfo.triggerPriceErrorVisibility = "visible";
            moduleData$6.editInfo.triggerPriceBorderWidth = "1";
            triggerPriceError = true;
        } else {
            moduleData$6.editInfo.triggerPriceErrorVisibility = "gone";
            moduleData$6.editInfo.triggerPriceBorderWidth = "0";
        }
    } else {
        moduleData$6.editInfo.triggerPriceErrorVisibility = "gone";
        moduleData$6.editInfo.triggerPriceBorderWidth = "0";
    }
    return triggerPriceError;
}

function checkTpslPrice() {
    let info = strategyInfo;
    var tpslPriceError = false;
    if (parseInt(info.trendType) == "1") {
        if (notNull(moduleData$6.editInfo.takeProfitPrice)) {
            if (parseFloat(moduleData$6.editInfo.takeProfitPrice) <= parseFloat(symbolData.currentSymbolPrice)) {
                moduleData$6.editInfo.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_profit_great_then_last_price;
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "visible";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$6.editInfo.takeProfitPrice) <= parseFloat(info.maxPrice)) {
                moduleData$6.editInfo.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_profit_great_then_max_price;
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "visible";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "gone";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$6.editInfo.takeProfitPriceErrorVisibility = "gone";
            moduleData$6.editInfo.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$6.editInfo.stopLossPrice)) {
            if (parseFloat(moduleData$6.editInfo.stopLossPrice) >= parseFloat(symbolData.currentSymbolPrice)) {
                moduleData$6.editInfo.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_loss_less_then_last_price;
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "visible";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$6.editInfo.stopLossPrice) >= parseFloat(info.minPrice)) {
                moduleData$6.editInfo.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_buy_stop_loss_less_then_min_price;
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "visible";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "gone";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$6.editInfo.stopLossPriceErrorVisibility = "gone";
            moduleData$6.editInfo.stopLossPriceBorderWidth = "0";
        }
    } else if (parseInt(info.trendType) == 2) {
        if (notNull(moduleData$6.editInfo.takeProfitPrice)) {
            if (parseFloat(moduleData$6.editInfo.takeProfitPrice) >= parseFloat(symbolData.currentSymbolPrice)) {
                moduleData$6.editInfo.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_profit_less_then_last_price;
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "visible";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$6.editInfo.takeProfitPrice) >= parseFloat(info.minPrice)) {
                moduleData$6.editInfo.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_profit_less_then_min_price;
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "visible";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "gone";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$6.editInfo.takeProfitPriceErrorVisibility = "gone";
            moduleData$6.editInfo.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$6.editInfo.stopLossPrice)) {
            if (parseFloat(moduleData$6.editInfo.stopLossPrice) <= parseFloat(symbolData.currentSymbolPrice)) {
                moduleData$6.editInfo.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_loss_great_then_last_price;
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "visible";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$6.editInfo.stopLossPrice) <= parseFloat(info.maxPrice)) {
                moduleData$6.editInfo.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_sell_stop_loss_great_then_max_price;
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "visible";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "gone";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$6.editInfo.stopLossPriceErrorVisibility = "gone";
            moduleData$6.editInfo.stopLossPriceBorderWidth = "0";
        }
    } else {
        if (notNull(moduleData$6.editInfo.takeProfitPrice)) {
            if (parseFloat(moduleData$6.editInfo.takeProfitPrice) <= parseFloat(info.maxPrice)) {
                moduleData$6.editInfo.takeProfitPriceErrorMsg = $i18n.n_bot_detail_error_stop_top_great_then_max_price;
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "visible";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$6.editInfo.takeProfitPrice) <= parseFloat(symbolData.currentSymbolPrice) || notNull(moduleData$6.editInfo.triggerPrice) && parseFloat(moduleData$6.editInfo.takeProfitPrice) <= parseFloat(moduleData$6.editInfo.triggerPrice)) {
                var maxPrice = parseFloat(symbolData.currentSymbolPrice);
                if (notNull(moduleData$6.editInfo.triggerPrice) && maxPrice < parseFloat(moduleData$6.editInfo.triggerPrice)) {
                    maxPrice = parseFloat(moduleData$6.editInfo.triggerPrice);
                }
                moduleData$6.editInfo.takeProfitPriceErrorMsg = $i18n.$intercept.n_bot_detail_error_stop_top_price_great_then(`${maxPrice} USDT`);
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "visible";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$6.editInfo.takeProfitPriceErrorVisibility = "gone";
                moduleData$6.editInfo.takeProfitPriceBorderWidth = "0";
            }
        } else {
            moduleData$6.editInfo.takeProfitPriceErrorVisibility = "gone";
            moduleData$6.editInfo.takeProfitPriceBorderWidth = "0";
        }
        if (notNull(moduleData$6.editInfo.stopLossPrice)) {
            if (parseFloat(moduleData$6.editInfo.stopLossPrice) >= parseFloat(info.minPrice)) {
                moduleData$6.editInfo.stopLossPriceErrorMsg = $i18n.n_bot_detail_error_stop_bottom_less_then_min_price;
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "visible";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else if (parseFloat(moduleData$6.editInfo.stopLossPrice) >= parseFloat(symbolData.currentSymbolPrice) || notNull(moduleData$6.editInfo.triggerPrice) && parseFloat(moduleData$6.editInfo.stopLossPrice) >= parseFloat(moduleData$6.editInfo.triggerPrice)) {
                var minPrice = parseFloat(symbolData.currentSymbolPrice);
                if (notNull(moduleData$6.editInfo.triggerPrice) && minPrice > parseFloat(moduleData$6.editInfo.triggerPrice)) {
                    minPrice = parseFloat(moduleData$6.editInfo.triggerPrice);
                }
                moduleData$6.editInfo.stopLossPriceErrorMsg = $i18n.$intercept.n_bot_detail_error_stop_bottom_price_less_then(`${minPrice} USDT`);
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "visible";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "1";
                tpslPriceError = true;
            } else {
                moduleData$6.editInfo.stopLossPriceErrorVisibility = "gone";
                moduleData$6.editInfo.stopLossPriceBorderWidth = "0";
            }
        } else {
            moduleData$6.editInfo.stopLossPriceErrorVisibility = "gone";
            moduleData$6.editInfo.stopLossPriceBorderWidth = "0";
        }
    }
    return tpslPriceError;
}

moduleEvent$6.moreClick = moreClick;

moduleEvent$6.morePopClose = morePopClose;

moduleEvent$6.adjustMarginClick = adjustMarginClick;

moduleEvent$6.editClick = editClick;

moduleEvent$6.editPopClose = editPopClose;

moduleEvent$6.stopClick = stopClick;

moduleEvent$6.stopPopClose = stopPopClose;

moduleEvent$6.copyClick = copyClick$1;

moduleEvent$6.showBotClick = showBotClick;

moduleEvent$6.showOptionPop = showOptionPop;

moduleEvent$6.optionClick = optionClick;

moduleEvent$6.onTextChange = onTextChange;

moduleEvent$6.onFocusChange = onFocusChange;

moduleEvent$6.stopConfirmClick = stopConfirmClick;

moduleEvent$6.editConfirmClick = editConfirmClick;

async function start$5() {}

function defaultData$5() {
    var data = {
        precision: 4
    };
    return data;
}

const {moduleData: moduleData$5, moduleEvent: moduleEvent$5} = moduleDefine("botDetailParam", start$5, defaultData$5);

async function refreshInfo() {
    console.log(`botDetailParam.js ==============> refreshInfo`);
    const params = strategyInfo;
    moduleData$5.precision = getPriceTickPrecision(getModelByContractShortType(params.symbol));
    var paramsList = [];
    var outRangeVisibility = "gone";
    if (parseInt(params.status) == 4 && params.exceedPriceFlag) {
        outRangeVisibility = "visible";
    }
    var priceRangeItem = {
        cellType: "2",
        title: `${$i18n.n_trade_bot_title_price_range}(USDT)`,
        content: `${formatDecimal(params.minPrice, moduleData$5.precision)} ~ ${formatDecimal(params.maxPrice, moduleData$5.precision)}`,
        remindType: "priceRange",
        remindPointVisibility: outRangeVisibility
    };
    paramsList.push(priceRangeItem);
    var numberItem = {
        cellType: "1",
        title: $i18n.n_bot_confirm_type_and_number,
        content: `${params.runType == "1" ? $i18n.n_grid_trade_dengbi : $i18n.n_grid_trade_dengcha} | ${params.gridNum}`
    };
    paramsList.push(numberItem);
    var singleNumberItem = {
        cellType: "1",
        title: `${$i18n.n_bot_detail_single_box_quantity}(${symbolData.currentSymbol.split("-")[0]})`,
        content: params.perGridAmount
    };
    paramsList.push(singleNumberItem);
    var singleRateItem = {
        cellType: "1",
        title: $i18n.n_trade_bot_title_profit_grid,
        content: params.runType == "1" ? `${formatDecimal(multiply(params.minGridProfitRate ? params.minGridProfitRate : "0", 100), 2, false)}%` : `${formatDecimal(multiply(params.minGridProfitRate ? params.minGridProfitRate : "0", 100), 2, false)}% - ${formatDecimal(multiply(params.maxGridProfitRate ? params.maxGridProfitRate : "0", 100), 2, false)}%`
    };
    paramsList.push(singleRateItem);
    var line1 = {
        cellType: "3"
    };
    paramsList.push(line1);
    var botIDItem = {
        cellType: "1",
        title: $i18n.n_bot_detail_parameter_bot_id,
        content: String(params.id)
    };
    paramsList.push(botIDItem);
    var markCode = "--";
    if (params.hasOwnProperty("markCode")) {
        markCode = params.markCode;
    }
    var shareCodeItem = {
        cellType: "4",
        title: $i18n.n_trade_bot_share_code,
        content: markCode
    };
    paramsList.push(shareCodeItem);
    var shareQuotedTimes = "--";
    if (params.hasOwnProperty("shareQuotedTimes")) {
        shareQuotedTimes = params.shareQuotedTimes;
    }
    var shareQuotedTimesItem = {
        cellType: "5",
        title: $i18n.n_trade_referral_code_usage_count,
        content: String(shareQuotedTimes)
    };
    paramsList.push(shareQuotedTimesItem);
    var triggerItem = {
        cellType: "1",
        title: `${$i18n.n_contract_grid_create_trigger_price}(USDT)`,
        content: notNull(params.triggerPrice) ? `${formatDecimal(params.triggerPrice, moduleData$5.precision)}` : "--"
    };
    paramsList.push(triggerItem);
    if (params.trendType == 0) {
        var tpItem = {
            cellType: "1",
            title: `${$i18n.n_bot_edit_stop_price_max}(USDT)`,
            content: notNull(params.takeProfitPrice) ? `${formatDecimal(params.takeProfitPrice, moduleData$5.precision)}` : "--"
        };
        paramsList.push(tpItem);
    } else {
        var tpItem = {
            cellType: "1",
            title: `${$i18n.n_grid_trade_zhiying}(USDT)`,
            content: notNull(params.takeProfitPrice) ? `${formatDecimal(params.takeProfitPrice, moduleData$5.precision)}` : "--"
        };
        paramsList.push(tpItem);
    }
    if (params.trendType == 0) {
        var slItem = {
            cellType: "1",
            title: `${$i18n.n_bot_edit_stop_price_min}(USDT)`,
            content: notNull(params.stopLossPrice) ? `${formatDecimal(params.stopLossPrice, moduleData$5.precision)}` : "--"
        };
        paramsList.push(slItem);
    } else {
        var slItem = {
            cellType: "1",
            title: `${$i18n.n_grid_trade_zhisun}(USDT)`,
            content: notNull(params.stopLossPrice) ? `${formatDecimal(params.stopLossPrice, moduleData$5.precision)}` : "--"
        };
        paramsList.push(slItem);
    }
    moduleData$5.paramsList = paramsList;
}

async function remindClick(type) {
    console.log(`remindClick type = ${type}`);
    switch (type) {
      case "priceRange":
        popUpContentOfOneButton("", $i18n.n_bot_detail_out_range_warning);
        break;
    }
}

async function copyClick() {
    console.log(`copyClick `);
    if (strategyInfo.hasOwnProperty("markCode")) {
        copyText(strategyInfo.markCode, $i18n.n_trade_bot_share_code, $i18n.n_replicated);
    }
}

async function bottomLineClick(type) {
    console.log(`bottomLineClick type = ${type}`);
    switch (type) {
      case "1":
        popUpContentOfOneButton("", $i18n.n_trade_referral_code_usage_count_tips);
        break;
    }
}

moduleEvent$5.remindClick = remindClick;

moduleEvent$5.copyClick = copyClick;

moduleEvent$5.bottomLineClick = bottomLineClick;

var timerObject;

async function start$4() {}

function defaultData$4() {
    return {
        tabInfo: "",
        pageStatus: -1,
        isLoading: true,
        isRefresh: false
    };
}

const {moduleData: moduleData$4, moduleEvent: moduleEvent$4} = moduleDefine("botDetailPage", start$4, defaultData$4);

moduleEvent$4.onCreate = async function() {
    console.log(`botDetailPage.js---\x3e>> onCreate ${symbolData.currentSymbol}`);
    setEditFinishCallBack(editParamsFinish);
    setAdjustFinishCallBack(adjustMarginFinish);
    await analytics$1("tradingbot_detailspageview_app_futures");
};

moduleEvent$4.onStart = async function() {
    console.log(`botDetailPage.js---\x3e>> onStart`);
    startTimer();
    onStart();
    onStart$3();
};

moduleEvent$4.onResume = async function() {
    console.log(`botDetailPage.js---\x3e>> onResume ${symbolData.currentSymbol}`);
};

moduleEvent$4.onPause = async function() {
    console.log(`botDetailPage.js---\x3e>> onPause`);
};

moduleEvent$4.onStop = async function() {
    console.log(`botDetailPage.js---\x3e>> onStop`);
    clearTimer();
};

moduleEvent$4.onBotDetailPullRefresh = async function() {
    console.log(`botDetailPage.js---\x3e>> onBotDetailPullRefresh`);
    moduleData$4.isRefresh = true;
    moduleEvent$4.onStart();
    refreshOperateList();
};

function startTimer() {
    clearTimer();
    timerObject = setInterval(timerCallback, 3e3);
    timerCallback();
}

function clearTimer() {
    if (timerObject != null) {
        clearInterval(timerObject);
        timerObject = null;
    }
}

async function timerCallback() {
    await requestContractInfoData();
    if (getStrategyRunningStatus(strategyInfo.status) == true || moduleData$4.isRefresh == true) {
        requestStrategyInfo();
        requestPositionInfo();
        requestOrderBooks();
    }
    checkEmptyRequest();
}

moduleEvent$4.setPageParams = async function(params) {
    setStrategyId(params.strategyId);
};

moduleEvent$4.changeTabSelectedIndex = async function(index) {
    tabClick(parseInt(index));
};

async function editParamsFinish() {
    requestStrategyInfo();
    refreshOperateList();
    if (getStrategyRunningStatus(strategyInfo.status) == true) {
        tabClick(3);
    } else {
        tabClick(2);
    }
}

async function adjustMarginFinish() {
    refreshOperateList();
}

async function requestStrategyInfo() {
    console.log("requestStrategyInfo");
    var params = {
        strategyId: strategyId
    };
    moduleData$4.isLoading = 1;
    var respData = await sendRequest("v1/gridstrategy/strategy-info", params);
    moduleData$4.isLoading = 0;
    console.log(`botDetailPage.js---\x3e>> requestStrategyInfo respData: ${JSON.stringify(respData)}`);
    respData = handleSpotResponse(respData, moduleData$4.isRefresh);
    if (respData) {
        if (strategyInfo.status == -1 || strategyInfo.status != respData.status) {
            if (getStrategyRunningStatus(respData.status) == true) {
                moduleData$4.tabInfo = `[{"tabTitle":"${$i18n.n_bot_detail_order_overview}","xml":"bot_detail_info","js":"botDetailInfo"},{"tabTitle":"${$i18n.n_bot_detail_pending_order}","xml":"bot_detail_order","js":"botDetailOrder"},{"tabTitle":"${$i18n.n_bot_detail_arbitrage_record}","xml":"bot_detail_record","js":"botDetailRecord"},{"tabTitle":"${$i18n.n_bot_detail_robot_parameters}","xml":"bot_detail_param","js":"botDetailParam"}]`;
            } else {
                moduleData$4.tabInfo = `[{"tabTitle":"${$i18n.n_bot_detail_order_overview}","xml":"bot_detail_info","js":"botDetailInfo"},{"tabTitle":"${$i18n.n_bot_detail_arbitrage_record}","xml":"bot_detail_record","js":"botDetailRecord"},{"tabTitle":"${$i18n.n_bot_detail_robot_parameters}","xml":"bot_detail_param","js":"botDetailParam"}]`;
            }
        }
        moduleData$4.pageStatus = 1;
        setStrategyInfo(respData);
        refreshInfo$3();
        refreshInfo$2();
        refreshInfo$1();
        refreshInfo();
    } else {
        if (strategyInfo.status == -1) {
            moduleData$4.pageStatus = 0;
        }
    }
    moduleData$4.isRefresh = false;
}

async function requestPositionInfo() {
    var params = {
        strategyId: strategyId
    };
    var respData = await sendRequest("v1/gridstrategy/strategy-position", params = params);
    respData = handleSpotResponse(respData, false);
    if (respData != null) {
        symbolData.currentSymbol = respData.symbol;
        let precision = getPriceTickPrecision(getModelByContractShortType(symbolData.currentSymbol));
        respData.marketPrice = formatPriceString(respData.marketPrice, precision);
        symbolData.currentSymbolPrice = respData.marketPrice;
        updatePositionInfo(respData);
        updateMarketPrice();
        refreshAdjustMarginInfo(respData);
    }
}

async function start$3() {}

function defaultData$3() {
    var data = {
        fromType: 0,
        strategyId: "1",
        title: $i18n.n_bot_detail_build_bot_success,
        buttonTitle: $i18n.n_bot_detail_view_bot_detail
    };
    return data;
}

const {moduleData: moduleData$3, moduleEvent: moduleEvent$3} = moduleDefine("botHandleCompletionPage", start$3, defaultData$3);

async function setPageParams(params) {
    moduleData$3.fromType = parseInt(params.fromType);
    moduleData$3.strategyId = params.strategyId;
    if (moduleData$3.fromType == 0 || moduleData$3.fromType == 1) {
        moduleData$3.title = $i18n.n_bot_detail_build_bot_success;
        moduleData$3.buttonTitle = $i18n.n_bot_detail_view_bot_detail;
    } else {
        moduleData$3.title = $i18n.n_bot_detail_stop_bot_success;
        moduleData$3.buttonTitle = $i18n.n_bot_detail_view_history_bot;
    }
}

async function doneClick() {
    if (parseInt(commonData.OS) == 0) {
        iOSCannotGoBackCurrentPage();
    } else {
        $nativeAPI.containerBack();
    }
    if (moduleData$3.fromType == 0 || moduleData$3.fromType == 1) {
        openURL(`${commonData.webUrl}/${commonData.language}/tradingbot/h5/my-strategies?showbar=1&currentType=contract`);
    } else {
        openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/trade/contractBotDetail?strategyId=${moduleData$3.strategyId}`);
    }
}

async function showDetailClick() {
    if (parseInt(commonData.OS) == 0) {
        iOSCannotGoBackCurrentPage();
    } else {
        $nativeAPI.containerBack();
    }
    if (moduleData$3.fromType == 0 || moduleData$3.fromType == 1) {
        openURL(`holigeit://open/v1?login=1&url=ihuobiglobal://m.hbg.com/trade/contractBotDetail?strategyId=${moduleData$3.strategyId}`);
    } else {
        openURL(`${commonData.webUrl}/${commonData.language}/tradingbot/h5/my-strategies?showbar=1&currentTag=terminated&currentType=contract`);
    }
}

moduleEvent$3.doneClick = doneClick;

moduleEvent$3.showDetailClick = showDetailClick;

moduleEvent$3.setPageParams = setPageParams;

var checked = false;

async function start$2() {
    checked = false;
}

function defaultData$2() {
    return {
        icSelect: "@drawable/edge_engine_copytrading_selection_n",
        bgColor: "@color/eColorInputFillDisabled",
        titleColor: "@color/kColorThreeLevelText",
        tipsText: "",
        statusBarConfig: {
            statusBarMode: "true",
            adStatusBarColor: "KBaseColorContentBackground",
            keyBoardMode: "adjustPan"
        },
        navConfig: `{"left":{"icon":"edge_engine_top_bar_back_normal","action":{"type":"back","parameter":""},"text":null},"backgroundColor": "KBaseColorContentBackground", "titleKey":"n_trade_bot_service_disclaimer"}`
    };
}

const {moduleData: moduleData$2, moduleEvent: moduleEvent$2} = moduleDefine("botServiceAgreement", start$2, defaultData$2);

function onCreate(jsonParameters) {
    console.log(`botServiceAgreement onCreate : ${jsonParameters}`);
    checked = false;
    moduleData$2.bgColor = "@color/eColorInputFillDisabled";
    moduleData$2.titleColor = "@color/kColorThreeLevelText";
    moduleData$2.icSelect = "@drawable/edge_engine_copytrading_selection_n";
    let color = "#0173E5";
    let textColor = commonData.colorMode == 1 ? "#8C8C93" : "#565656";
    let clickText1 = `<span style="color:${color}; font-size:14px">${$i18n.n_trade_bot_service_content_highlight_1}</span>`;
    let clickText2 = `<span style="color:${color}; font-size:14px">${$i18n.n_trade_bot_service_content_highlight_2}</span>`;
    let clickText3 = `<span style="color:${color}; font-size:14px">${$i18n.n_trade_bot_service_content_highlight_3}</span>`;
    let firstStr = $i18n.$intercept.n_trade_bot_service_content_1(`<a href="@event.botServiceAgreement.jumpTips1()">${clickText1}</a>`, `<a href="@event.botServiceAgreement.jumpTips2()">${clickText2}</a>`, `<a href="@event.botServiceAgreement.jumpTips3()">${clickText3}</a>`);
    moduleData$2.tipsText = `<span style="color:${textColor}; font-size:14px;">${firstStr}</span>`;
}

async function toggle() {
    checked = !checked;
    if (checked) {
        moduleData$2.bgColor = "@color/kColorMajorTheme100";
        moduleData$2.titleColor = "@color/KBaseTextColor";
        moduleData$2.icSelect = "@drawable/edge_engine_copytrading_selection_s";
    } else {
        moduleData$2.bgColor = "@color/eColorInputFillDisabled";
        moduleData$2.titleColor = "@color/kColorThreeLevelText";
        moduleData$2.icSelect = "@drawable/edge_engine_copytrading_selection_n";
    }
}

async function jumpTips1() {
    let jumpUrl = `${commonData.webUrl}/${commonData.language}/support/84985732851007`;
    openURL(jumpUrl);
}

async function jumpTips2() {
    let jumpUrl = `${commonData.webUrl}/${commonData.language}/support/360000298561`;
    openURL(jumpUrl);
}

async function jumpTips3() {
    let jumpUrl = `${commonData.webUrl}/${commonData.language}/support/360000188081`;
    openURL(jumpUrl);
}

async function signAgreement() {
    if (checked) {
        showLoading(true);
        let sign = await sendRequest("v1/gridstrategy/strategy/sign-agreement", {}, 1, 0, {});
        sign = handleSpotResponse(sign, true);
        showLoading(false);
        if (sign != null) {
            $nativeAPI.containerBack();
        }
    }
}

moduleEvent$2.toggle = toggle;

moduleEvent$2.jumpTips1 = jumpTips1;

moduleEvent$2.jumpTips2 = jumpTips2;

moduleEvent$2.jumpTips3 = jumpTips3;

moduleEvent$2.signAgreement = signAgreement;

moduleEvent$2.onCreate = onCreate;

async function start$1() {}

function defaultData$1() {
    return {
        traderList: [],
        searchInput: "",
        onFocus: true,
        clearInputVis: "gone",
        borderColor: "@color/kColorMajorTheme100"
    };
}

const {moduleData: moduleData$1, moduleEvent: moduleEvent$1} = moduleDefine("botSearch", start$1, defaultData$1);

var searchInput = "";

moduleEvent$1.onStart = async function() {
    console.log("Bryant botSearch.js-- onStart");
    moduleData$1.statusBarConfig = {
        statusBarMode: "true",
        adStatusBarColor: "KBaseColorContentBackground",
        safeBottomTransparent: "true"
    };
    moduleData$1.onFocus = true;
    moduleData$1.borderColor = "@color/kColorMajorTheme100";
};

moduleEvent$1.onCreate = async function() {
    console.log("Bryant botSearch.js-- onCreate");
    moduleData$1.traderList = [];
};

moduleEvent$1.onDestroy = async function() {
    console.log("Bryant botSearch.js-- onDestroy");
    moduleData$1.traderList = [];
};

moduleEvent$1.onReturn = function(parameter) {
    moduleData$1.onFocus = false;
};

moduleEvent$1.textChange = function(parameter) {
    console.log(`textChange -----\x3e  ${parameter}`);
    searchInput = parameter;
    if (searchInput == "") {
        moduleData$1.clearInputVis = "gone";
    } else {
        moduleData$1.clearInputVis = "visible";
    }
};

moduleEvent$1.focusChange = function(parameter) {
    if (parameter) {
        moduleData$1.borderColor = "@color/kColorMajorTheme100";
    } else {
        moduleData$1.borderColor = "@color/kColorInputFill";
    }
};

moduleEvent$1.cancel = function() {
    $nativeAPI.containerBack();
};

moduleEvent$1.search = function() {
    requestRecommendList();
};

async function requestRecommendList() {
    if (isInvalidString(searchInput)) return;
    showLoading(true);
    let listData = await sendRequest("v1/gridstrategy/strategy/search", params = {
        markCode: searchInput
    });
    listData = handleSpotResponse(listData, true);
    if (!listData || listData == null || listData.length == 0) {
        listData = [];
        listData.push(emptyItem);
    } else {
        listDataConfig(listData, false, true);
    }
    moduleData$1.traderList = listData;
    showLoading(false);
}

async function clickedItem(index) {
    clickedCopy(index);
}

async function clickedCopy(index) {
    if (commonData.isLogin == 0) {
        await openPage("login");
        return;
    }
    if (index >= moduleData$1.traderList.length) {
        return;
    }
    let item = moduleData$1.traderList[index];
    await setCopyParams$1(item, 0, 3);
    if (item.userType == 1) {
        await analytics$1("tradingbot_copy_userfuturesgrid_app");
    } else {
        await analytics$1("tradingbot_copy_botsfuturesgrid_app");
    }
}

moduleEvent$1.copyShareCode = async function(markCode) {
    copyText(markCode, $i18n.n_trade_bot_share_code, $i18n.n_replicated);
};

moduleEvent$1.clearFocus = function() {
    moduleData$1.onFocus = false;
};

moduleEvent$1.clearInput = function() {
    moduleData$1.searchInput = "";
};

moduleEvent$1.clickedCopy = clickedCopy;

moduleEvent$1.clickedItem = clickedItem;

function defaultData() {
    return {
        bannerCurrentIndex: "0",
        bannerList: [],
        bannerVisibility: "gone",
        bannerAndroidStrokeVisibility: commonData.OS == 1 ? "visible" : "gone",
        bannerIndicatorList: [],
        bannerIndicatorVisibility: "gone",
        bannerAutoScroll: "true"
    };
}

async function start() {
    requestBannerInfo();
}

const {moduleData: moduleData, moduleEvent: moduleEvent} = moduleDefine("contractAdBanner", start, defaultData);

moduleEvent.selectedBannerIndex = async function(index) {
    moduleData.bannerCurrentIndex = String(index);
    handleSliderIndicatorView();
};

moduleEvent.bannerClickBanner = async function() {
    var index = parseInt(moduleData.bannerCurrentIndex);
    if (index >= moduleData.bannerList.length) {
        return;
    }
    var obj = moduleData.bannerList[index];
    if (!isInvalidString(obj.jumpTo)) {
        openURL(obj.jumpTo);
    }
};

async function requestBannerInfo() {
    var params = {
        pageType: 72,
        showType: 9
    };
    let data = await sendRequest("v1/config/push/banner/list", params);
    data = handleSpotResponse(data);
    if (data && data != null && data.bannerAdvList != null || data.bannerAdvList.length > 0) {
        for (let i = 0; i < data.bannerAdvList.length; ++i) {
            let v = data.bannerAdvList[i];
            v.index = i;
            v.type = "1";
            v.currentImageURL = commonData.colorMode === 1 ? v.nightImageUrl : v.imageUrl;
        }
        handleSliderView(data.bannerAdvList);
    } else {
        handleSliderView([]);
    }
}

async function handleSliderView(list) {
    moduleData.bannerList = list;
    moduleData.bannerVisibility = list.length > 0 ? "visible" : "gone";
    moduleData.bannerAndroidStrokeVisibility = commonData.OS == 1 ? list.length > 0 ? "visible" : "gone" : "gone";
    handleSliderIndicatorView();
}

function handleSliderIndicatorView() {
    let indicatorList = [];
    for (let index = 0; index < moduleData.bannerList.length; index++) {
        if (moduleData.bannerCurrentIndex == String(index)) {
            indicatorList.push({
                type: "1"
            });
        } else {
            indicatorList.push({
                type: "2"
            });
        }
    }
    moduleData.bannerIndicatorList = indicatorList;
    moduleData.bannerIndicatorVisibility = indicatorList.length > 1 ? "visible" : "gone";
}

var currentLoginStateKey;

function sendCommonConfig(param) {
    sendCommonConfig$1(param);
}

async function sendLoginStatus(data) {
    sendLoginStatus$1(data);
    var loginStateKey = `${commonData.isLogin}_${commonData.userInfo.uId}`;
    if (currentLoginStateKey == null || currentLoginStateKey != loginStateKey) {
        currentLoginStateKey = loginStateKey;
        await loginStateChange();
    }
}

async function sendAgreementConfirm() {}

async function moduleAppear() {
    console.log("main-moduleAppear");
}

async function moduleDisappear() {
    console.log("main-moduleDisappear");
}

async function sendSocketData(data) {
    if (data.type == "market") {
        commonData.marketData = JSON.parse(data.data);
    } else if (data.type == "linearSwapWs") {
        commonData.linearSwapWsData = JSON.parse(data.data);
        refreshSymbolPrice();
        refreshSymbolPrice$1();
    } else if (data.type == "linearSwapPeriodKlineWs") {
        var tempObject = JSON.parse(data.data);
        console.log(`linearSwapPeriodKlineWs data = ${tempObject}`);
        commonData.linearSwapPeriodKlineWs[tempObject.symbol] = tempObject;
        refreshSymbolPrice();
        refreshSymbolPrice$1();
    }
}

async function onSymbolChange(symbolShortType) {
    await onSymbolChange$1(symbolShortType);
}

async function sendMarketSearchSymbol(params) {
    sendMarketSearchSymbol$1(params);
}

async function onTraderPullRefresh() {
    onTraderPullRefresh$1();
}

async function onSelectedIndex(index) {
    onSelectedIndex$1(index);
}

function showFilterMenuPop(params) {
    console.log(`main.js showFilterMenuPop = ${params}`);
    showFilterMenuPop$1(params);
}

$event.sendLoginStatus = sendLoginStatus;

$event.sendCommonConfig = sendCommonConfig;

$event.sendSocketData = sendSocketData;

$event.onSymbolChange = onSymbolChange;

$event.moduleAppear = moduleAppear;

$event.moduleDisappear = moduleDisappear;

$event.sendMarketSearchSymbol = sendMarketSearchSymbol;

$event.onTraderPullRefresh = onTraderPullRefresh;

$event.onSelectedIndex = onSelectedIndex;

$event.showFilterMenuPop = showFilterMenuPop;

$event.sendAgreementConfirm = sendAgreementConfirm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
